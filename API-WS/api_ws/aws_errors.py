"""AsyncAPI Main Defintions.

Privacy Hero 2 - Websocket API - Common Channel Definition.

"""

from .util import mls
from .schemas import Field, channel
from .tags import TAGS


def aws_internal_server_error():
    """Return AWS Internal Server Error Message Structure."""
    description = """
        This message is generated directly by AWS, and does not contain a tstamp.

        This messages indicates something fatal has ocurred in the server.  Upon
        receipt, the adapter should record the fact it ocurred, and try and reconnect
        to the backend, if a successful reconnection occurs, the adapter should log
        the internal server error to the backend, and then continue.
        """

    return f"""
        "name" : "AWSInternalServerError",
        "title" : "AWS Internal Server Error",
        "summary" : "AWS Internal Server Error",
        "description" : {mls(description)},
        "tags" : [
            {TAGS.get(TAGS.AWS_ERRORS)}
        ],
        "payload" : {{
            "type" : "object",
            "properties" : {{
                {Field.message_type("Internal server error",
                                    "An internal server error, AWS Generated")},
                "connectionId" : {{
                    "type" : "string",
                    "description" : "The AWS Websocket Connection ID."
                }},
                "requestId" : {{
                    "type" : "string",
                    "description" : "The ID of the request which caused the error."
                }}
            }},
            "example" : {{
                "message" : "Internal server error",
                "connectionId"  : "d2Vic29ja2V0IElE",
                "requestId" : "cmVxdWVzdCBJRA"
            }},
            "required" : [
                "message",
                "connectionId",
                "requestId"
            ],
            "additionalProperties": false
        }}
    """


def aws_server_error():
    """Return AWS General Server Error Message Structure."""
    description = """
        This message is generated directly by AWS, and does not contain a tstamp.

        This messages indicates something fatal has ocurred in the server.  Upon
        receipt, the adapter should record the fact it ocurred, and try and reconnect
        to the backend, if a successful reconnection occurs, the adapter should log
        the internal server error to the backend, and then continue.
        """

    return f"""
        "name" : "AWSServerError",
        "title" : "AWS Server Error",
        "summary" : "AWS Server Error",
        "description" : {mls(description)},
        "tags" : [
            {TAGS.get(TAGS.AWS_ERRORS)}
        ],
        "payload" : {{
            "type" : "object",
            "properties" : {{
                {Field.message_type("Error",
                                    "A general server error, AWS Generated")},
                "error" : {{
                    "type" : "string",
                    "description" : "The description of the Error."
                }}
            }},
            "example" : {{
                "message" : "Error",
                "error"  : "An error ocurred."
            }},
            "required" : [
                "message",
                "error"
            ],
            "additionalProperties": false
        }}
    """


def aws_errors_channel():
    """AWS Generated error messages."""
    description = """
        These are AWS Generated error messages from the backend to the adapter.

        They are generated by the AWS infrastructure, and not the backend code.

        IF the adapter receives one, it should assume the link is fatally compromised
        and internally record the error.  It should then drop the websocket connection
        and attempt to reconnect to the backed.  After a successful reconnection, the
        error should be logged to the AWS backend.
    """

    publish_desc = "AWS Error Message from the Backend to the Adapter."
    publish_msgs = [aws_internal_server_error(), aws_server_error()]

    return channel(
        description,
        "AWS Error Messages",
        pub_desc=publish_desc,
        pub_msgs=publish_msgs,
        tags=TAGS.AWS_ERRORS,
    )
