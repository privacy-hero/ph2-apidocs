"""AsyncAPI Main Defintions.

Privacy Hero 2 - Websocket API - Common Channel Definition.

"""

from .util import mls


def message_type_field(value=None, desc=None):
    """Return the definition of the standard message type field."""
    description = """
        This is the name of the message.  The operation that is to be performed
        and the further fields contained within the message can be identified
        based solely on this message type string.
        """
    if desc is None:
        desc = description
    value_str = ""
    if value is not None:
        value_str = f',"const" : "{value}"'
    return f"""
        "message" : {{
            "type" : "string",
            "description" :{mls(desc)}
            {value_str}
        }}
    """


def tstamp_field(desc=None):
    """Return the definition of the standard tstamp field."""
    description = """
        Every adapter/backend generated message contains a unique **tstamp**
        field.  This field defines both the time of a particular event having
        ocurred, and the pairing of messages in the case of events which are
        triggered as a result of commands from the backend.

        A Adapter will always return the tstamp of any message it is
        replying to.  IF the Adapter is generating an event asynchronously
        and not as a result of a direct comment, the tstamp contains the time
        of the event as generated by the adapter.

        The Field is an integer and is the number of **milliseconds** since
        midnight 1970, UTC.  Otherwise known as the Unix Epoch.
        """
    if desc is None:
        desc = description
    return f"""
        "tstamp" : {{
            "type" : "int",
            "format": "int64",
            "description" :{mls(desc)}
        }}
    """


def multi_field():
    """Return Multiple message packet field."""
    description = """
        An array of complete and individual messages as defined elsewhere in
        this specification.
        """
    return f"""
        "msgs": {{
            "type": "array",
            "description": {mls(description)},
            "items": {{ {base_message_schema()} }},
            "minItems": 1,
            "maxItems": 32
        }}
    """


def base_message_schema(
    mtype=None,
    mdesc=None,
    tdesc=None,
    extra_fields=None,
    extra_example=None,
    extra_required=None,
):
    """Return the base message schema."""
    exf = ""
    if extra_fields is not None:
        exf = f", {extra_fields}"

    exe = ""
    if extra_example is not None:
        exe = f", {extra_example}"

    example_msg = "example"
    if mtype is not None:
        example_msg = mtype

    exr = ""
    if extra_required is not None:
        exr = f", {extra_required}"

    return f"""
        "type" : "object",
        "properties" : {{
            {message_type_field(mtype, mdesc)},
            {tstamp_field(tdesc)}
            {exf}
        }},
        "example" : {{
            "message" : "{example_msg}",
            "tstamp"  : 1592217870123
            {exe}
        }},
        "required" : [
            "message"
            {exr}
        ]
    """


def base_message():
    """Return Standard Base Message Structure."""
    description = """
        All Privacy Hero 2 system messages have the following standard form.
        """

    return f"""
        "name" : "BaseMsg",
        "title" : "Base Message",
        "summary" : "Standard Message Base Format",
        "description" : {mls(description)},
        "payload" : {{
            {base_message_schema()}
        }}
    """


def multi_message():
    """Return Standard Multi Message Structure."""
    description = """
        All Privacy Hero 2 system messages may be bundled into a single multi-message.
        The multi message is a standard message, which hold an array of individual
        messages.  The individual messages when received will be treated as if they
        were received sequentially and independently in the order they are listed.

        The purpose of a Multi-Message is to cluster message processing for efficiency.
        """

    tstamp_desc = """
        The time the message was generated, unrelated to the bundled messages
        timestamps.
    """

    extra_fields = f"{multi_field()}"
    extra_example = '"msgs" : []'
    extra_required = '"tstamp", "msgs"'

    return f"""
        "name" : "MultiMsg",
        "title" : "Multi Message",
        "summary" : "Multiple Message Packet",
        "description" : {mls(description)},
        "payload" : {{
            { base_message_schema(
                "multi",
                "Multiple Message Packet.",
                tstamp_desc,
                extra_fields,
                extra_example,
                extra_required) },
            "additionalProperties": false
        }}
    """


def common_channel():
    """Messages/message formats which are common between the backend and adapter."""
    description = """
        The common channel is not an actual channel.  It defines the basic message
        structure upon which all other messages are based.
    """

    publish_desc = """
        All messages are sent by each end of the websocket as required.

        *Subscribe/Sub* messages are requests for information which do not update state.
        They do not establish an ongoing "subscription" to changes to said state, but
        simply cause the information requested to be sent once.

        *Publish/Pub* messages are either synchronous replies to Subscribe messages, OR
        they are operational messages which can effect state. (Such as turning on WiFi)

        There is no strict Subscribe/Publish semantic it is documentation convention
        ONLY. The websocket acts as two unidirectional message pipes and Sub/Pub
        messages are formatted, sent, received and treated identically and without
        distinction.
    """

    return f"""
        "description": {mls(description)},
        "publish": {{
            "summary" : "Basic Message Forms.",
            "description": {mls(publish_desc)},
            "message" : {{
                "oneOf" : [
                   {{ {base_message()} }},
                   {{ {multi_message()} }}
                ]
            }}
        }}
    """
