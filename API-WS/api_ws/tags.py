"""TAG Definitions.

Definition of Tags used in the API.
"""


class TAGS:
    """Tag Definitions."""

    MSG_FORMATS = "Message Formats"
    AWS_ERRORS = "AWS Errors"
    ADAPTER_DIAGS = "Adapter Diagnostics"
    ADAPTER_MSGS = "Adapter Messages"
    DEVICE_MSGS = "Device Messages"

    descriptions = {
        MSG_FORMATS: "Generic Message Formats.",
        AWS_ERRORS: "Errors Generated by AWS and sent to the adapter.",
        ADAPTER_DIAGS: "Adapter Diagnostic Messages.",
        ADAPTER_MSGS: "Messages relating to the Adapter and its global "
        + "state/configuration.",
        DEVICE_MSGS: "Messages relating to the devices connected to an Adapter and"
        + " their state/configuration.",
    }

    @classmethod
    def get(cls, tag):
        """Get an entry for a single tag.

        Args:
            tag (str): the name of the tag

        Returns:
            str: json formatted tag defintion
        """
        return f'{{ "name": "{tag}", "description": "{cls.descriptions[tag]}" }}'

    @classmethod
    def field(cls, entries=None):
        """Generate Tag Field.

        Args:
            entries (array of tags (str), optional): An array of tag names, if
            not set all tags will be emitted.

        Returns:
            str: json formatted AsyncAPI tag field.
        """
        if entries is None:
            entries = cls.descriptions.keys()
        elif not isinstance(entries, list):
            entries = [entries]
        first = True
        tags = '"tags" : [\n'
        for entry in entries:
            if not first:
                tags += ",\n"
            tags += cls.get(entry)
            first = False
        tags += "]\n"
        return tags
