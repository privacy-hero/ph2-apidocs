{
  "asyncapi": "2.0.0",
  "defaultContentType": "application/json",
  "info": {
    "title": "Privacy Hero 2 - Adapter <-> Backend Websocket API",
    "version": "0.1.3",
    "description": "# The API for Adapter to Backend communication.\n\n## Overview\n\nAll communication is carried out through a single websocket connection per\nadapter.  The Adapter connects and sends updates to state or requests for\nconfiguration as required, and is also triggered to perform operations or\nupdate its state asynchronously from the backend through the same connection.\n\nBoth directions of the connection use the same basic message format.\n\n## Operations\n\nThe API is broken down by operation, and message type/source.\n\n### Documentation Conventions:\n\n* **SUB** [Subscribe] messages are messages which are sent to the Backend from the\nAdapter.\n* **PUB** [Publish] messages are messages which are sent to the Adapter from the\nBackend.\n\nThe API does not have any inherent Publish/Subscribe semantics.  This is a\ndocumentation convention only.\n\nAll messages to/from the adapter have a common format, which are documented in the\n*Basic Message Forms*. set of operations.\n\n\n## CHANGELOG\n\n### V0.1.3\n\n1. Fix Example for [*Device Information*](#message-DeviceInformation)\n2. Better document how the speed and latency are calculated in\n   [*VPN Server Connect*](#message-VPNConnect)\n3. Better explain that [*VPN Server Connect*](#message-VPNConnect) message with an empty list\n   of servers is to be used as a vpn_disconnect message.\n\n### V0.1.2\n\n1. Modified speedtest result message [*Speedtest Result*](#message-SpeedTest) to track pperf\n   implementation on router.\n2. Changed organization of VPN server configuration in\n   [*VPN Server Connect*](#message-VPNConnect).\n3. [*VPN Connection Status*](#message-VPNStatus) updated to track new server id field.\n\n### V0.1.1\n\n1. Added the Adapter Reset [*Reset Router*](#message-Reset) message.\n2. Added the Adapter Resetting [*Router Reseting*](#message-Resetting) reply.\n\n\n\n### V0.1.0\n\n1. Added hyperlinks between messages to ease navigation.\n2. Added WPS service enable to [*Adapter Services*](#message-AdapterServices) message (and reply\n   [*Adapter Service State*](#message-AdapterServicesState)).\n3. Added Subscribed service enable to [*Adapter Services*](#message-AdapterServices) message (and\n   reply [*Adapter Service State*](#message-AdapterServicesState)).\n4. Removed \"VPN\" from [*Adapter Services*](#message-AdapterServices) (and reply\n   [*Adapter Service State*](#message-AdapterServicesState)).\n5. Added [*VPN Server Connect*](#message-VPNConnect) message.\n6. Added [*VPN Server Reconnect*](#message-VPNReconnect) message.\n7. Added [*VPN Connection Status*](#message-VPNStatus) message.\n8. Made ID field optional but present in every message by including in the\n   [*Base Message*](#message-BaseMsg) specification.\n9. Created [*Unsubscribed Whitlist*](#message-UnsubscribedWhitelist) message to set configuration\n   whitelist of domains which are still accessible when the router\n   subscription is invalid.\n10. Add list of config messages sent by backend as a result of initial\n    connection.\n11. Add the [*WPS Status*](#message-WPSStatus) message.\n12."
  },
  "servers": {
    "development": {
      "url": "ws2-dev.privacyhero.com",
      "description": "Development server",
      "protocol": "wss",
      "security": [
        {
          "user-password": []
        }
      ]
    },
    "qa": {
      "url": "ws2-qa.privacyhero.com",
      "description": "QA Test server",
      "protocol": "wss",
      "security": [
        {
          "user-password": []
        }
      ]
    },
    "production": {
      "url": "wss://ws2.privacyhero.com",
      "description": "Production server",
      "protocol": "wss",
      "security": [
        {
          "user-password": []
        }
      ]
    }
  },
  "components": {
    "securitySchemes": {
      "user-password": {
        "type": "userPassword",
        "description": "The user password follows the form <Adapter MAC>:<Adapter Secret Hash>\n\n- **Adapter MAC** is the hardware Mac address of the Adapter and it must\n    be the same as the mac used to register the adapter in production.\n    The MAC has the format *00:11:22:33:44:55* or *001122334455* or\n    *00-11-22-33-44-55* all of which are equivalent\n- **Adapter Secret Hash** is a Base64-URL encoded SHA256 hash of the\nunique id contained within the cpu or chips of the adapter.\n\nAn example user:password is (the binary secret is the string ***password*** ):\n\n*00:11:22:33:44:55:XohImNooBHFR0OVvjcYpJ3NgPQ1qq73WKhHvch0VQtg*\n\nThe user/password is passed in the **Authorization** header of the http\nconnection which established the websocket."
      }
    }
  },
  "channels": {
    "COMMON": {
      "description": "The common channel is not an actual channel.  It defines the basic message\nstructure upon which all other messages are based.",
      "subscribe": {
        "summary": "Basic Message Forms",
        "description": "All messages are sent by each end of the websocket as required.  These message\nformats are equally valid for transmission from the adapter [SUB] as well as\ntransmission by the back end [PUB].\n\nThere is no strict Subscribe/Publish semantic it is documentation convention\nONLY. The websocket acts as two unidirectional message pipes and Sub/Pub\nmessages are formatted, sent, received and treated identically and without\ndistinction.",
        "message": {
          "oneOf": [
            {
              "name": "BaseMsg",
              "title": "Base Message",
              "summary": "Standard Message Base Format",
              "description": "All Privacy Hero 2 system messages have the following standard form.",
              "tags": [
                {
                  "name": "Message Formats",
                  "description": "Generic Message Formats."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "This is the name of the message.  The operation that is to be performed\nand the further fields contained within the message can be identified\nbased solely on this message type string."
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Every adapter/backend generated message contains a unique **tstamp**\nfield.  This field defines both the time of a particular event having\nocurred, and the pairing of messages in the case of events which are\ntriggered as a result of commands from the backend.\n\nAn Adapter will always return the tstamp of any message it is\nreplying to.  IF the Adapter is generating an event asynchronously\nand not as a result of a direct comment, the tstamp contains the time\nof the event as generated by the adapter.\n\nThe Field is an integer and is the number of **milliseconds** since\nmidnight 1970, UTC.  Otherwise known as the Unix Epoch."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  }
                },
                "example": {
                  "message": "example",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ"
                },
                "required": [
                  "message"
                ]
              }
            },
            {
              "name": "MultiMsg",
              "title": "Multi Message",
              "summary": "Multiple Message Packet",
              "description": "All Privacy Hero 2 system messages may be bundled into a single multi-message.\nThe multi message is a standard message, which hold an array of individual\nmessages.  The individual messages when received will be treated as if they\nwere received sequentially and independently in the order they are listed.\n\nThe purpose of a Multi-Message is to cluster message processing for efficiency.\n\n## Notes regarding adapter bundling implementation.\n\nThe Backend is charged in 100ms units of execution.  It also takes time for the\nbackend to startup and begin processing.  Therefore, it is preferable, unless\nthe message is urgent, that all messages are bundled in the adapter in a minimum\nof 200ms blocks.  If an urgent message must be sent, it should be added to\nthe current bundle and the entire bundle be sent immediately.\n\nThe maximum single multi-message size must not exceed 32KB.  If adding a message\nto the bundle would cause the message size to exceed 32KB, the bundle should be\nsent and the message which would have exceeded the size is added to the next\nbundle.  IF a message is defined which does exceed 32KB, it should not be\nbundled, but MUST be sent as a discreet message.  In this case, the maximum\nmessage size must never exceed 128KB.\n\nThe multi-message is guaranteed NOT to have an *id* field, but the\nmessages contained within it, may have *id* fields and they should be\nprocessed accordingly.",
              "tags": [
                {
                  "name": "Message Formats",
                  "description": "Generic Message Formats."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Multiple Message Packet.",
                    "const": "multi",
                    "minLength": 5,
                    "maxLength": 5
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The time the message was generated, unrelated to the bundled messages\ntimestamps."
                  },
                  "msgs": {
                    "type": "array",
                    "description": "An array of complete and individual messages as defined elsewhere in\nthis specification.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "This is the name of the message.  The operation that is to be performed\nand the further fields contained within the message can be identified\nbased solely on this message type string."
                        },
                        "tstamp": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Every adapter/backend generated message contains a unique **tstamp**\nfield.  This field defines both the time of a particular event having\nocurred, and the pairing of messages in the case of events which are\ntriggered as a result of commands from the backend.\n\nAn Adapter will always return the tstamp of any message it is\nreplying to.  IF the Adapter is generating an event asynchronously\nand not as a result of a direct comment, the tstamp contains the time\nof the event as generated by the adapter.\n\nThe Field is an integer and is the number of **milliseconds** since\nmidnight 1970, UTC.  Otherwise known as the Unix Epoch."
                        },
                        "id": {
                          "type": "string",
                          "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                          "minLength": 1,
                          "maxLength": 256
                        }
                      },
                      "example": {
                        "message": "example",
                        "tstamp": 1592217870123,
                        "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ"
                      },
                      "required": [
                        "message"
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 32
                  }
                },
                "example": {
                  "message": "multi",
                  "tstamp": 1592217870123,
                  "msgs": []
                },
                "required": [
                  "message",
                  "tstamp",
                  "msgs"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Message Formats",
            "description": "Generic Message Formats."
          }
        ]
      },
      "publish": {
        "summary": "Basic Message Forms",
        "description": "All messages are sent by each end of the websocket as required.  These message\nformats are equally valid for transmission from the adapter [SUB] as well as\ntransmission by the back end [PUB].\n\nThere is no strict Subscribe/Publish semantic it is documentation convention\nONLY. The websocket acts as two unidirectional message pipes and Sub/Pub\nmessages are formatted, sent, received and treated identically and without\ndistinction.",
        "message": {
          "oneOf": [
            {
              "name": "BaseMsg",
              "title": "Base Message",
              "summary": "Standard Message Base Format",
              "description": "All Privacy Hero 2 system messages have the following standard form.",
              "tags": [
                {
                  "name": "Message Formats",
                  "description": "Generic Message Formats."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "This is the name of the message.  The operation that is to be performed\nand the further fields contained within the message can be identified\nbased solely on this message type string."
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Every adapter/backend generated message contains a unique **tstamp**\nfield.  This field defines both the time of a particular event having\nocurred, and the pairing of messages in the case of events which are\ntriggered as a result of commands from the backend.\n\nAn Adapter will always return the tstamp of any message it is\nreplying to.  IF the Adapter is generating an event asynchronously\nand not as a result of a direct comment, the tstamp contains the time\nof the event as generated by the adapter.\n\nThe Field is an integer and is the number of **milliseconds** since\nmidnight 1970, UTC.  Otherwise known as the Unix Epoch."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  This field is only sent if this message\nis a reply to a message received from the backend, AND that\nmessage included the ID Field.  In that case, it is included unchanged.",
                    "minLength": 1,
                    "maxLength": 256
                  }
                },
                "example": {
                  "message": "example",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ"
                },
                "required": [
                  "message"
                ]
              }
            },
            {
              "name": "MultiMsg",
              "title": "Multi Message",
              "summary": "Multiple Message Packet",
              "description": "All Privacy Hero 2 system messages may be bundled into a single multi-message.\nThe multi message is a standard message, which hold an array of individual\nmessages.  The individual messages when received will be treated as if they\nwere received sequentially and independently in the order they are listed.\n\nThe purpose of a Multi-Message is to cluster message processing for efficiency.\n\n## Notes regarding adapter bundling implementation.\n\nThe Backend is charged in 100ms units of execution.  It also takes time for the\nbackend to startup and begin processing.  Therefore, it is preferable, unless\nthe message is urgent, that all messages are bundled in the adapter in a minimum\nof 200ms blocks.  If an urgent message must be sent, it should be added to\nthe current bundle and the entire bundle be sent immediately.\n\nThe maximum single multi-message size must not exceed 32KB.  If adding a message\nto the bundle would cause the message size to exceed 32KB, the bundle should be\nsent and the message which would have exceeded the size is added to the next\nbundle.  IF a message is defined which does exceed 32KB, it should not be\nbundled, but MUST be sent as a discreet message.  In this case, the maximum\nmessage size must never exceed 128KB.\n\nThe multi-message is guaranteed NOT to have an *id* field, but the\nmessages contained within it, may have *id* fields and they should be\nprocessed accordingly.",
              "tags": [
                {
                  "name": "Message Formats",
                  "description": "Generic Message Formats."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Multiple Message Packet.",
                    "const": "multi",
                    "minLength": 5,
                    "maxLength": 5
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The time the message was generated, unrelated to the bundled messages\ntimestamps."
                  },
                  "msgs": {
                    "type": "array",
                    "description": "An array of complete and individual messages as defined elsewhere in\nthis specification.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "This is the name of the message.  The operation that is to be performed\nand the further fields contained within the message can be identified\nbased solely on this message type string."
                        },
                        "tstamp": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Every adapter/backend generated message contains a unique **tstamp**\nfield.  This field defines both the time of a particular event having\nocurred, and the pairing of messages in the case of events which are\ntriggered as a result of commands from the backend.\n\nAn Adapter will always return the tstamp of any message it is\nreplying to.  IF the Adapter is generating an event asynchronously\nand not as a result of a direct comment, the tstamp contains the time\nof the event as generated by the adapter.\n\nThe Field is an integer and is the number of **milliseconds** since\nmidnight 1970, UTC.  Otherwise known as the Unix Epoch."
                        },
                        "id": {
                          "type": "string",
                          "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                          "minLength": 1,
                          "maxLength": 256
                        }
                      },
                      "example": {
                        "message": "example",
                        "tstamp": 1592217870123,
                        "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ"
                      },
                      "required": [
                        "message"
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 32
                  }
                },
                "example": {
                  "message": "multi",
                  "tstamp": 1592217870123,
                  "msgs": []
                },
                "required": [
                  "message",
                  "tstamp",
                  "msgs"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Message Formats",
            "description": "Generic Message Formats."
          }
        ]
      }
    },
    "AWS_ERRORS": {
      "description": "These are AWS Generated error messages from the backend to the adapter.\n\nThey are generated by the AWS infrastructure, and not the backend code.\n\nIF the adapter receives one, it should assume the link is fatally compromised\nand internally record the error.  It should then drop the websocket connection\nand attempt to reconnect to the backed.  After a successful reconnection, the\nerror should be logged to the AWS backend.",
      "publish": {
        "summary": "AWS Error Messages",
        "description": "AWS Error Message from the Backend to the Adapter.",
        "message": {
          "oneOf": [
            {
              "name": "AWSInternalServerError",
              "title": "AWS Internal Server Error",
              "summary": "AWS Internal Server Error",
              "description": "This message is generated directly by AWS, and does not contain a tstamp.\n\nThis messages indicates something fatal has ocurred in the server.  Upon\nreceipt, the adapter should record the fact it ocurred, and try and reconnect\nto the backend, if a successful reconnection occurs, the adapter should log\nthe internal server error to the backend, and then continue.",
              "tags": [
                {
                  "name": "AWS Errors",
                  "description": "Errors Generated by AWS and sent to the adapter."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "An internal server error, AWS Generated",
                    "const": "Internal server error",
                    "minLength": 21,
                    "maxLength": 21
                  },
                  "connectionId": {
                    "type": "string",
                    "description": "The AWS Websocket Connection ID."
                  },
                  "requestId": {
                    "type": "string",
                    "description": "The ID of the request which caused the error."
                  }
                },
                "example": {
                  "message": "Internal server error",
                  "connectionId": "d2Vic29ja2V0IElE",
                  "requestId": "cmVxdWVzdCBJRA"
                },
                "required": [
                  "message",
                  "connectionId",
                  "requestId"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "AWSServerError",
              "title": "AWS Server Error",
              "summary": "AWS Server Error",
              "description": "This message is generated directly by AWS, and does not contain a tstamp.\n\nThis messages indicates something fatal has ocurred in the server.  Upon\nreceipt, the adapter should record the fact it ocurred, and try and reconnect\nto the backend, if a successful reconnection occurs, the adapter should log\nthe internal server error to the backend, and then continue.",
              "tags": [
                {
                  "name": "AWS Errors",
                  "description": "Errors Generated by AWS and sent to the adapter."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "A general server error, AWS Generated",
                    "const": "Error",
                    "minLength": 5,
                    "maxLength": 5
                  },
                  "error": {
                    "type": "string",
                    "description": "The description of the Error."
                  }
                },
                "example": {
                  "message": "Error",
                  "error": "An error ocurred."
                },
                "required": [
                  "message",
                  "error"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "AWS Errors",
            "description": "Errors Generated by AWS and sent to the adapter."
          }
        ]
      }
    },
    "CONNECTION": {
      "description": "These are messages related to the websocket connection and its management.\n\n## NOTES\n\n1. AWS will terminate a websocket after remaining idle for 10 minutes.\n2. AWS May terminate a websocket connection that has been continuously\nmade for 2 Hours.\n\nThere is nothing preventing the link being immediately re-established.\n\n### TODO:\n\nIt is not clear if websocket pings are sufficient to avoid the 10 minute\nidle timeout.  This needs to be tested.\n\nIf it is not sufficient, we will need to do periodic heartbeats at around 9\nminute intervals to prevent the idle timeout.\n\nIt seems there is nothing we can do about the 2 hour timeout except reconnect.\nThis timeout needs to be tested.",
      "subscribe": {
        "summary": "Adapter Link Management",
        "description": "Link Management Messages from the Adapter.",
        "message": {
          "oneOf": [
            {
              "name": "LinkEstablished",
              "title": "Link Established",
              "summary": "Advise the Backend that the Adapter has connected to a new websocket",
              "description": "This message is sent from the Adapter to the Backend as the very first\nmessage it sends AFTER establishing any websocket connection to the\nbackend.  It allows the backend to perform link connection housekeeping\nfor the adapter, which is necessary for proper operation.\n\nUpon receipt, the Backend will queue the initial configuration for the\nrouter in the following order:\n\n1. [*Initial Configuration*](#message-InitialConfig)\n2. [*Unsubscribed Whitlist*](#message-UnsubscribedWhitelist)\n3. [*Known Devices*](#message-KnownDevices)\n4. [*Set Bedtime*](#message-SetBedtime) 1 message each for as many bedtime schedules exist.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Advise the Backend that the Adapter has connected to a new websocket",
                    "const": "link established",
                    "minLength": 16,
                    "maxLength": 16
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The time the link established message was queued by the Adapter.\n(According to the adapters internal clock.)"
                  },
                  "version": {
                    "type": "string",
                    "format": "bas64-url-sha256",
                    "description": "sha256 hash of the firmware image currently loaded in the Adapter. Encoded\nwith base64-url encoding.",
                    "minLength": 43,
                    "maxLength": 43
                  },
                  "variant": {
                    "type": "string",
                    "description": "Optional: Identifier to specify what type of operation the adapter is\nperforming.  This is used to allow the system to deploy different software\nversions to the same hardware.  Normally the backend will not change the\nvariant but will advise about the latest version of software for that variant.",
                    "minLength": 1
                  },
                  "disconnected": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Optional: If this message is being sent because the link was disconnected, the\n**disconnected** field is sent, containing the time in milliseconds when the\nadapter detected the link had failed.  If this is the first connection\nsince power on, this field is omitted."
                  }
                },
                "example": {
                  "message": "link established",
                  "tstamp": 1592217870123,
                  "version": "R8rCrK4M_Ff7VttHWuUd9253JrYgwvqO6U15enlcug8",
                  "variant": "PHero2-Router",
                  "disconnected": 1592316782123
                },
                "required": [
                  "message",
                  "tstamp",
                  "version"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "Resetting",
              "title": "Router Resetting",
              "summary": "Router is going to do a hardware reset.",
              "description": "This message is sent as a reply to the [*Reset Router*](#message-Reset) message.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Router is going to do a hardware reset.",
                    "const": "resetting",
                    "minLength": 9,
                    "maxLength": 9
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The tstamp in this message is the same tstamp sent in the *Link Established*\nmessage from the adapter which triggered it to be sent."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  This field is only sent if this message\nis a reply to a message received from the backend, AND that\nmessage included the ID Field.  In that case, it is included unchanged.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "in": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of seconds before the reset will occur.  IF omitted, reset is\nimminent."
                  }
                },
                "example": {
                  "message": "resetting",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "in": 10
                },
                "required": [
                  "message",
                  "tstamp"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Adapter Messages",
            "description": "Messages relating to the Adapter and its global state/configuration."
          }
        ]
      },
      "publish": {
        "summary": "Adapter Link Management",
        "description": "Initial Configuration.",
        "message": {
          "oneOf": [
            {
              "name": "InitialConfig",
              "title": "Initial Configuration",
              "summary": "Initial Highest Level Configuration",
              "description": "This message contains the highest level configuration and is sent by the\nbackend after a link is established, and the backend receives the\n[*Link Established*](#message-LinkEstablished) message from the Adapter.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Initial Highest Level Configuration",
                    "const": "initial cfg",
                    "minLength": 11,
                    "maxLength": 11
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The tstamp in this message is the same tstamp sent in the *Link Established*\nmessage from the adapter which triggered it to be sent."
                  },
                  "version": {
                    "type": "string",
                    "format": "bas64-url-sha256",
                    "description": "The version of the latest firmaware suitable for the adapter.  This\nversion should match the version installed in the adapter before it continues.\nIf it does noe, the adapter should retrieve the new version from the url in\nthis message, program that and restart the connection.",
                    "minLength": 43,
                    "maxLength": 43
                  },
                  "firmware": {
                    "type": "string",
                    "format": "url",
                    "description": "The firmware url.  This is the location where the latest firmware may be\ndownloaded.  If the adapter detects that a firmware update is required it\ndownloads the firmware from this URL.  If the firmware can not be downloaded\nor the image downloaded does not match the **version** hash, then the firmware\nin the adapter must not be changed, and an error should be logged to the\nbackend."
                  },
                  "loglevel": {
                    "type": "string",
                    "description": "The Minimum level of messages which should be logged to the backend.",
                    "enum": [
                      "NONE",
                      "ERROR",
                      "WARNING",
                      "DEBUG"
                    ]
                  }
                },
                "example": {
                  "message": "initial cfg",
                  "tstamp": 1592217870123,
                  "version": "uDHqOfzVFgcldv41fTTAOVtJSLVxn8M36ufxrEnWtzg",
                  "firmware": "https://dl.privacyhero.com/firmware/adapter_v107.fw",
                  "loglevel": "DEBUG"
                },
                "required": [
                  "message",
                  "tstamp",
                  "version",
                  "firmware",
                  "loglevel"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "Reset",
              "title": "Router Reset",
              "summary": "Cause Router to do a hardware reset.",
              "description": "This message causes, after an optional delay, the router to be reset.\n[*Router Reseting*](#message-Resetting) is sent in reply to this message before the reset\noccurs.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Cause Router to do a hardware reset.",
                    "const": "reset",
                    "minLength": 5,
                    "maxLength": 5
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The tstamp in this message is set by the Backend and must be returned\nverbatim in the reply."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "in": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of seconds to delay before resetting.  IF omitted, reset as\nfast as possible."
                  }
                },
                "example": {
                  "message": "reset",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "in": 10
                },
                "required": [
                  "message",
                  "tstamp"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "UnsubscribedWhitelist",
              "title": "Unsubscribed Whitelist",
              "summary": "List of all urls that may be accessed when the router is not subscribed.",
              "description": "This message contains the list of urls devices may access when there is\nno active subscription for the router.  It is sent in response to a\n[*Link Established*](#message-LinkEstablished) message from the Adapter.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "List of all urls that may be accessed when the router is not subscribed.",
                    "const": "unsubscribed-whitelist",
                    "minLength": 22,
                    "maxLength": 22
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The tstamp in this message is the same tstamp sent in the *Link Established*\nmessage from the adapter which triggered it to be sent."
                  },
                  "whitelist": {
                    "type": "array",
                    "description": "A list of regex url domains which, if matched, are allowed to be\naccessed even when the router is unsubscribed. All other HTTP traffic is\nrouted to a url specified in the proxy field.\n\nI addition, all HTTPS traffic not to a whitelisted domain is simply blocked.\n\nThis functionality is ONLY active if\nthe [*Adapter Services*](#message-AdapterServices) \"Subscribed\" service state is False.",
                    "items": {
                      "type": "string",
                      "format": "regex",
                      "description": "A URL Regex to match."
                    },
                    "minItems": 1
                  },
                  "proxy": {
                    "type": "string",
                    "format": "url",
                    "description": "The URL to route all non-whitelisted traffic to."
                  }
                },
                "example": {
                  "message": "unsubscribed-whitelist",
                  "tstamp": 1592217870123,
                  "whitelist": [
                    "^(.*\\.)?privacyhero.com$",
                    "^.*\\.chargebee.com$"
                  ]
                },
                "required": [
                  "message",
                  "tstamp",
                  "whitelist"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Adapter Messages",
            "description": "Messages relating to the Adapter and its global state/configuration."
          }
        ]
      }
    },
    "CONFIGURATION": {
      "description": "These are messages related to the configuration of the adapter.\n\nThese messages are sent on initial connection and also periodically as\nrequired to reflect user changes in the configuration.",
      "subscribe": {
        "summary": "Adapter Configuration",
        "description": "Configuration Acknowledgements from the Adapter",
        "message": {
          "oneOf": [
            {
              "name": "AdapterServicesState",
              "title": "Adapter Services State",
              "summary": "Report current state of a service on the Adapter.",
              "description": "This is the reply to setting the adapter service states from the\n[*Adapter Services*](#message-AdapterServices) message.\n\nIf the configuration command contained multiple services, the reply\nmay also contain multiple services, or services may be responded to\nin a group or individual, depending on how long the service takes to\nstart on the adapter and the adapters implementation.  However, each\nreply must contain the tstamp from the original command from the\nbackend, and the ID if present.\n\nThis reply informs the backend of the final state of the service,\nie, if UPNP server was commanded to turn on, but fails, the reply\nwill be sent as a result of the failure AND will have its state set\nto false.  The tstamp will still reflect the tstamp in the original\ncommand, as will the ID if present.\n\nVPN status updates are not reported using this message. See the\n[*VPN Connection Status*](#message-VPNStatus) message for details.\n\nIF a service state can change without command from the backend, this\nmessage is sent unsolicited with the changed state for the service.\nin that case, the tstamp MUST be set to the tstamp of the time the\nstate changed on the adapter, and there must be no ID field.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Report current state of a service on the Adapter.",
                    "const": "adapter-services-state",
                    "minLength": 22,
                    "maxLength": 22
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The response tstamp, as taken from the original command in the case\nof a reply, OR the tstamp the state changed on the adapter if sent asynchronously."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "services": {
                    "type": "array",
                    "description": "The final state of the service on the Adapter, after processing the\ncommand, or as a result of an asynchronous change.",
                    "items": {
                      "type": "object",
                      "required": [
                        "service",
                        "state"
                      ],
                      "description": "An individual service state.",
                      "properties": {
                        "service": {
                          "type": "string",
                          "description": "The name of the service being configured.\n- AdBlocking = Globally Enable/Disable AdBlocking\n- StreamRelocation = Globally Enable/Disabe Stream Relocation\n- UPNP = Enable a UPNP server to manage port forwarding for lan clients.\n- WIFI = Globally Enable/Disbale the Wifi on the Router.\n- WPS = Enable/Disable the WPS Button. This does not enable the WPS\n  function, only allows the button to operate normally or not. Active\n  WPS State changes are reported using the [*WPS Status*](#message-WPSStatus) message\n- Subscribed = True - Normal Operation.  False - Subscription captive\n  portal mode.  In captive portal mode only whitelisted domains have\n  access to the internet. See [*Unsubscribed Whitlist*](#message-UnsubscribedWhitelist) message.",
                          "enum": [
                            "AdBlocking",
                            "StreamRelocation",
                            "Malware",
                            "UPNP",
                            "WIFI",
                            "WPS",
                            "Subscribed"
                          ]
                        },
                        "state": {
                          "type": "boolean",
                          "description": "The state to set the service to.\n* true = Turn the service ON.\n* false = Turn the service OFF."
                        }
                      },
                      "additionalProperties": false
                    },
                    "minItems": 1
                  }
                },
                "example": {
                  "message": "adapter-services-state",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "services": [
                    {
                      "service": "AdBlocking",
                      "state": true
                    },
                    {
                      "service": "UPNP",
                      "state": false
                    }
                  ]
                },
                "required": [
                  "message",
                  "tstamp",
                  "services"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "VPNReconnect",
              "title": "VPN Server Reconnect",
              "summary": "Reconnect to a listed VPN Server.",
              "description": "This message causes the backend to produce a new list of valid vpn\nservers and credentials and return it to the requesting router by way of\na [*VPN Server Connect*](#message-VPNConnect) message.\n\nThis message is only sent once, if an established VPN connection drops,\nand the Router is unable to re-establish a connection using the same\ncredentials as the last dropped link.  IF the router is unable to\nestablish a connection to any of the listed servers, the process\nterminates and this message is not sent.  Instead the router sends a\n[*VPN Connection Status*](#message-VPNStatus) message detailing the failure.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Reconnect to a listed VPN Server.",
                    "const": "vpn-reconnect",
                    "minLength": 13,
                    "maxLength": 13
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The request timestamp of the configuration."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  }
                },
                "example": {
                  "message": "vpn-reconnect",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ"
                },
                "required": [
                  "message",
                  "tstamp"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "VPNStatus",
              "title": "VPN Connection Status",
              "summary": "Report VPN Connection Status.",
              "description": "This message advises the current VPN status to the backend.\n\nDuring VPN connection, multiple status messages should be sent tracking\nthe major phases of VPN connection initiation, and also, reconnections\non a failed link and link disconnection.  VPN Connection/Disconnection\nis triggered by the receipt of a [*VPN Server Connect*](#message-VPNConnect) message.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Report VPN Connection Status.",
                    "const": "vpn-status",
                    "minLength": 10,
                    "maxLength": 10
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The request timestamp of the configuration."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "status": {
                    "type": "string",
                    "description": "The current status of the VPN process.\n\n- *test-connecting* = Connecting to a VPN server to test.\n- *testing* = Test connection to VPN succeeded and test started.  Test\n  results will be sent in [*Speedtest Result*](#message-SpeedTest).\n- *test-failed* = Either the connection couldn't be established to test, or\n  the test has failed to execute.\n- *connecting* = Connecting the VPN tunnel for general use.\n- *connected* = The connection to the VPN is established and routing is\n  operational.\n- *failed* = The vpn server failed to connect or the link broke.   After\n  this call the router may no longer use the credentials presented in\n  [*VPN Server Connect*](#message-VPNConnect) for the server.\n- *reconnecting* = The VPN server was running and failed, trying to\n  reconnect. This status is sent instead of the *connecting* status when a\n  vpn link was established, but dropped and we are attempting to\n  re-establish the connection.\n- *disconnected* = The last possible server was tested and failed, giving up\n  trying to enable VPN.  *server* should not be present, as no server is\n  being accessed in this state.",
                    "enum": [
                      "test-connecting",
                      "testing",
                      "test-failed",
                      "connecting",
                      "connected",
                      "failed",
                      "reconnecting",
                      "disconnected"
                    ]
                  },
                  "server": {
                    "type": "string",
                    "description": "The server ID, sent for every status except *disconnected*"
                  },
                  "description": {
                    "type": "string",
                    "description": "String description providing extra information about a state.\nIt is valid for the same state to be sent multiple times with changing desc_string.\n\nFor example *testing* multiple times for the same URL with a running commentary\nabout the test as it executes."
                  }
                },
                "example": {
                  "message": "vpn-status",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "status": "testing",
                  "server": "wireguard-1",
                  "description": "TX Speedtest started"
                },
                "required": [
                  "message",
                  "tstamp",
                  "status"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "WPSStatus",
              "title": "WPS Function Status",
              "summary": "Report WPS Function Status.",
              "description": "This message advises the current WPS Function status to the backend.\nThis is a summary of the result of presing the WPS button on the router.\n\nSee [*Adapter Service State*](#message-AdapterServicesState) for the configuration which\nenables/disables the WPS function.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Report WPS Function Status.",
                    "const": "wps-status",
                    "minLength": 10,
                    "maxLength": 10
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The request timestamp of the configuration."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "status": {
                    "type": "string",
                    "description": "The current status of the WPS function.\n\n- *activated* = The WPS function is activated.  The optional **duration**\n  field defines the number of seconds the WPS mode will be active.\n- *blocked* = The WPS function activation button was pressed, but the\n  function is blocked by configuration. **duration** is omitted with this\n  status.\n- *completed* = The WPS function is no longer activated. **duration** is\n  omitted with this status.",
                    "enum": [
                      "activated",
                      "blocked",
                      "completed"
                    ]
                  },
                  "duration": {
                    "type": "integer",
                    "format": "Number of seconds WPS will be activated on the router.",
                    "description": "A INT"
                  }
                },
                "example": {
                  "message": "wps-status",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "status": "activated",
                  "duration": 180
                },
                "required": [
                  "message",
                  "tstamp",
                  "status"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Adapter Messages",
            "description": "Messages relating to the Adapter and its global state/configuration."
          }
        ]
      },
      "publish": {
        "summary": "Adapter Configuration",
        "description": "Commands to set the Adapter Configuration.",
        "message": {
          "oneOf": [
            {
              "name": "AdapterServices",
              "title": "Adapter Services",
              "summary": "Configure Adapter Level services on the Adapter.",
              "description": "This message causes the adapter that receives it to turn on/off the\nadapter wide services specified.  If any service is not specified, its\nstate is not changed.\n\nIF the message contains multiple states, they may be replied to either\nindividually or as a group.  In particular, \"VPN\" may take a long time\nto start.  \"VPN\" will not be replied to until the \"VPN\" has fully\nstarted or has failed.\n\nSee the \"vpn_status_update\" message which allows progressive and\ndetailed vpn startup/shutdown state to be reported to the Backend asynchronously.\n\nRegardless of the requested state, the reply for \"VPN\" always reflects\nthe state which was achieved.  ie, if the VPN state in teh request was\n*true*, but the VPN failed to start, the reply must specify the actual\nstate as *false*.  If other states may also fail to configure, they too\nmust be replied with their actual state, and not the requested\nstate.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Configure Adapter Level services on the Adapter.",
                    "const": "adapter-services",
                    "minLength": 16,
                    "maxLength": 16
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The request timestamp of the configuration, this tstamp must be returned\nin the reply with the results as the message tstamp.  In the"
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "services": {
                    "type": "array",
                    "description": "A List of services and the states to set on the adapter.",
                    "items": {
                      "type": "object",
                      "required": [
                        "service",
                        "state"
                      ],
                      "description": "An individual service state.",
                      "properties": {
                        "service": {
                          "type": "string",
                          "description": "The name of the service being configured.\n- AdBlocking = Globally Enable/Disable AdBlocking\n- StreamRelocation = Globally Enable/Disabe Stream Relocation\n- UPNP = Enable a UPNP server to manage port forwarding for lan clients.\n- WIFI = Globally Enable/Disbale the Wifi on the Router.\n- WPS = Enable/Disable the WPS Button. This does not enable the WPS\n  function, only allows the button to operate normally or not. Active\n  WPS State changes are reported using the [*WPS Status*](#message-WPSStatus) message\n- Subscribed = True - Normal Operation.  False - Subscription captive\n  portal mode.  In captive portal mode only whitelisted domains have\n  access to the internet. See [*Unsubscribed Whitlist*](#message-UnsubscribedWhitelist) message.",
                          "enum": [
                            "AdBlocking",
                            "StreamRelocation",
                            "Malware",
                            "UPNP",
                            "WIFI",
                            "WPS",
                            "Subscribed"
                          ]
                        },
                        "state": {
                          "type": "boolean",
                          "description": "The state to set the service to.\n* true = Turn the service ON.\n* false = Turn the service OFF."
                        }
                      },
                      "additionalProperties": false
                    },
                    "minItems": 1
                  }
                },
                "example": {
                  "message": "adapter-services",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "services": [
                    {
                      "service": "AdBlocking",
                      "state": true
                    },
                    {
                      "service": "UPNP",
                      "state": false
                    },
                    {
                      "service": "WPS",
                      "state": false
                    },
                    {
                      "service": "Subscribed",
                      "state": true
                    }
                  ]
                },
                "required": [
                  "message",
                  "tstamp",
                  "services"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "VPNConnect",
              "title": "VPN Server Connect",
              "summary": "Connect to a listed VPN Server.",
              "description": "This message causes the router to attempt to connect to one of the\nlisted VPN servers.\n\nIf there are untested servers in the list (servers without either the\n\"speed\" or \"latency\" fields in their configuration), the router will\ntest them, and send the result back to the backend.  After testing is\ncompleted, the router will sort them, in order of fatest/lowest latency\nand then attempt to connect in that order.\n\nIf there are no servers to be tested, then they are attempted to be\nconnected in the order presented.\n\nIF the router has already established a VPN connection, AND the VPN\nserver connected is present in the list (regardless of whether it has\ntest data or not), then no reconnection will occur and it will not\ndisconnect or attempt to reconnect as a result of receiving this\nmessage.  It will simply reply with the [*VPN Connection Status*](#message-VPNStatus)\nMessage indicating the current server is connected.\n\nHowever, if the current VPN server connected IS NOT in the list, then\nthe connection will be dropped and the list will be processed as if\nthere was no connection to begin with.\n\nIF the server list is empty, and the VPN is connected, the Router will\nimmediately drop the connection and report the connection is down using\nthe [*VPN Connection Status*](#message-VPNStatus) message.\n\nThis message is sent when a client requests the VPN connection be\nestablished, OR the Router has requested a [*VPN Server Reconnect*](#message-VPNReconnect).\n\nBecause the router can ONLY rely on the credentials it was presented at\nthe time the vpn-connect message was received, if for any reason the VPN\ntunnel disconnects, the router can try to immediately reconnect to the\nsame tunnel with the same credentials.  If that fails, it can not use\nthe credentials presented for any other tunnel as they may have expired\nor have been assigned to a different client.  In that case, the router\ncan send a [*VPN Server Reconnect*](#message-VPNReconnect) message to the backend to be\nprovided with a fresh list of VPN servers and credentials with wish to\nre-establish VPN connection.  The backend will then reply with this\n[*VPN Server Connect*](#message-VPNConnect) message.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Connect to a listed VPN Server.",
                    "const": "vpn-connect",
                    "minLength": 11,
                    "maxLength": 11
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The request timestamp of the configuration."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "servers": {
                    "type": "array",
                    "description": "The message will contain a list of viable pre-selected servers.\n\nThe highest priority entires (and therefore the first listed) will be\nthose servers which require testing, in order of test priority.  There may be\nno servers of this type listed if there are no servers that REQUIRE\ntesting.\n\nFollowing this will be a list of servers in priority order.  When\nconnecting to the VPN, the router is to use this list and try to connect\nin the order presented.  IF the router is unable to establish a\nconnection after trying all servers, it gives up attempting to connect.",
                    "items": {
                      "type": "object",
                      "required": [
                        "vpn_id"
                      ],
                      "description": "The configuration for an individual VPN server.\n\n\nThe **vpn_id** is to be used to report about status and speedtest results\nfor the configured vpn tunnel.\n\n**speed** is the average speedtest TX result from the last months worth\nvpn speedtests on this server.  IF there is no **speed** field, the\nrouter is to create the **speed** value by connecting the tunnel and\nperforming the speedtest.  The resulting TX speed in bytes per second of\nthis one test becomes the **speed** for the purpose of selecting the\nfastest VPN Server.  Speed is selected as the TX value because most\nconsumer internet connections are asynchronous, but have higher raw TX\nspeed than RX, that means that any speedtest is more likely to max out\nRX than TX.\n\n**latency** is the average latency to the speedtest server from the last\nmonths worth of speedtest results on the server.  IF there is a missing\nlatency result (ie, the speedtest reported -1)  then the latency value\nfor the purpose of averaging is taken to be 1000ms which will force the\nlatency to dis-favor links with unreliable connections.  The average is\nrounded to the nearest whole millisecond.\n\n**speed and latency** will either both be present, or neither present.\nIf neither is present, the VPN tunnel is to be started and tested.\n\nThe array will be pre-sorted in order from backend identified fastest\nserver to slowest.  However, when the router must perform a speedtest to\ndetermine the vpn speed, it must resort.  The sorting algorithm works\nlike this:\n\n```\nPlace all servers in an unsorted list of servers.\nCreate a sorted list of servers which initally is empty.\n\nOf the servers in the list of unsorted servers, get the maximum speed\nvalue.\nOf the servers in the unsorted list whos speed is within 10% of the\nfastest speed in the list, remove the server with the lowest latency value\nand add it to the end of the list of sorted vpn servers.\nRepeat this selection process until there are no more servers in the\nunsorted server list.\n```\n\nThis algorithm will create a list of servers which trend from\nfastest/lowest latency down to slowest/highest latency.",
                      "properties": {
                        "vpn_id": {
                          "type": "string",
                          "description": "Unique VPN ID"
                        },
                        "speed": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Current rated bandwidth for the tunnel in bytes per second."
                        },
                        "latency": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Current rated latency for the tunnel in milliseconds."
                        },
                        "config": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "type",
                                "server",
                                "port",
                                "ipv4",
                                "ipv6",
                                "publickey",
                                "privatekey"
                              ],
                              "description": "The configuration for an individual wireguard server.",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "VPN Server Type",
                                  "const": "wireguard",
                                  "minLength": 9,
                                  "maxLength": 9
                                },
                                "server": {
                                  "type": "string",
                                  "format": "IP Address",
                                  "description": "Servers IP Address, may be IPv4 or IPv6",
                                  "minLength": 2,
                                  "maxLength": 39
                                },
                                "port": {
                                  "type": "string",
                                  "description": "Servers Port",
                                  "minLength": 1,
                                  "maxLength": 5
                                },
                                "ipv4": {
                                  "type": "string",
                                  "format": "IPv4 Address",
                                  "description": "Clients IPV4 Address through the tunnel.",
                                  "minLength": 7,
                                  "maxLength": 15
                                },
                                "ipv6": {
                                  "type": "string",
                                  "format": "IPv6 Address",
                                  "description": "Clients IPV6 Address through the tunnel.",
                                  "minLength": 2,
                                  "maxLength": 39
                                },
                                "publickey": {
                                  "type": "string",
                                  "description": "Public authentication key.",
                                  "minLength": 1
                                },
                                "privatekey": {
                                  "type": "string",
                                  "description": "Private authentication key.",
                                  "minLength": 1
                                }
                              },
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "required": [
                                "type",
                                "right",
                                "rightid",
                                "leftid",
                                "secret"
                              ],
                              "description": "The configuration for an individual strongswan server.",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "VPN Server Type",
                                  "const": "strongswan",
                                  "minLength": 10,
                                  "maxLength": 10
                                },
                                "right": {
                                  "type": "string",
                                  "format": "url",
                                  "description": "Servers IP Address, may be an IPv4 or IPv6 address or a Server URL"
                                },
                                "rightid": {
                                  "type": "string",
                                  "description": "Servers ID"
                                },
                                "rightsubnet": {
                                  "type": "string",
                                  "description": "The servers subnet"
                                },
                                "rightauth": {
                                  "type": "string",
                                  "description": "The servers authentication protocol"
                                },
                                "leftsourceip": {
                                  "type": "string",
                                  "description": "Clients Source IP"
                                },
                                "leftauth": {
                                  "type": "string",
                                  "description": "The authentication protocol"
                                },
                                "leftid": {
                                  "type": "string",
                                  "description": "Clients ID"
                                },
                                "secret": {
                                  "type": "string",
                                  "description": "Authentication Credential"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "minItems": 1
                  }
                },
                "example": {
                  "message": "vpn-connect",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "servers": [
                    {
                      "vpn_id": "wireguard-1",
                      "speed": 12345678,
                      "latency": 23,
                      "config": {
                        "type": "wireguard",
                        "server": "123.231.113.201",
                        "port": "1234",
                        "ipv4": "111.222.33.44",
                        "ipv6": "87aa:5abf:2e90:574d:9dcc:cd2:af7b:fdfa",
                        "publickey": "kjldfbghiuph",
                        "privatekey": "skjdfbgkjqerbgkj"
                      }
                    },
                    {
                      "vpn_id": "strongswan-1",
                      "speed": 12330000,
                      "latency": 27,
                      "config": {
                        "type": "strongswan",
                        "right": "123.231.113.201",
                        "rightid": "serverid",
                        "leftid": "client1",
                        "secret": "kjldfbghiuph"
                      }
                    }
                  ]
                },
                "required": [
                  "message",
                  "tstamp",
                  "servers"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Adapter Messages",
            "description": "Messages relating to the Adapter and its global state/configuration."
          }
        ]
      }
    },
    "ADAPTER_DIAGNOSTICS": {
      "description": "These are messages related to the diagnostic processes of the adapter.\n\nDiagnostics are performed as required by the adapter, and also as a result of\nexplicit command from the backend.\n\nIf the adapter requested a diagnostic check, the tstamp in the reply MUST match\nthe tstamp in the request.",
      "subscribe": {
        "summary": "Adapter Diagnostics",
        "description": "Diagnostic reports from the Adapter.",
        "message": {
          "oneOf": [
            {
              "name": "LogMsg",
              "title": "Log Message",
              "summary": "Log Message to Backend",
              "description": "This message causes the backend to log error and general diagnostic messages\nfrom the adapter to the system logs.  It can be sent anytime the adapter\nwishes to log a message.",
              "tags": [
                {
                  "name": "Adapter Diagnostics",
                  "description": "Adapter Diagnostic Messages."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Log Message to Backend",
                    "const": "log",
                    "minLength": 3,
                    "maxLength": 3
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The time the log message was generated inside the adapter. (According to the\nadapters internal clock.)"
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "level": {
                    "type": "string",
                    "description": "The level of the log messages.",
                    "enum": [
                      "ERROR",
                      "WARNING",
                      "DEBUG"
                    ]
                  },
                  "log": {
                    "type": "string",
                    "description": "The message to be logged by the Adapter.",
                    "minLength": 1
                  }
                },
                "example": {
                  "message": "log",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "level": "ERROR",
                  "log": "An Error ocurred inside the Adapter"
                },
                "required": [
                  "message",
                  "tstamp",
                  "level",
                  "log"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Adapter Diagnostics",
            "description": "Adapter Diagnostic Messages."
          }
        ]
      }
    },
    "SPEEDTEST": {
      "description": "These are messages related to the diagnostic processes of the adapter.\n\nDiagnostics are performed as required by the adapter, and also as a result of\nexplicit command from the backend.\n\nIf the adapter requested a diagnostic check, the tstamp in the reply MUST match\nthe tstamp in the request.",
      "subscribe": {
        "summary": "Speed Test",
        "description": "Speedtest Reports from the Adapter.",
        "message": {
          "oneOf": [
            {
              "name": "SpeedTest",
              "title": "Speed Test",
              "summary": "Report of Speed Test Results",
              "description": "This message causes the latest speedtest result to be logged for the\nAdapter in the backend.",
              "tags": [
                {
                  "name": "Adapter Diagnostics",
                  "description": "Adapter Diagnostic Messages."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Report of Speed Test Results",
                    "const": "speedtest",
                    "minLength": 9,
                    "maxLength": 9
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "IF the speedtest was performed as a result of a automatic or scheduled test\nthe timestamp is the time the speed test started on the adapter.\n\nIF the speedtest was conducted as a result of a command from the backend,\nthe tstamp is the tstamp from the backend request to commence the speedtest."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "address": {
                    "type": "string",
                    "format": "IP Address",
                    "description": "The IP of the website the speedtest was conducted against.",
                    "minLength": 2,
                    "maxLength": 39
                  },
                  "ipv4": {
                    "type": "string",
                    "format": "IPv4 Address",
                    "description": "The Connections Internet IPv4 Address",
                    "minLength": 7,
                    "maxLength": 15
                  },
                  "ipv6": {
                    "type": "string",
                    "format": "IPv6 Address",
                    "description": "The Connections Internet IPv6 Address",
                    "minLength": 2,
                    "maxLength": 39
                  },
                  "vpn": {
                    "type": "string",
                    "format": "url",
                    "description": "IF and ONLY IF this speedtest is through the VPN Tunnel, the VPN ID of the\nVPN Server tested will be returned in the vpn field.  The backend will\nassume the speedtest result is for a WAN if this field is missing,\ntherefore it is optional and must only be included in VPN Speedtest\nresults. See [*VPN Server Connect*](#message-VPNConnect)."
                  },
                  "tx": {
                    "type": "object",
                    "required": [
                      "txfr",
                      "ms"
                    ],
                    "description": "The result of the speedtest in the specified direction.",
                    "properties": {
                      "txfr": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The total number of bytes transferred."
                      },
                      "ms": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The total number of milliseconds the transfer took."
                      }
                    },
                    "additionalProperties": false
                  },
                  "rx": {
                    "type": "object",
                    "required": [
                      "txfr",
                      "ms"
                    ],
                    "description": "The result of the speedtest in the specified direction.",
                    "properties": {
                      "txfr": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The total number of bytes transferred."
                      },
                      "ms": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The total number of milliseconds the transfer took."
                      }
                    },
                    "additionalProperties": false
                  },
                  "latency": {
                    "type": "array",
                    "description": "Results of latency test on speedtest server, for a minimum of 10 tests.",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Ping latency in ms, -1 for no reply."
                    },
                    "minItems": 10
                  }
                },
                "example": {
                  "message": "speedtest",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "ip": "107.180.77.130",
                  "ipv4": "183.89.198.67",
                  "rx": {
                    "txfr": 445173760,
                    "ms": 30382
                  },
                  "tx": {
                    "txfr": 11636736,
                    "ms": 30222
                  },
                  "latency": [
                    25,
                    22,
                    27,
                    -1,
                    19,
                    -1,
                    26,
                    27,
                    25,
                    25
                  ]
                },
                "required": [
                  "message",
                  "tstamp",
                  "address",
                  "ipv4",
                  "rx",
                  "tx",
                  "latency"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Adapter Diagnostics",
            "description": "Adapter Diagnostic Messages."
          }
        ]
      },
      "publish": {
        "summary": "Speed Test",
        "description": "Commands to instigate speedtest checks.",
        "message": {
          "oneOf": [
            {
              "name": "RunSpeedTest",
              "title": "Run Speed Test",
              "summary": "Run a Speed Test and Report the Results",
              "description": "This message causes the adapter that receives it to perfrom ping and speedtests\nand return the results in a \"speedtest\" message.",
              "tags": [
                {
                  "name": "Adapter Diagnostics",
                  "description": "Adapter Diagnostic Messages."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Run a Speed Test and Report the Results",
                    "const": "run-speedtest",
                    "minLength": 13,
                    "maxLength": 13
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The request timestamp of the speedtest, this tstamp must be returned\nin the reply with the results as the message tstamp."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "connection": {
                    "type": "string",
                    "description": "The connection to test.\n\n* **WAN** is the native WAN Interface of the Adapter.\n* **VPN** is the through the VPN tunnel.",
                    "enum": [
                      "WAN",
                      "VPN"
                    ]
                  },
                  "ip": {
                    "type": "string",
                    "format": "url",
                    "description": "OPTIONAL, if present perform speedtest against the provided servers ip\naddress and not the one presented in configuration."
                  }
                },
                "example": {
                  "message": "run-speedtest",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "connection": "WAN",
                  "ip": "107.180.77.130"
                },
                "required": [
                  "message",
                  "tstamp",
                  "connection"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Adapter Diagnostics",
            "description": "Adapter Diagnostic Messages."
          }
        ]
      }
    },
    "DEVICE_DISCOVERY": {
      "description": "These are messages related to the discovery of new devices or changed\ndevices.",
      "subscribe": {
        "summary": "Device Discovery",
        "description": "Device Discovery messages.",
        "message": {
          "oneOf": [
            {
              "name": "DeviceInformation",
              "title": "Device Information",
              "summary": "Advise the Backend that the Device has been discovered or has changed.",
              "description": "This message is sent from the Adapter to the Backend whenever a new device\nis discovered, or if any of the data fields (excluding the online status)\nwithin this message about the device changes.  There is no difference between\na new device or updating a pre-existing device.  Devices are identified by their\nMAC address and MAC is assumed to be unique on a single adapter.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Advise the Backend that the Device has been discovered or has changed.",
                    "const": "device info",
                    "minLength": 11,
                    "maxLength": 11
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The time the device was discovered/changed."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "mac": {
                    "type": "string",
                    "format": "Mac EUI",
                    "description": "The Devices MAC address.  Assumed unique per adapter.  Eg. \"00:11:22:33:44:55\"\nAlso accepts \"001122334455\" or \"00-11-22-33-44-55\"",
                    "minLength": 1,
                    "maxLength": 17
                  },
                  "ipv4": {
                    "type": "string",
                    "format": "IPv4 Address",
                    "description": "The IPv4 Address assigned to this Device. Alternatively, if the device is using\na fixed IP and not one assigned by DHCP, the IP address it was discovered to be\nusing.",
                    "minLength": 7,
                    "maxLength": 15
                  },
                  "ipv6": {
                    "type": "string",
                    "format": "IPv6 Address",
                    "description": "**Optional:** The IPv6 Address assigned to this Device. Alternatively, if the\ndevice is using a fixed IPv6 and not one assigned by DHCP, the IP address it was\ndiscovered to be using.",
                    "minLength": 2,
                    "maxLength": 39
                  },
                  "online": {
                    "type": "boolean",
                    "description": "Current known Online state for the device.  This is the ONLY field whose change\nof value would not cause a new **\"device info\"** message to be sent.  If a\ndevice falls offline or comes back online, the **\"device state\"** message should\nbe sent."
                  },
                  "meta": {
                    "type": "object",
                    "required": [],
                    "description": "metadata discovered about the device.",
                    "properties": {
                      "dhcp": {
                        "type": "object",
                        "required": [
                          "hostname"
                        ],
                        "description": "DHCP Data discovered about the device.",
                        "properties": {
                          "hostname": {
                            "type": "string",
                            "description": "The Hostname the Device declared itself as.  IF the device did not declare\nitself with a hostname, the adapter should synthesize a hostname for it.\nThis hostname supplied to the backend should be the hostname only part\nand not include the network suffix. ie, if the device declared itself as\n\"MyPS5\" and the local lan suffix is \"lan\" the hostname sent should be\n\"MyPS5\".  This is Option 12 from the DHCP Request.",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "class": {
                            "type": "string",
                            "description": "**Optional.** The class of device discovered from DHCP.  Can be omitted from\nthe message if no class was provided by the device.  This is option 60\nfrom the DHCP Request."
                          },
                          "clientid": {
                            "type": "string",
                            "description": "**Optional.** The client id of device discovered from DHCP.  Can be omitted from\nthe message if no client id was provided by the device. This is option\n61 from the DHCP Request."
                          },
                          "parameters": {
                            "type": "string",
                            "description": "**Optional.** The Parameter list the client requested be returned to\nit's dhcp request.  This is option 55 from the DHCP Request."
                          }
                        }
                      },
                      "upnp": {
                        "type": "array",
                        "description": "**Optional.** IF a upnp xml device metadata can be retrieved from a device then\nit is to be sent in this sub field, otherwise it is omitted.  It is\npossible for a single physical device to report as multiple internal\nupnp devices.  Each discovered internal upnp device is reported in this array.",
                        "items": {
                          "type": "object",
                          "required": [
                            "deviceType"
                          ],
                          "description": "UPNP Device Description",
                          "properties": {
                            "deviceType": {
                              "type": "string",
                              "description": "The Device type reported by the UPNP Data of this internal device.\n*eg: urn:schemas-upnp-org:device:InternetGatewayDevice:1*"
                            },
                            "manufacturer": {
                              "type": "string",
                              "description": "The Device manufacturer reported by the UPNP Data of this internal device.\n*eg: Samsung*"
                            },
                            "modelName": {
                              "type": "string",
                              "description": "The Model Name reported by the UPNP Data of this internal device.\n*eg: QN82Q80RAFXZA*"
                            },
                            "friendlyName": {
                              "type": "string",
                              "description": "The Friendly Name reported by the UPNP Data of this internal device.\n*eg: 80\" 4k QLED Flatscreen TV*"
                            },
                            "serviceTypeList": {
                              "type": "array",
                              "description": "The List of service types reported by the UPNP Data of this internal\ndevice.\n*eg: [\"urn:schemas-upnp-org:service:Layer3Forwarding:1\"]*",
                              "items": {
                                "type": "string",
                                "description": "Individual Service Type Entry"
                              },
                              "minItems": 1
                            }
                          }
                        },
                        "minItems": 1
                      },
                      "snmp": {
                        "type": "object",
                        "required": [
                          "sysoid"
                        ],
                        "description": "**Optional.** If SNMP metadata can be obtained/probed for a device,\nit is sent in this field, otherwise it is omitted.",
                        "properties": {
                          "sysoid": {
                            "type": "string",
                            "description": "The System OID of the Device."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name the device reports via snmp."
                          },
                          "description": {
                            "type": "string",
                            "description": "The description the device reports via snmp."
                          },
                          "contact": {
                            "type": "string",
                            "description": "The contact the device reports via snmp."
                          },
                          "location": {
                            "type": "string",
                            "description": "The location the device reports via snmp."
                          }
                        }
                      },
                      "bonjour": {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "description": "**Optional.** If BONJOUR metadata can be obtained/probed for a device,\nit is sent in this field, otherwise it is omitted.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of a device discovered via Bonjour."
                          },
                          "services": {
                            "type": "array",
                            "description": "The list of services exposed via Bonjour.",
                            "items": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "description": "The list of services exposed via Bonjour.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of a service discovered on the device via Bonjour."
                                },
                                "txt": {
                                  "type": "array",
                                  "description": "The TXT record from Answers or Additional records.",
                                  "items": {
                                    "type": "string",
                                    "description": "The TXT record from Answers or Additional records."
                                  },
                                  "minItems": 1
                                }
                              }
                            },
                            "minItems": 1
                          }
                        }
                      },
                      "smb": {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "description": "**Optional.** If SMB/Netbios metadata can be obtained/probed for a device,\nit is sent in this field, otherwise it is omitted.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "If the SMB/Netbios reported Name of the device can be determined, it is\nsent in this field."
                          },
                          "domain": {
                            "type": "string",
                            "description": "If the SMB/Netbios reported Domain of the device can be determined, it is\nsent in this field."
                          }
                        }
                      },
                      "hua": {
                        "type": "array",
                        "description": "**Optional.** HTTP User Agents discovered for the device, otherwise\nit is omitted.",
                        "items": {
                          "type": "object",
                          "required": [
                            "userAgent"
                          ],
                          "description": "HTTP User Agent List",
                          "properties": {
                            "userAgent": {
                              "type": "string",
                              "description": "This is the host user agent sniffed from http traffic from the device.\nThis data can not be obtained from https, only http connections.  As\nthere may be more than one userAgent string detected, this is a list of\nthe detected useragents."
                            }
                          }
                        },
                        "minItems": 1
                      }
                    }
                  }
                },
                "example": {
                  "message": "device info",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "mac": "00:11:22:33:44:55",
                  "ipv4": "192.168.0.96",
                  "ipv6": "::ffff:c0a8:60",
                  "meta": {
                    "dhcp": {
                      "hostname": "MyPS5"
                    }
                  },
                  "online": true
                },
                "required": [
                  "message",
                  "tstamp",
                  "mac",
                  "ipv4",
                  "dhcp-hostname",
                  "online"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Device Messages",
            "description": "Messages relating to the devices connected to an Adapter and their state/configuration."
          }
        ]
      },
      "publish": {
        "summary": "Device Discovery",
        "description": "Device Discovery messages.",
        "message": {
          "oneOf": [
            {
              "name": "KnownDevices",
              "title": "Known Device Information",
              "summary": "Configures the Adapter with all devices known by the backend.",
              "description": "This message is sent by the Backend after initial adapter configuration\nupon successful connection of an adapter to the backend (after receipt\nof the [*Link Established*](#message-LinkEstablished)) message.  It tells the adapter all\ndevices known by the backend.  If a device is not in this list of\ndevices that the adapter knows about, and the device is currently\noffline, the device is deleted. If the device is Online, a new Device\nInfo for the device is queued to the backend to update the backends\nknowledge of all the connected devices.  IF any of the known device data\ndiffers to the data the adapter knows about the device, a new device\ninfo message is queued to update the backends knowledge of the device.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Configures the Adapter with all devices known by the backend.",
                    "const": "known devices",
                    "minLength": 13,
                    "maxLength": 13
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The time the device was discovered/changed."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "devices": {
                    "type": "array",
                    "description": "An array of all devices known by the backend for the adapter.",
                    "items": {
                      "type": "object",
                      "required": [
                        "mac",
                        "ipv4",
                        "dhcp-hostname",
                        "online"
                      ],
                      "description": "Device Info",
                      "properties": {
                        "mac": {
                          "type": "string",
                          "format": "Mac EUI",
                          "description": "The Devices MAC address.",
                          "minLength": 1,
                          "maxLength": 17
                        },
                        "ipv4": {
                          "type": "string",
                          "format": "IPv4 Address",
                          "description": "The IPv4 Address assigned to this Device.",
                          "minLength": 7,
                          "maxLength": 15
                        },
                        "ipv6": {
                          "type": "string",
                          "format": "IPv6 Address",
                          "description": "**Optional:** The IPv6 Address assigned to this Device.",
                          "minLength": 2,
                          "maxLength": 39
                        },
                        "user-hostname": {
                          "type": "string",
                          "description": "The Hostname to use for the device (overrides the devices self declared\nhostname *option 12 from the dhcp request*).",
                          "minLength": 1,
                          "maxLength": 255
                        },
                        "online": {
                          "type": "boolean",
                          "description": "The current Online state the backend believes is valid for the device.  IF it\nis not valid, a device info message is not sent to the backend to correct it,\nbut a \"Device State Changed\" message is."
                        },
                        "dhcp": {
                          "type": "boolean",
                          "description": "DHCP Metadata already recorded about the device.\nDefault to *false* if not present."
                        },
                        "upnp": {
                          "type": "boolean",
                          "description": "UPNP Metadata already recorded about the device.\nDefault to *false* if not present."
                        },
                        "snmp": {
                          "type": "boolean",
                          "description": "SNMP Metadata already recorded about the device.\nDefault to *false* if not present."
                        },
                        "bonjour": {
                          "type": "boolean",
                          "description": "BONJOUR Metadata already recorded about the device.\nDefault to *false* if not present."
                        },
                        "smb": {
                          "type": "boolean",
                          "description": "SMB/Netbios Metadata already recorded about the device.\nDefault to *false* if not present."
                        },
                        "hua": {
                          "type": "boolean",
                          "description": "HTTP User Agent Metadata already recorded about the device.\nDefault to *false* if not present."
                        }
                      }
                    },
                    "minItems": 1
                  }
                },
                "example": {
                  "message": "known devices",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "devices": [
                    {
                      "mac": "00:11:22:33:44:55",
                      "ipv4": "192.168.0.96",
                      "ipv6": "::ffff:c0a8:60",
                      "user-hostname": "PS5-Lounge",
                      "online": true,
                      "dhcp": true
                    },
                    {
                      "mac": "26:C7:71:4C:97:37",
                      "ipv4": "192.168.0.18",
                      "ipv6": "::ffff:c0a8:12",
                      "user-hostname": "OnkyoAmp",
                      "online": true,
                      "dhcp": true,
                      "upnp": true
                    }
                  ]
                },
                "required": [
                  "message",
                  "tstamp",
                  "mac",
                  "ipv4",
                  "online"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Device Messages",
            "description": "Messages relating to the devices connected to an Adapter and their state/configuration."
          }
        ]
      }
    },
    "DEVICE_CONFIGURATION": {
      "description": "These are messages related to the configuration of known devices.",
      "subscribe": {
        "summary": "Device Configuration",
        "description": "Device Configuration messages.",
        "message": {
          "oneOf": [
            {
              "name": "DeviceStateChanged",
              "title": "Device State Changed",
              "summary": "Advise the Adapter to change the state of the devices.",
              "description": "This message is sent from the Adapter to the Backend and either confirms\nthe adapters request to set state from the [*Change Device State*](#message-ChangeDeviceState)\nmessage, OR advises that the state changed asynchronously without being\nrequested by the backend.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Advise the Adapter to change the state of the devices.",
                    "const": "device state changed",
                    "minLength": 20,
                    "maxLength": 20
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "IF this is a reply to the backend setting the device state, this must equal the\ntstamp in the original request.\nIF this is an advice that a state changed asynchronously, this is the time the\nadapter changed/detected the state."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "devices": {
                    "type": "array",
                    "description": "An array of Device MAC addresses the state changes were applied to.  All\ndevices listed had the same state change made as listed in this message.",
                    "items": {
                      "type": "string",
                      "format": "Mac EUI",
                      "description": "The Devices MAC address.  Assumed unique per adapter.  Eg. \"00:11:22:33:44:55\"\nAlso accepts \"001122334455\" or \"00-11-22-33-44-55\"",
                      "minLength": 1,
                      "maxLength": 17
                    },
                    "minItems": 1
                  },
                  "states": {
                    "type": "array",
                    "description": "The array of services and states that change.  If this is a reply to the\nChange Device State command from the backend, then it lists the same states\nthat were requested by the backend.  If asynchronous state changes occur, the\nactual changes that ocurred are listed only.",
                    "items": {
                      "type": "object",
                      "required": [
                        "service",
                        "state"
                      ],
                      "description": "Service State",
                      "properties": {
                        "service": {
                          "type": "string",
                          "description": "The service/filter on the device which changed state.\n- **vpn** - The Device will route through the VPN when True (if VPN is enabled)\n- **ad-blocking** - Ad Blocking is Enabled on the device when True.\n- **device-protection** - Device Protection is Enabled on the device when True.\n- **internet-pause** - Internet is paused for the device when True.\n- **youtube-restricted** - Youtube returns restricted search results when True.\n- **safesearch** - Search Engines return \"safe\" results when True.\n- **adultcontent** - Adult Content is \"blocked\" when True.\n- **online** - If the device is online or not. Only an asynchronous\n      state change.\n\nNote: **internet-pause** also has a timed mode.  The boolean option in this\nmessage terminates any timed-pause current on the device and sets the state\naccordingly.\n**online** is only an asynchronous state change.  it is only ever sent as\n    a result of the adapter detecting a device coming online or falling offline.",
                          "enum": [
                            "vpn",
                            "ad-blocking",
                            "device-protection",
                            "internet-pause",
                            "youtube-restricted",
                            "safesearch",
                            "adultcontent",
                            "online"
                          ]
                        },
                        "state": {
                          "type": "boolean",
                          "description": "- **true** - The service/filter is enabled.\n- **false** - The service/filter is disabled."
                        },
                        "finishes": {
                          "type": "integer",
                          "format": "int64",
                          "description": "**OPTIONAL**, and **ONLY INCLUDED** when a timeout is supplied for the\nstate, this field in the reply specifies when the timed operation\nwill complete.  It is the Unix Epoch Date/Time as seconds since\nmidnight 1970 UTC."
                        }
                      },
                      "additionalProperties": false
                    },
                    "minItems": 1
                  }
                },
                "example": {
                  "message": "device state changed",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "devices": [
                    "53:CB:12:79:E5:F6",
                    "DD:0F:91:FE:9E:00",
                    "54:A4:33:F5:D8:A4"
                  ],
                  "states": [
                    {
                      "service": "ad-blocking",
                      "state": false
                    },
                    {
                      "service": "internet-pause",
                      "state": false
                    },
                    {
                      "service": "safe-search",
                      "state": true
                    }
                  ]
                },
                "required": [
                  "message",
                  "tstamp",
                  "devices",
                  "states"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "BedtimeSet",
              "title": "Device Bedtime Set",
              "summary": "Advise the Backend that the bedtime schedule has been set.",
              "description": "This message is sent from the Adapter to the Backend to acknowledge\nthat the listed devices bedtime schedule was set as required.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Advise the Backend that the bedtime schedule has been set.",
                    "const": "bedtime set",
                    "minLength": 11,
                    "maxLength": 11
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The tstamp, as received in the message which triggered this reply to\nbe sent."
                  },
                  "id": {
                    "type": "string",
                    "description": "ID Field.  The Adapter does not do any processing or verification\nof the ID field, it must be returned verbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "devices": {
                    "type": "array",
                    "description": "An array of Device MAC addresses the bedtime schedule applied to. All\ndevices listed had the same bedtime schedule applied to\nthem.  The list must have the same number of devices and same\ndevice mac addresses as the original request to set the schedule.",
                    "items": {
                      "type": "string",
                      "format": "Mac EUI",
                      "description": "The Devices MAC address.  Assumed unique per adapter.  Eg. \"00:11:22:33:44:55\"\nAlso accepts \"001122334455\" or \"00-11-22-33-44-55\"",
                      "minLength": 1,
                      "maxLength": 17
                    },
                    "minItems": 1
                  },
                  "schedule": {
                    "type": "array",
                    "description": "This is an array for a rotating weeks worth of bedtime schedules.\nThe first element is Monday, the second Tuesday, Wednesday and so on\ntill Sunday.  There will ALWAYS be 7 days present if a schedule is set.\n\nIF no schedule is to be set for the specified devices, the schedule\nfield will be present, and will be set to null.  This means that no\nschedule is to apply to the listed devices.\n\nIF any single day does not have a bed time, but other days do, then both\nthe \"start\" and \"end\" will be set to 0 (zero).",
                    "items": {
                      "type": "object",
                      "required": [
                        "start",
                        "end"
                      ],
                      "description": "Bedtime Schedule",
                      "properties": {
                        "start": {
                          "type": "integer",
                          "format": "int16",
                          "description": "This is the time bedtime starts on the specificed day.\n\nThis time is minutes since midnight of the specified day.\n\nIF bedtime starts after the subsequent midnight of the specified day,\nthen this time will be greater than 1,440.\n\nAssuming the specified day is Monday. Example Start Times:\n * 600 = 10am Monday Morning.\n * 1,260 = 9pm Monday Night.\n * 1,350 = 10:30pm Monday Night.\n * 1,530 = 1:30am Tuesday Morning."
                        },
                        "end": {
                          "type": "integer",
                          "format": "int16",
                          "description": "This is the time bedtime ends on the specificed day.\n\nThis time is minutes since midnight of the specified day.\n\nBedtime typically always ends after the subsequent midnight of the\nspecified day, so typically this time will be greater than 1,440.\n\nstart is always < end.  If it is not the schedule is in error and should\nbe rejected.\n\nAssuming the specified day is Monday. Example End Times:\n * 1,800 = 6am Tuesday Morning."
                        }
                      },
                      "additionalProperties": false
                    },
                    "minItems": 7,
                    "maxItems": 7
                  }
                },
                "example": {
                  "message": "bedtime set",
                  "tstamp": 1592217870123,
                  "id": "ODU2NDc1ODAtNjhlYy00NGRhLThiYzgtM2U3YjhjZjdiMGU2",
                  "devices": [
                    "53:CB:12:79:E5:F6",
                    "DD:0F:91:FE:9E:00",
                    "54:A4:33:F5:D8:A4"
                  ],
                  "schedule": [
                    {
                      "start": 1260,
                      "end": 1800
                    },
                    {
                      "start": 1260,
                      "end": 1800
                    },
                    {
                      "start": 1260,
                      "end": 1800
                    },
                    {
                      "start": 1260,
                      "end": 1800
                    },
                    {
                      "start": 1350,
                      "end": 1800
                    },
                    {
                      "start": 1350,
                      "end": 1800
                    },
                    {
                      "start": 1260,
                      "end": 1800
                    }
                  ]
                },
                "required": [
                  "message",
                  "tstamp",
                  "id",
                  "devices",
                  "schedule"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "BedtimeDelayed",
              "title": "Bedtime Delayed",
              "summary": "Advise the Adapter that Bedtime has been Delayed for the listed devices.",
              "description": "This message advises that a bedtime delay has been applied to the\ndevices, and the absolute UTC time when the delay will complete.  It\nis sent in response to a [*Set Bedtime*](#message-SetBedtime) message from the backend.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Advise the Adapter that Bedtime has been Delayed for the listed devices.",
                    "const": "bedtime delayed",
                    "minLength": 15,
                    "maxLength": 15
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The time the backend decided to set the bedtime delay.  To be returned in the\npaired reply."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "devices": {
                    "type": "array",
                    "description": "An array of Device MAC addresses the bedtime delay applies to. All\ndevices listed have had the same bedtime delay applied to\nthem.  Only after all listed devices have the bedtime delay\napplied does the adapter send the paired reply.",
                    "items": {
                      "type": "string",
                      "format": "Mac EUI",
                      "description": "The Devices MAC address.  Assumed unique per adapter.  Eg. \"00:11:22:33:44:55\"\nAlso accepts \"001122334455\" or \"00-11-22-33-44-55\"",
                      "minLength": 1,
                      "maxLength": 17
                    },
                    "minItems": 1
                  },
                  "delay": {
                    "type": "integer",
                    "format": "int16",
                    "description": "The number of minutes we are to delay bedtime for the listed devices\nfor.  A delay of zero terminates any currently running delay.  Delay\ntime is absolute, from the start of the next/current bedtime.  A\nsubsequent delay is NOT an additional delay, it replaces the current delay."
                  },
                  "ends": {
                    "type": "integer",
                    "format": "int64",
                    "description": "This is the absolute unix epoch time when the delay will finish on\nthe adapter for the listed devices."
                  }
                },
                "example": {
                  "message": "bedtime delayed",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "devices": [
                    "53:CB:12:79:E5:F6",
                    "DD:0F:91:FE:9E:00",
                    "54:A4:33:F5:D8:A4"
                  ],
                  "pause": 45,
                  "ends": 1594391720
                },
                "required": [
                  "message",
                  "tstamp",
                  "id",
                  "devices",
                  "delay",
                  "ends"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Device Messages",
            "description": "Messages relating to the devices connected to an Adapter and their state/configuration."
          }
        ]
      },
      "publish": {
        "summary": "Device Configuration",
        "description": "Device Configuration messages.",
        "message": {
          "oneOf": [
            {
              "name": "ChangeDeviceState",
              "title": "Change Device State",
              "summary": "Advise the Adapter to change the state of the devices.",
              "description": "This message is sent from the Backend to the adapter and instructs the adapter\nto make the listed state changes to the listed devices.  The message can\ncontain multiple state changes, and multiple devices.  The devices listed are\nall triggered with the same state changes.  The router will reply with a\n[*Device State Changed*](#message-DeviceStateChanged) reply.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Advise the Adapter to change the state of the devices.",
                    "const": "change device state",
                    "minLength": 19,
                    "maxLength": 19
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The time the backend decided the state should change.  To be returned in the\npaired reply."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "devices": {
                    "type": "array",
                    "description": "An array of Device MAC addresses the state changes are to be applied to.  All\ndevices listed are to have the same state change made as listed in this message.\nOnly after all devices states have been changed does the adapter send the paired\nreply.",
                    "items": {
                      "type": "string",
                      "format": "Mac EUI",
                      "description": "The Devices MAC address.  Assumed unique per adapter.  Eg. \"00:11:22:33:44:55\"\nAlso accepts \"001122334455\" or \"00-11-22-33-44-55\"",
                      "minLength": 1,
                      "maxLength": 17
                    },
                    "minItems": 1
                  },
                  "states": {
                    "type": "array",
                    "description": "The array of services and states to change.  If the service already has the\nrequested state on the device no change is made but the reply includes this\nstate.  If the service is not present in the states array, its state is not\nchanged, and its current state is NOT returned to the paired reply.",
                    "items": {
                      "type": "object",
                      "required": [
                        "service",
                        "state"
                      ],
                      "description": "Service State",
                      "properties": {
                        "service": {
                          "type": "string",
                          "description": "The service/filter on the device which we wish to change the state of.\n- **vpn** - The Device will route through the VPN when True (if VPN is enabled)\n- **ad-blocking** - Ad Blocking is Enabled on the device when True.\n- **device-protection** - Device Protection is Enabled on the device when True.\n- **internet-pause** - Internet is paused for the device when True.\n- **youtube-restricted** - Youtube returns restricted search results when True.\n- **safesearch** - Search Engines return \"safe\" results when True.\n- **adultcontent** - Adult Content is \"blocked\" when True.\n\n\nNote: **internet-pause** also has a timed mode.  The boolean option in this\nmessage terminates any timed-pause current on the device and sets the state\naccordingly.",
                          "enum": [
                            "vpn",
                            "ad-blocking",
                            "device-protection",
                            "internet-pause",
                            "youtube-restricted",
                            "safesearch",
                            "adultcontent",
                            "online"
                          ]
                        },
                        "state": {
                          "type": "boolean",
                          "description": "- **true** - The service/filter is enabled.\n- **false** - The service/filter is disabled."
                        },
                        "timeout": {
                          "type": "integer",
                          "format": "int64",
                          "description": "**OPTIONAL**, specifies a duration for the state to be set before it\nchanges to the opposite state.  It is specified as the number of\nseconds follwing the receipt and processing of this message.  IF\nthis message is present, the reply will have the \"finishes\" field\nset, which is the time NOW + this timeout, NOW is determined by the\ninternal clock of the adapter.\n\nNOTE: Currently this field will ONLY be sent if required for the\n**internet-pause** state."
                        }
                      },
                      "additionalProperties": false
                    },
                    "minItems": 1
                  }
                },
                "example": {
                  "message": "change device state",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "devices": [
                    "53:CB:12:79:E5:F6",
                    "DD:0F:91:FE:9E:00",
                    "54:A4:33:F5:D8:A4"
                  ],
                  "states": [
                    {
                      "service": "ad-blocking",
                      "state": false
                    },
                    {
                      "service": "internet-pause",
                      "state": false
                    },
                    {
                      "service": "safe-search",
                      "state": true
                    }
                  ]
                },
                "required": [
                  "message",
                  "tstamp",
                  "devices",
                  "states"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "SetBedtime",
              "title": "Set Device Bedtime",
              "summary": "Advise the Adapter to set the bedtime schedule for the listed devices.",
              "description": "This message is sent from the Backend to the adapter and instructs\nthe adapter to set the listed bedtime schedule for the listed\ndevices.  The devices listed are all set to the same bedtime\nschedule.  The Adapter will receive multiple \"set bedtime\" messages\nto set the schedules of all known devices.  If the Adapter knows a\ndevice, but has not received a bedtime schedule for it, it must\nassume there is no bedtime schedule that applies to it.  The full\nset of bedtime schedules are sent during initial configuration, in\nresponse to the backend receiving the [*Link Established*](#message-LinkEstablished)\nmessage. It is also sent as required to reflect configuration changes\nas they occur.  Once set, the backend replies with the\n[*Bedtime Set*](#message-BedtimeSet) message, with the tstamp and id (if present)\nmatching those same fields in this request.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Advise the Adapter to set the bedtime schedule for the listed devices.",
                    "const": "set bedtime",
                    "minLength": 11,
                    "maxLength": 11
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The time the backend decided to set the bedtime schedule.  To be returned in the\npaired reply."
                  },
                  "id": {
                    "type": "string",
                    "description": "ID Field.  The Adapter does not do any processing or verification\nof the ID field, it must be returned verbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "devices": {
                    "type": "array",
                    "description": "An array of Device MAC addresses the bedtime schedule applies to. All\ndevices listed are to have the same bedtime schedule applied to\nthem.  Only after all listed devices have the bedtime schedule\napplied does the adapter send the paired reply.",
                    "items": {
                      "type": "string",
                      "format": "Mac EUI",
                      "description": "The Devices MAC address.  Assumed unique per adapter.  Eg. \"00:11:22:33:44:55\"\nAlso accepts \"001122334455\" or \"00-11-22-33-44-55\"",
                      "minLength": 1,
                      "maxLength": 17
                    },
                    "minItems": 1
                  },
                  "schedule": {
                    "type": "array",
                    "description": "This is an array for a rotating weeks worth of bedtime schedules.\nThe first element is Monday, the second Tuesday, Wednesday and so on\ntill Sunday.  There will ALWAYS be 7 days present if a schedule is set.\n\nIF no schedule is to be set for the specified devices, the schedule\nfield will be present, and will be set to null.  This means that no\nschedule is to apply to the listed devices.\n\nIF any single day does not have a bed time, but other days do, then both\nthe \"start\" and \"end\" will be set to 0 (zero).",
                    "items": {
                      "type": "object",
                      "required": [
                        "start",
                        "end"
                      ],
                      "description": "Bedtime Schedule",
                      "properties": {
                        "start": {
                          "type": "integer",
                          "format": "int16",
                          "description": "This is the time bedtime starts on the specificed day.\n\nThis time is minutes since midnight of the specified day.\n\nIF bedtime starts after the subsequent midnight of the specified day,\nthen this time will be greater than 1,440.\n\nAssuming the specified day is Monday. Example Start Times:\n * 600 = 10am Monday Morning.\n * 1,260 = 9pm Monday Night.\n * 1,350 = 10:30pm Monday Night.\n * 1,530 = 1:30am Tuesday Morning."
                        },
                        "end": {
                          "type": "integer",
                          "format": "int16",
                          "description": "This is the time bedtime ends on the specificed day.\n\nThis time is minutes since midnight of the specified day.\n\nBedtime typically always ends after the subsequent midnight of the\nspecified day, so typically this time will be greater than 1,440.\n\nstart is always < end.  If it is not the schedule is in error and should\nbe rejected.\n\nAssuming the specified day is Monday. Example End Times:\n * 1,800 = 6am Tuesday Morning."
                        }
                      },
                      "additionalProperties": false
                    },
                    "minItems": 7,
                    "maxItems": 7
                  }
                },
                "example": {
                  "message": "set bedtime",
                  "tstamp": 1592217870123,
                  "id": "ODU2NDc1ODAtNjhlYy00NGRhLThiYzgtM2U3YjhjZjdiMGU2",
                  "devices": [
                    "53:CB:12:79:E5:F6",
                    "DD:0F:91:FE:9E:00",
                    "54:A4:33:F5:D8:A4"
                  ],
                  "schedule": [
                    {
                      "start": 1260,
                      "end": 1800
                    },
                    {
                      "start": 1260,
                      "end": 1800
                    },
                    {
                      "start": 1260,
                      "end": 1800
                    },
                    {
                      "start": 1260,
                      "end": 1800
                    },
                    {
                      "start": 1350,
                      "end": 1800
                    },
                    {
                      "start": 1350,
                      "end": 1800
                    },
                    {
                      "start": 1260,
                      "end": 1800
                    }
                  ]
                },
                "required": [
                  "message",
                  "tstamp",
                  "id",
                  "devices",
                  "schedule"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "DelayBedtime",
              "title": "Delay Bedtime",
              "summary": "Advise the Router to delay the current or next bedtime start.",
              "description": "This message causes the adapter to delay the bedtime for the listed\ndevices by the specified number of minutes.  It is a one-shot delay\nand once expired is not repeated.\n\nIF bedtime has not yet commenced for the day, the delay applies to\nthe bedtime which is next to occur.  The delay then causes the start\nto delay by the specified number of minutes.\n\nIF the bedtime has started but not yet finished, the delay applies\nto the currently active bedtime, and will delay it from its start\ntime by the specified number of minutes.  So, for example, if\nstarted at 10pm and at 10:15pm a delay of 45 minutes was received,\nthe devices internet would unpause and would re-pause at 10:45.\nThis message is responded to with the [*Bedtime Delayed*](#message-BedtimeDelayed) message\nfrom the router.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Advise the Router to delay the current or next bedtime start.",
                    "const": "delay bedtime",
                    "minLength": 13,
                    "maxLength": 13
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The time the backend decided to set the bedtime delay.  To be returned in the\npaired reply."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "devices": {
                    "type": "array",
                    "description": "An array of Device MAC addresses the bedtime delay applies to. All\ndevices listed are to have the same bedtime delay applied to\nthem.  Only after all listed devices have the bedtime delay\napplied does the adapter send the paired reply.",
                    "items": {
                      "type": "string",
                      "format": "Mac EUI",
                      "description": "The Devices MAC address.  Assumed unique per adapter.  Eg. \"00:11:22:33:44:55\"\nAlso accepts \"001122334455\" or \"00-11-22-33-44-55\"",
                      "minLength": 1,
                      "maxLength": 17
                    },
                    "minItems": 1
                  },
                  "delay": {
                    "type": "integer",
                    "format": "int16",
                    "description": "The number of minutes we are to delay bedtime for the listed devices\nfor.  A delay of zero terminates any currently running delay.  Delay\ntime is absolute, from the start of the next/current bedtime.  A\nsubsequent delay is NOT an additional delay, it replaces the current delay."
                  }
                },
                "example": {
                  "message": "delay bedtime",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "devices": [
                    "53:CB:12:79:E5:F6",
                    "DD:0F:91:FE:9E:00",
                    "54:A4:33:F5:D8:A4"
                  ],
                  "pause": 45
                },
                "required": [
                  "message",
                  "tstamp",
                  "id",
                  "devices",
                  "delay"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Device Messages",
            "description": "Messages relating to the devices connected to an Adapter and their state/configuration."
          }
        ]
      }
    },
    "DATA_USAGE": {
      "description": "These are messages related to the periodic reporting of data usage.",
      "subscribe": {
        "summary": "Data Usage",
        "description": "Data Usage messages.",
        "message": {
          "oneOf": [
            {
              "name": "DataUsage",
              "title": "Data Usage",
              "summary": "Advise the Backend of the data usage for the hour.",
              "description": "This message is sent from the Adapter to the Backend every hour and is\nsynchronized to the top of each hour.  It reports the data usage for\nboth the Adapter as a whole, and each ACTIVE device within that hour.\n\nIn order to prevent spikes of data hitting the backend at the end of\nevery hour, this message should be delayed to be sent for a random\ninterval up to 10 minutes, after the end of each hour.  However, the\ntstamp field should reflect the hour that is being reported, and NOT the\ntime the message was actually sent.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                },
                {
                  "name": "Device Messages",
                  "description": "Messages relating to the devices connected to an Adapter and their state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Advise the Backend of the data usage for the hour.",
                    "const": "data usage",
                    "minLength": 10,
                    "maxLength": 10
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The time of the Adapter/Device Data Usage Report, this should be\nsynchronized to the top of each hour."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "tx": {
                    "type": "integer",
                    "format": "int64",
                    "description": "This is the total number of bytes sent by the Adapter to the internet in\nthe hour."
                  },
                  "rx": {
                    "type": "integer",
                    "format": "int64",
                    "description": "This is the total number of bytes received by the Adapter from the internet in\nthe hour."
                  },
                  "devices": {
                    "type": "array",
                    "description": "The list of all devices which were active during the hour and\ntransmitted or received data from the internet.  Devices which were\nonline, but only transmitted locally are NOT listed.  If there were no\nactive devices, this field is omitted.",
                    "items": {
                      "type": "object",
                      "required": [
                        "mac",
                        "tx",
                        "rx"
                      ],
                      "description": "The list of all devices which were active during the hour and\ntransmitted or received data from the internet.  Devices which were\nonline, but only transmitted locally are NOT listed.  If there were no\nactive devices, this field is omitted.",
                      "properties": {
                        "mac": {
                          "type": "string",
                          "format": "Mac EUI",
                          "description": "The mac address of the active device being reported.",
                          "minLength": 1,
                          "maxLength": 17
                        },
                        "tx": {
                          "type": "integer",
                          "format": "int64",
                          "description": "This is the total number of bytes sent by the Device to the internet in\nthe hour.  Data which was sent locally is not included, only data routed\nout to the public internet is included."
                        },
                        "rx": {
                          "type": "integer",
                          "format": "int64",
                          "description": "This is the total number of bytes received by the Device from the internet in\nthe hour.  Data which was received locally is not included, only data routed\nin from the public internet to the device is included."
                        }
                      },
                      "additionalProperties": false
                    },
                    "minItems": 1
                  }
                },
                "example": {
                  "message": "data usage",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "tx": 9876543,
                  "rx": 1234567,
                  "devices": [
                    {
                      "mac": "54:67:D5:97:97:F0",
                      "tx": 63472,
                      "rx": 23452
                    },
                    {
                      "mac": "70:9A:63:CA:31:FC",
                      "tx": 82453,
                      "rx": 89783
                    }
                  ]
                },
                "required": [
                  "message",
                  "tstamp",
                  "tx",
                  "rx"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Adapter Messages",
            "description": "Messages relating to the Adapter and its global state/configuration."
          },
          {
            "name": "Device Messages",
            "description": "Messages relating to the devices connected to an Adapter and their state/configuration."
          }
        ]
      }
    },
    "STREAMING": {
      "description": "These are messages related to the configuration of the streaming\nrelocation service.\n\nThese messages are sent on initial connection and also periodically as\nrequired to reflect user changes in the configuration.",
      "publish": {
        "summary": "Streaming Configuration",
        "description": "Commands to set the Streaming Configuration.",
        "message": {
          "oneOf": [
            {
              "name": "ConfigureStreaming",
              "title": "Configure Streaming",
              "summary": "Configure Router Streaming proxying.",
              "description": "This message causes the adapter to route all traffic in the specified\nwildcarded domains to the specified proxies.  And streaming service that\nis not configured for proxying is omitted from the message.  If there\nare no streaming services configured, the message will be sent with both\nthe domain and ip lists empty.\n\nIt will be sent initially following the router sending the\n[*Link Established*](#message-LinkEstablished) message to the backend.  And then periodically\nto track changes to streaming configuration as set by the client.",
              "tags": [
                {
                  "name": "Adapter Messages",
                  "description": "Messages relating to the Adapter and its global state/configuration."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Configure Router Streaming proxying.",
                    "const": "cfg-streaming",
                    "minLength": 13,
                    "maxLength": 13
                  },
                  "tstamp": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The request timestamp of the configuration, this tstamp must be returned\nin the reply with the results as the message tstamp."
                  },
                  "id": {
                    "type": "string",
                    "description": "**Optional**, ID Field.  The Adapter does not do any processing or\nverification of the ID field, if it is set, it must be returned\nverbatim in the paired reply.",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "domains": {
                    "type": "array",
                    "description": "Proxy domain url configuration.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "match",
                        "servers"
                      ],
                      "description": "The configuration for an individual proxy domain.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Domain Descriptive Name"
                        },
                        "match": {
                          "type": "object",
                          "required": [
                            "positive",
                            "negative"
                          ],
                          "description": "Regex domains to match against.",
                          "properties": {
                            "positive": {
                              "type": "array",
                              "description": "positive regex matches",
                              "items": {
                                "type": "string",
                                "format": "regex",
                                "description": "Individual positive regex url match"
                              },
                              "minItems": 1
                            },
                            "negative": {
                              "type": "array",
                              "description": "negative regex matches",
                              "items": {
                                "type": "string",
                                "format": "regex",
                                "description": "Individual negative regex url match"
                              },
                              "minItems": 1
                            }
                          },
                          "additionalProperties": false
                        },
                        "servers": {
                          "type": "array",
                          "description": "List of Proxy Server URLs",
                          "items": {
                            "type": "string",
                            "format": "url",
                            "description": "Individual Proxy URL"
                          },
                          "minItems": 1
                        }
                      },
                      "additionalProperties": false
                    },
                    "minItems": 0
                  },
                  "ip": {
                    "type": "array",
                    "description": "proxy ip address configuration.",
                    "items": {
                      "type": "object",
                      "required": [
                        "mask",
                        "addrs"
                      ],
                      "description": "The configuration for an individual proxy IP Address.",
                      "properties": {
                        "mask": {
                          "type": "string",
                          "format": "IP Address",
                          "description": "Net mask of the IP Address.",
                          "minLength": 2,
                          "maxLength": 39
                        },
                        "addrs": {
                          "type": "array",
                          "description": "List of Proxy Server IPs",
                          "items": {
                            "type": "string",
                            "format": "IP Address",
                            "description": "Individual Proxy IP",
                            "minLength": 2,
                            "maxLength": 39
                          },
                          "minItems": 1
                        }
                      },
                      "additionalProperties": false
                    },
                    "minItems": 0
                  }
                },
                "example": {
                  "message": "cfg-streaming",
                  "tstamp": 1592217870123,
                  "id": "eyJ0aGlzIjoiaXMiLCJhbiI6ImV4YW1wbGUiLCJpZCI6ZmllbGQifQ",
                  "domains": [],
                  "ip": []
                },
                "required": [
                  "message",
                  "tstamp",
                  "domains",
                  "ip"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Streaming Messages",
            "description": "Messages relating to streaming relocation."
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Message Formats",
      "description": "Generic Message Formats."
    },
    {
      "name": "AWS Errors",
      "description": "Errors Generated by AWS and sent to the adapter."
    },
    {
      "name": "Adapter Diagnostics",
      "description": "Adapter Diagnostic Messages."
    },
    {
      "name": "Adapter Messages",
      "description": "Messages relating to the Adapter and its global state/configuration."
    },
    {
      "name": "Device Messages",
      "description": "Messages relating to the devices connected to an Adapter and their state/configuration."
    },
    {
      "name": "Streaming Messages",
      "description": "Messages relating to streaming relocation."
    }
  ]
}
