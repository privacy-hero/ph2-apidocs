{
  "asyncapi": "2.0.0",
  "defaultContentType": "application/json",
  "info": {
    "title": "Privacy Hero 2 - Adapter <-> Backend Websocket API",
    "version": "0.0.3",
    "description": "# The API for Adapter to Backend communication.\n\n## Overview\n\nAll communication is carried out through a single websocket connection per\nadapter.  The Adapter connects and sends updates to state or requests for\nconfiguration as required, and is also triggered to perform operations or\nupdate its state asynchronously from the backend through the same connection.\n\nBoth directions of the connection use the same basic message format.\n\n## Operations\n\nThe API is broken down by operation, and message type/source.\n\n### Documentation Convertions:\n\n* **SUB** [Subscribe] messages are messages which are sent to the Backend from the\nAdapter.\n* **PUB** [Publish] messages are messages which are sent to the Adapter from the\nBackend.\n\nThe API does not have any inherent Publish/Subscribe semantics.  This is a\ndocumentation convention only.\n\nAll messages to/from the adapter have a common format, which are documented in the\n*Basic Message Forms*. set of operations."
  },
  "servers": {
    "development": {
      "url": "ws2-dev.privacyhero.com",
      "description": "Development server",
      "protocol": "wss",
      "security": [
        {
          "user-password": []
        }
      ]
    },
    "qa": {
      "url": "ws2-qa.privacyhero.com",
      "description": "QA Test server",
      "protocol": "wss",
      "security": [
        {
          "user-password": []
        }
      ]
    },
    "production": {
      "url": "wss://ws2.privacyhero.com",
      "description": "Production server",
      "protocol": "wss",
      "security": [
        {
          "user-password": []
        }
      ]
    }
  },
  "components": {
    "securitySchemes": {
      "user-password": {
        "type": "userPassword",
        "description": "The user password follows the form <Adapter MAC>:<Adapter Secret Hash>\n\n- **Adapter MAC** is the hardware Mac address of the Adapter and it must\n    be the same as the mac used to register the adapter in production.\n    The MAC has the format *00:11:22:33:44:55* or *001122334455* or\n    *00-11-22-33-44-55* all of which are equivalent\n- **Adapter Secret Hash** is a Base64-URL encoded SHA256 hash of the\nunique id contained within the cpu or chips of the adapter.\n\nAn example user:password is (the binary secret is the string ***password*** ):\n\n*00:11:22:33:44:55:XohImNooBHFR0OVvjcYpJ3NgPQ1qq73WKhHvch0VQtg*\n\nThe user/password is passed in the **Authorization** header of the http\nconnection which established the websocket."
      }
    }
  },
  "channels": {
    "COMMON": {
      "description": "The common channel is not an actual channel.  It defines the basic message\nstructure upon which all other messages are based.",
      "subscribe": {
        "summary": "Basic Message Forms",
        "description": "All messages are sent by each end of the websocket as required.  These message\nformats are equally valid for transmission from the adapter [SUB] as well as\ntransmission by the back end [PUB].\n\nThere is no strict Subscribe/Publish semantic it is documentation convention\nONLY. The websocket acts as two unidirectional message pipes and Sub/Pub\nmessages are formatted, sent, received and treated identically and without\ndistinction.",
        "message": {
          "oneOf": [
            {
              "name": "BaseMsg",
              "title": "Base Message",
              "summary": "Standard Message Base Format",
              "description": "All Privacy Hero 2 system messages have the following standard form.",
              "tags": [
                {
                  "name": "Message Formats",
                  "description": "Generic Message Formats"
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "This is the name of the message.  The operation that is to be performed\nand the further fields contained within the message can be identified\nbased solely on this message type string."
                  },
                  "tstamp": {
                    "type": "int",
                    "format": "int64",
                    "description": "Every adapter/backend generated message contains a unique **tstamp**\nfield.  This field defines both the time of a particular event having\nocurred, and the pairing of messages in the case of events which are\ntriggered as a result of commands from the backend.\n\nAn Adapter will always return the tstamp of any message it is\nreplying to.  IF the Adapter is generating an event asynchronously\nand not as a result of a direct comment, the tstamp contains the time\nof the event as generated by the adapter.\n\nThe Field is an integer and is the number of **milliseconds** since\nmidnight 1970, UTC.  Otherwise known as the Unix Epoch."
                  }
                },
                "example": {
                  "message": "example",
                  "tstamp": 1592217870123
                },
                "required": [
                  "message"
                ]
              }
            },
            {
              "name": "MultiMsg",
              "title": "Multi Message",
              "summary": "Multiple Message Packet",
              "description": "All Privacy Hero 2 system messages may be bundled into a single multi-message.\nThe multi message is a standard message, which hold an array of individual\nmessages.  The individual messages when received will be treated as if they\nwere received sequentially and independently in the order they are listed.\n\nThe purpose of a Multi-Message is to cluster message processing for efficiency.",
              "tags": [
                {
                  "name": "Message Formats",
                  "description": "Generic Message Formats"
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Multiple Message Packet.",
                    "const": "multi"
                  },
                  "tstamp": {
                    "type": "int",
                    "format": "int64",
                    "description": "The time the message was generated, unrelated to the bundled messages\ntimestamps."
                  },
                  "msgs": {
                    "type": "array",
                    "description": "An array of complete and individual messages as defined elsewhere in\nthis specification.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "This is the name of the message.  The operation that is to be performed\nand the further fields contained within the message can be identified\nbased solely on this message type string."
                        },
                        "tstamp": {
                          "type": "int",
                          "format": "int64",
                          "description": "Every adapter/backend generated message contains a unique **tstamp**\nfield.  This field defines both the time of a particular event having\nocurred, and the pairing of messages in the case of events which are\ntriggered as a result of commands from the backend.\n\nAn Adapter will always return the tstamp of any message it is\nreplying to.  IF the Adapter is generating an event asynchronously\nand not as a result of a direct comment, the tstamp contains the time\nof the event as generated by the adapter.\n\nThe Field is an integer and is the number of **milliseconds** since\nmidnight 1970, UTC.  Otherwise known as the Unix Epoch."
                        }
                      },
                      "example": {
                        "message": "example",
                        "tstamp": 1592217870123
                      },
                      "required": [
                        "message"
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 32
                  }
                },
                "example": {
                  "message": "multi",
                  "tstamp": 1592217870123,
                  "msgs": []
                },
                "required": [
                  "message",
                  "tstamp",
                  "msgs"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Message Formats",
            "description": "Generic Message Formats"
          }
        ]
      },
      "publish": {
        "summary": "Basic Message Forms",
        "description": "All messages are sent by each end of the websocket as required.  These message\nformats are equally valid for transmission from the adapter [SUB] as well as\ntransmission by the back end [PUB].\n\nThere is no strict Subscribe/Publish semantic it is documentation convention\nONLY. The websocket acts as two unidirectional message pipes and Sub/Pub\nmessages are formatted, sent, received and treated identically and without\ndistinction.",
        "message": {
          "oneOf": [
            {
              "name": "BaseMsg",
              "title": "Base Message",
              "summary": "Standard Message Base Format",
              "description": "All Privacy Hero 2 system messages have the following standard form.",
              "tags": [
                {
                  "name": "Message Formats",
                  "description": "Generic Message Formats"
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "This is the name of the message.  The operation that is to be performed\nand the further fields contained within the message can be identified\nbased solely on this message type string."
                  },
                  "tstamp": {
                    "type": "int",
                    "format": "int64",
                    "description": "Every adapter/backend generated message contains a unique **tstamp**\nfield.  This field defines both the time of a particular event having\nocurred, and the pairing of messages in the case of events which are\ntriggered as a result of commands from the backend.\n\nAn Adapter will always return the tstamp of any message it is\nreplying to.  IF the Adapter is generating an event asynchronously\nand not as a result of a direct comment, the tstamp contains the time\nof the event as generated by the adapter.\n\nThe Field is an integer and is the number of **milliseconds** since\nmidnight 1970, UTC.  Otherwise known as the Unix Epoch."
                  }
                },
                "example": {
                  "message": "example",
                  "tstamp": 1592217870123
                },
                "required": [
                  "message"
                ]
              }
            },
            {
              "name": "MultiMsg",
              "title": "Multi Message",
              "summary": "Multiple Message Packet",
              "description": "All Privacy Hero 2 system messages may be bundled into a single multi-message.\nThe multi message is a standard message, which hold an array of individual\nmessages.  The individual messages when received will be treated as if they\nwere received sequentially and independently in the order they are listed.\n\nThe purpose of a Multi-Message is to cluster message processing for efficiency.",
              "tags": [
                {
                  "name": "Message Formats",
                  "description": "Generic Message Formats"
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Multiple Message Packet.",
                    "const": "multi"
                  },
                  "tstamp": {
                    "type": "int",
                    "format": "int64",
                    "description": "The time the message was generated, unrelated to the bundled messages\ntimestamps."
                  },
                  "msgs": {
                    "type": "array",
                    "description": "An array of complete and individual messages as defined elsewhere in\nthis specification.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "This is the name of the message.  The operation that is to be performed\nand the further fields contained within the message can be identified\nbased solely on this message type string."
                        },
                        "tstamp": {
                          "type": "int",
                          "format": "int64",
                          "description": "Every adapter/backend generated message contains a unique **tstamp**\nfield.  This field defines both the time of a particular event having\nocurred, and the pairing of messages in the case of events which are\ntriggered as a result of commands from the backend.\n\nAn Adapter will always return the tstamp of any message it is\nreplying to.  IF the Adapter is generating an event asynchronously\nand not as a result of a direct comment, the tstamp contains the time\nof the event as generated by the adapter.\n\nThe Field is an integer and is the number of **milliseconds** since\nmidnight 1970, UTC.  Otherwise known as the Unix Epoch."
                        }
                      },
                      "example": {
                        "message": "example",
                        "tstamp": 1592217870123
                      },
                      "required": [
                        "message"
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 32
                  }
                },
                "example": {
                  "message": "multi",
                  "tstamp": 1592217870123,
                  "msgs": []
                },
                "required": [
                  "message",
                  "tstamp",
                  "msgs"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "Message Formats",
            "description": "Generic Message Formats"
          }
        ]
      }
    },
    "AWS_ERRORS": {
      "description": "These are AWS Generated error messages from the backend to the adapter.\n\nThey are generated by the AWS infrastructure, and not the backend code.\n\nIF the adapter receives one, it should assume the link is fatally compromised\nand internally record the error.  It should then drop the websocket connection\nand attempt to reconnect to the backed.  After a successful reconnection, the\nerror should be logged to the AWS backend.",
      "publish": {
        "summary": "AWS Error Messages",
        "description": "AWS Error Message from the Backend to the Adapter.",
        "message": {
          "oneOf": [
            {
              "name": "AWSInternalServerError",
              "title": "AWS Internal Server Error",
              "summary": "AWS Internal Server Error",
              "description": "This message is generated directly by AWS, and does not contain a tstamp.\n\nThis messages indicates something fatal has ocurred in the server.  Upon\nreceipt, the adapter should record the fact it ocurred, and try and reconnect\nto the backend, if a successful reconnection occurs, the adapter should log\nthe internal server error to the backend, and then continue.",
              "tags": [
                {
                  "name": "AWS Errors",
                  "description": "Errors Generated by AWS and sent to the adapter."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "An internal server error, AWS Generated",
                    "const": "Internal server error"
                  },
                  "connectionId": {
                    "type": "string",
                    "description": "The AWS Websocket Connection ID."
                  },
                  "requestId": {
                    "type": "string",
                    "description": "The ID of the request which caused the error."
                  }
                },
                "example": {
                  "message": "Internal server error",
                  "connectionId": "d2Vic29ja2V0IElE",
                  "requestId": "cmVxdWVzdCBJRA"
                },
                "required": [
                  "message",
                  "connectionId",
                  "requestId"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "AWSServerError",
              "title": "AWS Server Error",
              "summary": "AWS Server Error",
              "description": "This message is generated directly by AWS, and does not contain a tstamp.\n\nThis messages indicates something fatal has ocurred in the server.  Upon\nreceipt, the adapter should record the fact it ocurred, and try and reconnect\nto the backend, if a successful reconnection occurs, the adapter should log\nthe internal server error to the backend, and then continue.",
              "tags": [
                {
                  "name": "AWS Errors",
                  "description": "Errors Generated by AWS and sent to the adapter."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "A general server error, AWS Generated",
                    "const": "Error"
                  },
                  "error": {
                    "type": "string",
                    "description": "The description of the Error."
                  }
                },
                "example": {
                  "message": "Error",
                  "error": "An error ocurred."
                },
                "required": [
                  "message",
                  "error"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "AWS Errors",
            "description": "Errors Generated by AWS and sent to the adapter."
          }
        ]
      }
    },
    "BACKEND": {
      "description": "This is the message channel from the backend to the adapter.  The backend will\ntypically contact the adapter in reply to a request from the adapter itself,\nor a request from the client interacting with the backend.\n\nMost communication from the backend operates as a state machine.  The backend\nwill set a tstamp in a message and send the message to the adapter, once the\nadapter has executed the operation, it will reply with a state change that\nreflects the tstamp in the message which triggered it.",
      "publish": {
        "summary": "Backend Messages.",
        "description": "Message from the Backend to the Adapter.",
        "message": {
          "oneOf": [
            {
              "name": "AWSInternalServerError",
              "title": "AWS Internal Server Error",
              "summary": "AWS Internal Server Error",
              "description": "This message is generated directly by AWS, and does not contain a tstamp.\n\nThis messages indicates something fatal has ocurred in the server.  Upon\nreceipt, the adapter should record the fact it ocurred, and try and reconnect\nto the backend, if a successful reconnection occurs, the adapter should log\nthe internal server error to the backend, and then continue.",
              "tags": [
                {
                  "name": "AWS Errors",
                  "description": "Errors Generated by AWS and sent to the adapter."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "An internal server error, AWS Generated",
                    "const": "Internal server error"
                  },
                  "connectionId": {
                    "type": "string",
                    "description": "The AWS Websocket Connection ID."
                  },
                  "requestId": {
                    "type": "string",
                    "description": "The ID of the request which caused the error."
                  }
                },
                "example": {
                  "message": "Internal server error",
                  "connectionId": "d2Vic29ja2V0IElE",
                  "requestId": "cmVxdWVzdCBJRA"
                },
                "required": [
                  "message",
                  "connectionId",
                  "requestId"
                ],
                "additionalProperties": false
              }
            },
            {
              "name": "AWSServerError",
              "title": "AWS Server Error",
              "summary": "AWS Server Error",
              "description": "This message is generated directly by AWS, and does not contain a tstamp.\n\nThis messages indicates something fatal has ocurred in the server.  Upon\nreceipt, the adapter should record the fact it ocurred, and try and reconnect\nto the backend, if a successful reconnection occurs, the adapter should log\nthe internal server error to the backend, and then continue.",
              "tags": [
                {
                  "name": "AWS Errors",
                  "description": "Errors Generated by AWS and sent to the adapter."
                }
              ],
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "A general server error, AWS Generated",
                    "const": "Error"
                  },
                  "error": {
                    "type": "string",
                    "description": "The description of the Error."
                  }
                },
                "example": {
                  "message": "Error",
                  "error": "An error ocurred."
                },
                "required": [
                  "message",
                  "error"
                ],
                "additionalProperties": false
              }
            }
          ]
        },
        "tags": [
          {
            "name": "AWS Errors"
          },
          {
            "name": "mothership"
          }
        ]
      }
    },
    "ADAPTER": {
      "description": "The common channel defines the messages that are either templates of all other\nmessages or common to both the backend and the adapter channels.",
      "publish": {
        "summary": "Adapter Messages.",
        "description": "Message from the Adapter to the Backend.",
        "message": {
          "oneOf": [
            {
              "name": "BaseRouterMsg",
              "title": "Base Router Message",
              "summary": "Base Router Message Summary",
              "description": "Basic Message Template Description.",
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      }
    }
  },
  "tags": [
    {
      "name": "Message Formats",
      "description": "Generic Message Formats"
    },
    {
      "name": "AWS Errors",
      "description": "Errors Generated by AWS and sent to the adapter."
    }
  ]
}
