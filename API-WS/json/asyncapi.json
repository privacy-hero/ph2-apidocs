{
  "asyncapi": "2.0.0",
  "defaultContentType": "application/json",
  "info": {
    "title": "Privacy Hero 2 - Adapter <-> Backend Websocket API",
    "version": "0.0.3",
    "description": "The API for Adapter to Backend communication.\n\nAll communication is carried out through a single websocket connection per\nadapter.  The Adapter connects and sends updates to state as required, and is\nalso triggered to perform operations or update its state asynchronously from\nthe backend through the same connection.\n\nBoth directions of the connection use the same basic message format."
  },
  "servers": {
    "development": {
      "url": "ws2-dev.privacyhero.com",
      "description": "Development server",
      "protocol": "wss",
      "security": [
        {
          "user-password": []
        }
      ]
    },
    "qa": {
      "url": "ws2-qa.privacyhero.com",
      "description": "QA Test server",
      "protocol": "wss",
      "security": [
        {
          "user-password": []
        }
      ]
    },
    "production": {
      "url": "wss://ws2.privacyhero.com",
      "description": "Production server",
      "protocol": "wss",
      "security": [
        {
          "user-password": []
        }
      ]
    }
  },
  "components": {
    "securitySchemes": {
      "user-password": {
        "type": "userPassword",
        "description": "The user password follows the form <Adapter MAC>:<Adapter Secret Hash>\n\n- **Adapter MAC** is the hardware Mac address of the Adapter and it must\n    be the same as the mac used to register the adapter in production.\n    The MAC has the format *00:11:22:33:44:55* or *001122334455* or\n    *00-11-22-33-44-55* all of which are equivalent\n- **Adapter Secret Hash** is a Base64-URL encoded SHA256 hash of the\nunique id contained within the cpu or chips of the adapter.\n\nAn example user:password is (the binary secret is the string ***password*** ):\n\n*00:11:22:33:44:55:XohImNooBHFR0OVvjcYpJ3NgPQ1qq73WKhHvch0VQtg*\n\nThe user/password is passed in the **Authorization** header of the http\nconnection which established the websocket."
      }
    }
  },
  "channels": {
    "COMMON": {
      "description": "The common channel is not an actual channel.  It defines the basic message\nstructure upon which all other messages are based.",
      "publish": {
        "summary": "Basic Message Forms.",
        "description": "All messages are sent by each end of the websocket as required.\n\n*Subscribe/Sub* messages are requests for information which do not update state.\nThey do not establish an ongoing \"subscription\" to changes to said state, but\nsimply cause the information requested to be sent once.\n\n*Publish/Pub* messages are either synchronous replies to Subscribe messages, OR\nthey are operational messages which can effect state. (Such as turning on WiFi)\n\nThere is no strict Subscribe/Publish semantic it is documentation convention ONLY.\nThe websocket acts as two unidirectional message pipes and Sub/Pub messages are\nformatted, sent, received and treated identically and without distinction.",
        "message": {
          "oneOf": [
            {
              "name": "BaseMsg",
              "title": "Base Message",
              "summary": "Standard Message Base Format",
              "description": "All Privacy Hero 2 system messages have the following standard form.",
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "This is the name of the message.  The operation that is to be performed\nand the further fields contained within the message can be identified\nbased solely on this message type string."
                  },
                  "tstamp": {
                    "type": "int",
                    "format": "int64",
                    "description": "Every adapter/backend generated message contains a unique **tstamp**\nfield.  This field defines both the time of a particular event having\nocurred, and the pairing of messages in the case of events which are\ntriggered as a result of commands from the backend.\n\nA Adapter will always return the tstamp of any message it is\nreplying to.  IF the Adapter is generating an event asynchronously\nand not as a result of a direct comment, the tstamp contains the time\nof the event as generated by the adapter.\n\nThe Field is an integer and is the number of **milliseconds** since\nmidnight 1970, UTC.  Otherwise known as the Unix Epoch."
                  }
                },
                "example": {
                  "message": "example",
                  "tstamp": 1592217870123
                },
                "required": [
                  "message"
                ]
              }
            },
            {
              "name": "MultiMsg",
              "title": "Multi Message",
              "summary": "Multiple Message Packet",
              "description": "All Privacy Hero 2 system messages may be bundled into a single multi-message.\nThe multi message is a standard message, which hold an array of individual\nmessages.  The individual messages when received will be treated as if they\nwere received sequentially and independently in the order they are listed.\n\nThe purpose of a Multi-Message is to cluster message processing for efficiency.",
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Multiple Message Packet.",
                    "const": "multi"
                  },
                  "tstamp": {
                    "type": "int",
                    "format": "int64",
                    "description": "The time the message was generated, unrelated to the bundled messages\ntimestamps."
                  },
                  "msgs": {
                    "type": "array",
                    "description": "An array of complete and individual messages as defined elsewhere in\nthis specification.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "This is the name of the message.  The operation that is to be performed\nand the further fields contained within the message can be identified\nbased solely on this message type string."
                        },
                        "tstamp": {
                          "type": "int",
                          "format": "int64",
                          "description": "Every adapter/backend generated message contains a unique **tstamp**\nfield.  This field defines both the time of a particular event having\nocurred, and the pairing of messages in the case of events which are\ntriggered as a result of commands from the backend.\n\nA Adapter will always return the tstamp of any message it is\nreplying to.  IF the Adapter is generating an event asynchronously\nand not as a result of a direct comment, the tstamp contains the time\nof the event as generated by the adapter.\n\nThe Field is an integer and is the number of **milliseconds** since\nmidnight 1970, UTC.  Otherwise known as the Unix Epoch."
                        }
                      },
                      "example": {
                        "message": "example",
                        "tstamp": 1592217870123
                      },
                      "required": [
                        "message"
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 32
                  }
                },
                "example": {
                  "message": "multi",
                  "tstamp": 1592217870123,
                  "msgs": []
                },
                "required": [
                  "message",
                  "tstamp",
                  "msgs"
                ],
                "additionalProperties": false
              }
            }
          ]
        }
      }
    },
    "BACKEND": {
      "description": "The common channel defines the messages that are either templates of all other\nmessages or common to both the backend and the adapter channels.",
      "publish": {
        "summary": "Backend Messages.",
        "description": "Message from the Backend to the Adapter.",
        "message": {
          "oneOf": [
            {
              "name": "BaseRouterMsg",
              "title": "Base Router Message",
              "summary": "Base Router Message Summary",
              "description": "Basic Message Template Description.",
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "ADAPTER": {
      "description": "The common channel defines the messages that are either templates of all other\nmessages or common to both the backend and the adapter channels.",
      "publish": {
        "summary": "Adapter Messages.",
        "description": "Message from the Adapter to the Backend.",
        "message": {
          "oneOf": [
            {
              "name": "BaseRouterMsg",
              "title": "Base Router Message",
              "summary": "Base Router Message Summary",
              "description": "Basic Message Template Description.",
              "payload": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      }
    }
  }
}
