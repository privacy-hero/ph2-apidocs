{
  "openapi": "3.0.2",
  "info": {
    "title": "Privacy Hero 2 - Mothership API",
    "version": "0.1.8",
    "description": "The complete backend API for the Privacy Hero 2.\n\nThe backend server infrastructure is known as the *\"Mothership\"*\n\nThis API Documentation may be viewed at:\n  - [PrivacyHero2 API - Swagger UI](./index-swui.html)\n  - [PrivacyHero2 API - RapiDoc/PDF](./index-rapidoc.html)\n  - [Download API JSON](./API/PH2-API.oas3.json)\n\nThe Browser Extension API is maintained in a separate document and may be\nviewed at:\n  - [PrivacyHero2 Browser Extension API](./index-browser-extension.html)",
    "license": {
      "name": "Copyright Â© 2020 HelpOn Inc. All Rights Reserved",
      "url": "http://privacy-hero.github.io/ph2-apidocs/LICENSE.html"
    },
    "contact": {
      "name": "API Support (Steven Johnson)",
      "url": "http://www.example.com/support",
      "email": "sakurainds@gmail.com"
    }
  },
  "servers": [
    {
      "url": "https://api2.privacyhero.com",
      "description": "The API deployment URL."
    },
    {
      "url": "https://dev-api2.privacyhero.com",
      "description": "API2 Dev Endpoint"
    },
    {
      "url": "https://qa-api2.privacyhero.com",
      "description": "API2 QA Endpoint"
    },
    {
      "url": "https://{awsid}.execute-api.{region}.amazonaws.com/{stage}",
      "description": "Development URL",
      "variables": {
        "awsid": {
          "default": "rsf12bcyml",
          "description": "The ID for your dev AWS deployment"
        },
        "region": {
          "enum": [
            "us-east-1",
            "us-east-2"
          ],
          "default": "us-east-1",
          "description": "Deployment Regions"
        },
        "stage": {
          "enum": [
            "dev",
            "qa",
            "prod",
            "sj-dev",
            "np-dev",
            "remote-dev"
          ],
          "default": "dev",
          "description": "Deployment Stages"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "email-address": {
        "type": "string",
        "format": "email",
        "minLength": 6,
        "maxLength": 320,
        "pattern": "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\\\x01-\\\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])",
        "example": "example@email.com",
        "description": "An email address"
      },
      "url-callback": {
        "type": "string",
        "format": "URL",
        "minLength": 1,
        "maxLength": 2000,
        "nullable": true,
        "pattern": "^[\\w.-]+:\\/\\/[\\w.-]+(\\/[\\w.-]+)*$",
        "description": "A URL, including relative references.  Will accept http/https and\nrelative urls.",
        "example": "ph2app://absolute.url"
      },
      "Ack": {
        "type": "object",
        "required": [
          "msg"
        ],
        "additionalProperties": false,
        "properties": {
          "msg": {
            "type": "string",
            "format": "Text Message",
            "nullable": true,
            "minLength": 0,
            "maxLength": 1024,
            "pattern": "^([\\w\\W])*$",
            "example": "OK."
          }
        }
      },
      "Nack": {
        "type": "object",
        "required": [
          "error"
        ],
        "additionalProperties": false,
        "properties": {
          "error": {
            "type": "string",
            "format": "Text Message",
            "nullable": true,
            "minLength": 0,
            "maxLength": 1024,
            "pattern": "^([\\w\\W])*$",
            "example": "Unauthorized"
          }
        }
      },
      "GW_NegAuth": {
        "type": "object",
        "required": [
          "message"
        ],
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string",
            "format": "Text Message",
            "nullable": true,
            "minLength": 0,
            "maxLength": 1024,
            "pattern": "^([\\w\\W])*$",
            "example": "User is not authorized to access this resource"
          }
        }
      },
      "GW_InternalError": {
        "type": "object",
        "required": [
          "message"
        ],
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string",
            "format": "Text Message",
            "nullable": true,
            "minLength": 0,
            "maxLength": 1024,
            "pattern": "^([\\w\\W])*$",
            "example": null
          }
        }
      },
      "ph2-bearer-token": {
        "type": "string",
        "format": "JWT",
        "description": "Privacy Hero 2 API Bearer Token (Based on JWT)",
        "minLength": 64,
        "maxLength": 1024,
        "pattern": "^([A-Za-z0-9-_])+\\.([A-Za-z0-9-_])+(\\.[A-Za-z0-9-_]+)?$",
        "example": "AeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1MTYyMzkwMjJ9AB"
      },
      "epoch-timestamp": {
        "type": "integer",
        "format": "int64",
        "minimum": 1587732975,
        "maximum": 4743406575000,
        "nullable": true,
        "description": "A Time, expressed as seconds since Jan 01 1970. (UTC). **NULL** = unknown",
        "example": 1587732975
      },
      "password": {
        "type": "string",
        "format": "password",
        "minLength": 8,
        "maxLength": 64,
        "example": "my p455w0rd",
        "pattern": "^[ -~]*$"
      },
      "expchk": {
        "type": "boolean",
        "nullable": true,
        "default": false,
        "description": "**true**=Do not perform confirmation, just check if the token has not expired.<\\br>\n**null**/**false**=Perform confirmation normally."
      },
      "epoch-timestamp-nonull": {
        "type": "integer",
        "format": "int64",
        "minimum": 1587732975,
        "maximum": 4743406575000,
        "description": "A Time, expressed as seconds since Jan 01 1970. (UTC).",
        "example": 1587732975
      },
      "Authorized": {
        "type": "object",
        "description": "This response contains the clients credentials to use on subsequent API\ncalls relating to the client.  These credentials uniquely identify the\nclient and their account.\n\n  - **bearer**: The Client Authorization Bearer token required to be\n  sent in the **Authorization: Bearer** header of all API calls that are\n  called on behalf of the Client.\n  - **renew**: The Epoch Time, at which user access will expire with\n  this token. Renew before this time, for uninterrupted access.  Renewal\n  may occur up until **exp** time.\n  - **exp**: The Epoch Time, at which the token will completely expire\n  and may not be used for renewal.  After this time the user must\n  re-authenticate to get a new bearer token.\n  - **admin**: Present only when the logged in client is an admin user,\n  and set to True.  It is not present when Admin is logged in as a\n  client (impersonating the client).\n  - **impersonator**: Present only when this client is being\n  impersonated by an administrator. It is the email address of the admin\n  user performing the impersonation.  Note, in all other regards this\n  login is to be treated like a standard client login.",
        "required": [
          "bearer",
          "renew",
          "exp"
        ],
        "additionalProperties": false,
        "properties": {
          "bearer": {
            "$ref": "#/components/schemas/ph2-bearer-token"
          },
          "renew": {
            "$ref": "#/components/schemas/epoch-timestamp-nonull"
          },
          "exp": {
            "$ref": "#/components/schemas/epoch-timestamp-nonull"
          },
          "admin": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "**true**=The logged in user is an Admin user.\nIf not present, the client is a normal user.  This field is only\npresent and must be **true** IF the user is an Admin."
          },
          "impersonator": {
            "$ref": "#/components/schemas/email-address"
          }
        }
      },
      "NotExpired": {
        "type": "object",
        "description": "This response is sent if the request had expchk set to true, and the\ntoken expiry time has not yet passed.  The confirmation operation has\nnot been performed when this is returned, it is only an indication that\nit is likely to succeed and has not yet expired.\n\n  - **exp**: The Time the token expires.",
        "required": [
          "exp"
        ],
        "additionalProperties": false,
        "properties": {
          "exp": {
            "$ref": "#/components/schemas/epoch-timestamp-nonull"
          }
        }
      },
      "url": {
        "type": "string",
        "format": "URL",
        "minLength": 1,
        "maxLength": 2000,
        "nullable": true,
        "pattern": "^(?:(?:https:\\/\\/)|(?:\\./))?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$",
        "description": "A URL, including relative references.  Will only accept https or\nrelative urls.",
        "example": "./relative.url"
      },
      "uuid_optional": {
        "type": "string",
        "format": "UUID",
        "description": "Optional Unique Identifier, null = not set.",
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$",
        "example": "bbfbaba3-1839-4ea3-b6b7-673238b15361",
        "nullable": true,
        "default": null
      },
      "uuid": {
        "type": "string",
        "format": "UUID",
        "description": "Unique Identifier",
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$",
        "example": "cd73b915-89a4-4971-9d86-bce91786b12a"
      },
      "activation-code": {
        "type": "string",
        "pattern": "^....-....$",
        "minLength": 9,
        "maxLength": 9,
        "description": "Adapter/Router activation code. Note: pattern and length are\nplaceholders until the format is finalized.",
        "example": "????-????"
      },
      "mac": {
        "type": "string",
        "format": "EUI-48",
        "pattern": "^(([0-9a-fA-F]{2}-){5})|(([0-9a-fA-F]{2}-){5})([0-9a-fA-F]{2})$",
        "maxLength": 17,
        "minLength": 17,
        "description": "An EUI-48 formatted mac address.",
        "example": "00-00-5E-DF-98-EB"
      },
      "adapter-type": {
        "type": "string",
        "enum": [
          "Router-V1"
        ],
        "description": "The hardware type of the adapter/router."
      },
      "Adapter-Base": {
        "type": "object",
        "required": [
          "mac",
          "type",
          "desc"
        ],
        "additionalProperties": false,
        "properties": {
          "mac": {
            "$ref": "#/components/schemas/mac"
          },
          "type": {
            "$ref": "#/components/schemas/adapter-type"
          },
          "desc": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[\\S ]+$",
            "description": "A description of the hardware of the adapter/router.",
            "example": "Privacy Hero 2 - Router V1"
          }
        }
      },
      "Adapter-Unassociated": {
        "type": "object",
        "required": [
          "adapter",
          "since"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "adapter": {
            "$ref": "#/components/schemas/Adapter-Base"
          },
          "since": {
            "$ref": "#/components/schemas/epoch-timestamp"
          }
        }
      },
      "Adapter-Unassociated-Array": {
        "type": "array",
        "maxItems": 10,
        "items": {
          "$ref": "#/components/schemas/Adapter-Unassociated"
        }
      },
      "adapter-name": {
        "type": "string",
        "format": "text",
        "nullable": true,
        "description": "The name of an adapter.",
        "minLength": 0,
        "maxLength": 64,
        "pattern": "^[\\w\\d\\-\\. ()!]+$",
        "example": "Home Office Adapter"
      },
      "iana-timezone": {
        "type": "string",
        "format": "IANA Timezone",
        "description": "IANA Timezone name.",
        "minLength": 3,
        "maxLength": 44,
        "pattern": "^([A-Za-z-_]){1,14}\\/([A-Za-z-_]){1,14}(\\/([A-Za-z-_]){1,14})?$",
        "default": "Etc/UTC",
        "example": "America/Chicago"
      },
      "ip4": {
        "type": "string",
        "format": "IPv4 Address",
        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
        "minLength": 7,
        "maxLength": 15,
        "description": "An IP4 formatted IP Address",
        "example": "192.168.0.55"
      },
      "ip6": {
        "type": "string",
        "format": "IPv6 Address",
        "pattern": "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$",
        "minLength": 3,
        "maxLength": 45,
        "description": "An IP6 formatted IP Address",
        "example": "2001:db8:85a3::8a2e:370:7334"
      },
      "state": {
        "type": "object",
        "required": [
          "state",
          "since"
        ],
        "additionalProperties": false,
        "properties": {
          "state": {
            "type": "boolean",
            "nullable": true,
            "description": "**true**=Active, **false**=Inactive, **null**=Unknown"
          },
          "since": {
            "$ref": "#/components/schemas/epoch-timestamp"
          }
        },
        "description": "The current known value of the state, and the time that it changed."
      },
      "Adapter-Services": {
        "type": "object",
        "description": "The current state of the Adapter/Router services.",
        "additionalProperties": false,
        "required": [
          "online",
          "vpn",
          "adblocking",
          "malware",
          "upnp",
          "wps"
        ],
        "properties": {
          "online": {
            "$ref": "#/components/schemas/state"
          },
          "vpn": {
            "$ref": "#/components/schemas/state"
          },
          "adblocking": {
            "$ref": "#/components/schemas/state"
          },
          "malware": {
            "$ref": "#/components/schemas/state"
          },
          "upnp": {
            "$ref": "#/components/schemas/state"
          },
          "wps": {
            "$ref": "#/components/schemas/state"
          }
        }
      },
      "wifi-settings": {
        "type": "object",
        "description": "Settings for an individual wifi network",
        "required": [
          "enabled",
          "ssid",
          "key",
          "since"
        ],
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "is the wifi network enabled.",
            "default": true
          },
          "ssid": {
            "type": "string",
            "format": "ssid",
            "minLength": 1,
            "maxLength": 32,
            "pattern": "^[^!#;+\\]\\/\"\\t][^+\\]\\/\"\\t]{0,30}[^ !#;+\\]\\/\"\\t]$|^[^ !#;+\\]\\/\"\\t]$",
            "description": "The SSID of the wifi network",
            "default": "PrivacyHero2",
            "example": "PrivacyHero2"
          },
          "key": {
            "type": "string",
            "format": "WPA-PSK passphrase",
            "minLength": 8,
            "maxLength": 63,
            "pattern": "^[ -~]*$",
            "nullable": true,
            "default": "r4nd0m k3y",
            "example": "r4nd0m k3y",
            "description": "The WPA-PSK passphrase to secure the network. **null**=Open Wifi\nNetwork"
          },
          "since": {
            "$ref": "#/components/schemas/epoch-timestamp"
          }
        }
      },
      "datacap": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0,
        "maximum": 1073741824,
        "description": "Data Cap in MegaBytes (1048576 bytes) per month. 0 = no data cap"
      },
      "datacap-reset": {
        "type": "integer",
        "format": "uint8",
        "minimum": 1,
        "maximum": 31,
        "description": "Day of the month, which the datacap resets at the start of."
      },
      "datacaps": {
        "type": "object",
        "description": "A per-month Data Cap and billing cycle.",
        "required": [
          "cap",
          "day"
        ],
        "additionalProperties": false,
        "properties": {
          "cap": {
            "$ref": "#/components/schemas/datacap"
          },
          "day": {
            "$ref": "#/components/schemas/datacap-reset"
          }
        },
        "example": {
          "cap": 0,
          "day": 14
        }
      },
      "Adapter": {
        "type": "object",
        "required": [
          "id",
          "hw",
          "name",
          "location",
          "timezone",
          "ip",
          "registered",
          "services",
          "settings"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "hw": {
            "$ref": "#/components/schemas/Adapter-Base"
          },
          "name": {
            "$ref": "#/components/schemas/adapter-name"
          },
          "timezone": {
            "$ref": "#/components/schemas/iana-timezone"
          },
          "ip": {
            "type": "object",
            "required": [
              "lan",
              "wan",
              "vpn"
            ],
            "description": "The current or last known IP addresses of the adapter/router.",
            "additionalProperties": false,
            "properties": {
              "lan": {
                "type": "object",
                "required": [
                  "ip4"
                ],
                "description": "The Local network IP addresses.",
                "additionalProperties": false,
                "properties": {
                  "ip4": {
                    "$ref": "#/components/schemas/ip4"
                  },
                  "ip6": {
                    "$ref": "#/components/schemas/ip6"
                  }
                }
              },
              "wan": {
                "type": "object",
                "required": [
                  "ip4"
                ],
                "description": "The ISP Native IP addresses.",
                "additionalProperties": false,
                "properties": {
                  "ip4": {
                    "$ref": "#/components/schemas/ip4"
                  },
                  "ip6": {
                    "$ref": "#/components/schemas/ip6"
                  }
                },
                "example": {
                  "ip4": "183.89.52.15"
                }
              },
              "vpn": {
                "type": "object",
                "required": [
                  "ip4"
                ],
                "description": "The VPN endpoint IP addresses.",
                "additionalProperties": false,
                "properties": {
                  "ip4": {
                    "$ref": "#/components/schemas/ip4"
                  },
                  "ip6": {
                    "$ref": "#/components/schemas/ip6"
                  }
                },
                "example": {
                  "ip4": "177.11.22.13",
                  "ip6": "2001:4860:4860::8844"
                }
              }
            }
          },
          "registered": {
            "$ref": "#/components/schemas/epoch-timestamp"
          },
          "services": {
            "$ref": "#/components/schemas/Adapter-Services"
          },
          "settings": {
            "type": "object",
            "description": "Adapter/Router Configuration",
            "required": [
              "wifi",
              "datacap"
            ],
            "additionalProperties": false,
            "properties": {
              "wifi": {
                "$ref": "#/components/schemas/wifi-settings"
              },
              "datacap": {
                "$ref": "#/components/schemas/datacaps"
              }
            }
          }
        }
      },
      "Adapters": {
        "type": "array",
        "maxItems": 10,
        "description": "An Array of Adapter Records.",
        "items": {
          "$ref": "#/components/schemas/Adapter"
        }
      },
      "adapter-services": {
        "type": "string",
        "enum": [
          "vpn",
          "adblocking",
          "streamrelocation",
          "malware",
          "upnp",
          "wps"
        ],
        "example": "vpn",
        "description": "A service running on the adapter."
      },
      "adapter-state": {
        "type": "boolean",
        "nullable": true,
        "default": true,
        "description": "**true**=Enable the Service. **false**=Disable the Service.\n**null**=No Change"
      },
      "Adapter-Settings": {
        "type": "object",
        "additionalProperties": false,
        "description": "The response to setting an adapter service.\n- **state** The services current state.\n- **since** The time the current state became set on the Adapter.\n- **pending** The requested state becomes valid when its \"since\" value\nequals or exceeds the returned **pending** time stamp.",
        "required": [
          "state",
          "since",
          "pending"
        ],
        "properties": {
          "state": {
            "type": "boolean",
            "description": "The current state of the requested service."
          },
          "since": {
            "$ref": "#/components/schemas/epoch-timestamp-nonull"
          },
          "pending": {
            "$ref": "#/components/schemas/epoch-timestamp-nonull"
          }
        },
        "example": {
          "state": false,
          "since": 1589978803,
          "pending": 1590583603
        }
      },
      "wifi-settings-change": {
        "type": "object",
        "description": "Settings for an individual wifi network.\n\n- **id** Adapters id\n- **enabled** Is the wife enabled or not.\n- **ssid** Networks Wifi Name\n- **key** Networks password",
        "required": [
          "id",
          "enabled",
          "ssid",
          "key"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "enabled": {
            "type": "boolean",
            "description": "is the wifi network enabled.",
            "default": true
          },
          "ssid": {
            "type": "string",
            "format": "ssid",
            "minLength": 1,
            "maxLength": 32,
            "pattern": "^[^!#;+\\]\\/\"\\t][^+\\]\\/\"\\t]{0,30}[^ !#;+\\]\\/\"\\t]$|^[^ !#;+\\]\\/\"\\t]$",
            "description": "The SSID of the wifi network",
            "default": "PrivacyHero2",
            "example": "PrivacyHero2"
          },
          "key": {
            "type": "string",
            "format": "WPA-PSK passphrase",
            "minLength": 8,
            "maxLength": 63,
            "pattern": "^[ -~]*$",
            "nullable": true,
            "default": "r4nd0m k3y",
            "example": "r4nd0m k3y",
            "description": "The WPA-PSK passphrase to secure the network. **null**=Open Wifi\nNetwork"
          }
        }
      },
      "wifi-settings-change-queued": {
        "type": "object",
        "description": "Current Settings for an individual wifi network after a change was queued.\n\n- **enabled** Is the wifi enabled or not.\n- **ssid** Networks Wifi Name\n- **key** Networks password\n- **since** Timestamp of last change to the settings.\n- **pending** Current pending config state change timestamp.  When\n**since** equals or exceeds this value, the configuration has been\napplied.",
        "required": [
          "id",
          "enabled",
          "ssid",
          "key"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "enabled": {
            "type": "boolean",
            "description": "is the wifi network enabled.",
            "default": true
          },
          "ssid": {
            "type": "string",
            "format": "ssid",
            "minLength": 1,
            "maxLength": 32,
            "pattern": "^[^!#;+\\]\\/\"\\t][^+\\]\\/\"\\t]{0,30}[^ !#;+\\]\\/\"\\t]$|^[^ !#;+\\]\\/\"\\t]$",
            "description": "The SSID of the wifi network",
            "default": "PrivacyHero2",
            "example": "PrivacyHero2"
          },
          "key": {
            "type": "string",
            "format": "WPA-PSK passphrase",
            "minLength": 8,
            "maxLength": 63,
            "pattern": "^[ -~]*$",
            "nullable": true,
            "default": "r4nd0m k3y",
            "example": "r4nd0m k3y",
            "description": "The WPA-PSK passphrase to secure the network. **null**=Open Wifi\nNetwork"
          },
          "since": {
            "$ref": "#/components/schemas/epoch-timestamp"
          },
          "pending": {
            "$ref": "#/components/schemas/epoch-timestamp"
          }
        }
      },
      "health-days": {
        "type": "integer",
        "format": "int16",
        "minimum": 0,
        "maximum": 90,
        "default": 0,
        "example": 10,
        "description": "The number of days into the past to provide adapter health records for.\n1 is today, 90 is up to 90 days ago. 0 = The most recent result only\nfrom the WAN."
      },
      "latency-ms": {
        "type": "integer",
        "format": "uint16",
        "minimum": 0,
        "maximum": 65535,
        "nullable": true,
        "description": "Latency measured in milliseconds. **NULL** = Unknown."
      },
      "latency-percentage": {
        "type": "integer",
        "format": "uint16",
        "minimum": 0,
        "maximum": 10000,
        "nullable": true,
        "description": "Percentage of successful tests (*100). Eg. 9876 = 98.76%. **NULL** = Unknown."
      },
      "speed-bps": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0,
        "maximum": 4294967295,
        "nullable": true,
        "description": "Bits per second speed result. **NULL** = Unknown."
      },
      "health-results": {
        "type": "object",
        "description": "Health result Records.\n* **timestamp** - The timestamp of the time the test was conducted.\n* **location-server** - The location of the server the test was\nconducted against.\n* **provider** - The ISP or Network operator who manages the server.\n* **distance** - The estimated distance to the test server (in miles).  A\nNegative number is to be represented as < (less than) this value.  A\npositive number is an estimated distance.\n* **latency** - The average latency (ping time) to the test URL.\n* **latency-completion** - The percentage of latency checks which\ncompleted successfully. (whole number, 85 = 85%, 100=100%)\n* **speed-rx** - Bits per second result of the Receive speed test.\n* **speed-tx** - Bits per second result of the Transmit speed test.\n* **connection** - The internet connection the speed test was\ncompleted on.\n* **quality** - This is the system derived synthetic \"QUALITY\" of the\nlink, which is derived from historical records of the adapters health.\n  * HIGH - The Link meets or exceeds historical precedence.\n  * POOR - The Link is no meeting historical precedence, and normally\n  does better.\n  * LOW - The Link is very low quality, and/or has failed all together.",
        "additionalProperties": false,
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/epoch-timestamp"
          },
          "location-server": {
            "type": "string",
            "description": "The Location/Server the test was conducted against."
          },
          "provider": {
            "type": "string",
            "description": "The ISP/Network operator managing the server."
          },
          "distance": {
            "type": "integer",
            "description": "The estimated distance in miles between the client and\nthe test server.  The distance is expressed as \"Less than\" this\nvalue.  Eg, 50 = <50 miles."
          },
          "latency": {
            "$ref": "#/components/schemas/latency-ms"
          },
          "latency-completion": {
            "$ref": "#/components/schemas/latency-percentage"
          },
          "speed-rx": {
            "$ref": "#/components/schemas/speed-bps"
          },
          "speed-tx": {
            "$ref": "#/components/schemas/speed-bps"
          },
          "connection": {
            "type": "string",
            "enum": [
              "VPN",
              "WAN"
            ]
          },
          "quality": {
            "type": "string",
            "enum": [
              "HIGH",
              "POOR",
              "LOW"
            ]
          }
        }
      },
      "Adapter-Diags": {
        "type": "array",
        "maxItems": 1000,
        "description": "The diagnostic results of previous health checks.",
        "items": {
          "$ref": "#/components/schemas/health-results"
        }
      },
      "Adapter-Diag_Requested-Reply": {
        "type": "object",
        "additionalProperties": false,
        "description": "The response to requesting a diagnostic on the adapter.\n- **pending** The time which will be associated with the speed test\nresults for the requested test.  The test is complete when the results\nfor the last day contain this test timestamp.",
        "required": [
          "pending"
        ],
        "properties": {
          "pending": {
            "$ref": "#/components/schemas/epoch-timestamp-nonull"
          }
        },
        "example": {
          "pending": 1591887170
        }
      },
      "datausage-predictable": {
        "type": "integer",
        "format": "uint64",
        "minimum": -1000000000000000000,
        "maximum": 1000000000000000000,
        "description": "Data Usage in Bytes."
      },
      "Adapter-Usage-Record": {
        "type": "object",
        "description": "- **timestamp**: The start of the period.\n- **tx**: Number of bytes sent by the adapter in the period. (-ve value\nis predicted)\n- **rx**: Number of bytes received by the adapter in the period. (-ve value\nis predicted)",
        "required": [
          "timestamp",
          "tx",
          "rx"
        ],
        "additionalProperties": false,
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/epoch-timestamp-nonull"
          },
          "tx": {
            "$ref": "#/components/schemas/datausage-predictable"
          },
          "rx": {
            "$ref": "#/components/schemas/datausage-predictable"
          }
        }
      },
      "Adapter-Usage-History": {
        "type": "array",
        "description": "Holds up to 90 days worth of hourly data usage records for the device.\nThe resolution of the items (daily or hourly) depends on the api call.",
        "minItems": 1,
        "maxItems": 2160,
        "items": {
          "$ref": "#/components/schemas/Adapter-Usage-Record"
        }
      },
      "iso3166-country": {
        "type": "string",
        "format": "ISO3166 Code",
        "example": "US",
        "enum": [
          "AF",
          "AX",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AO",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "AZ",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BQ",
          "BA",
          "BW",
          "BV",
          "BR",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "CV",
          "KH",
          "CM",
          "CA",
          "KY",
          "CF",
          "TD",
          "CL",
          "CN",
          "CX",
          "CC",
          "CO",
          "KM",
          "CG",
          "CD",
          "CK",
          "CR",
          "CI",
          "HR",
          "CU",
          "CW",
          "CY",
          "CZ",
          "DK",
          "DJ",
          "DM",
          "DO",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "SZ",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GH",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "KP",
          "KR",
          "KW",
          "KG",
          "LA",
          "LV",
          "LB",
          "LS",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MO",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "ME",
          "MS",
          "MA",
          "MZ",
          "MM",
          "NA",
          "NR",
          "NP",
          "NL",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NG",
          "NU",
          "NF",
          "MK",
          "MP",
          "NO",
          "OM",
          "PK",
          "PW",
          "PS",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "BL",
          "SH",
          "KN",
          "LC",
          "MF",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "SN",
          "RS",
          "SC",
          "SL",
          "SG",
          "SX",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "GS",
          "SS",
          "ES",
          "LK",
          "SD",
          "SR",
          "SJ",
          "SE",
          "CH",
          "SY",
          "TW",
          "TJ",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TR",
          "TM",
          "TC",
          "TV",
          "UG",
          "UA",
          "AE",
          "GB",
          "US",
          "UM",
          "UY",
          "UZ",
          "VU",
          "VE",
          "VN",
          "VG",
          "VI",
          "WF",
          "EH",
          "YE",
          "ZM",
          "ZW"
        ],
        "description": "an ISO3166 country code"
      },
      "streams": {
        "type": "array",
        "maxItems": 1000,
        "description": "List of streaming services",
        "items": {
          "type": "object",
          "description": "Streaming Services",
          "required": [
            "id",
            "name",
            "countries",
            "portable"
          ],
          "additionalProperties": false,
          "properties": {
            "id": {
              "$ref": "#/components/schemas/uuid"
            },
            "name": {
              "type": "string",
              "minLength": 1,
              "maxLength": 64,
              "pattern": "^[\\S ]+$",
              "description": "Name of the streaming service",
              "example": "Netflix"
            },
            "icon": {
              "$ref": "#/components/schemas/url"
            },
            "portable": {
              "type": "boolean",
              "description": "Is the service subscription able to be used in multiple countries?",
              "default": true
            },
            "subscription": {
              "type": "string",
              "enum": [
                "free",
                "paid",
                "cable"
              ],
              "default": "paid",
              "description": "Defines if the service is free, requires a paid subscription or\ncomes bundled with a cable subscription.  Currently this field is\nunimplemented and is **OPTIONAL**.  The Front end should ignore it\nif it receives it.  This is defined here to allow for a future\nfeature upgrade that will use this field.  The front end\naccepting, but ignoring the field allows the backend to implement\nthe function prior to any necessary front end changes, and still\nallow the system to work unimpeded."
            },
            "countries": {
              "type": "object",
              "description": "List of all countries streaming service is available in.\n\n**proxy** countries may be used to proxy a stream to appear as if\nthe stream is being watched in that country.\n\n**non-proxy** are countries where the streaming service is\navailable but for which no proxy exists.  These can only be\nused if the Adapter is located in that country.",
              "additionalProperties": false,
              "properties": {
                "proxy": {
                  "type": "array",
                  "description": "List of countries which can be proxied.",
                  "maxItems": 256,
                  "items": {
                    "$ref": "#/components/schemas/iso3166-country"
                  }
                },
                "non-proxy": {
                  "type": "array",
                  "maxItems": 256,
                  "description": "List of countries which can not be proxied.",
                  "items": {
                    "$ref": "#/components/schemas/iso3166-country"
                  }
                }
              }
            }
          }
        }
      },
      "stream-settings": {
        "type": "object",
        "description": "**Streaming Services Settings**\n\nThe **subscription** field is OPTIONAL, it defines the country the\nclient holds their cubscription for.  It is not currently implemented in\nthe backend, but the front end can send it, and the backend will store\nit.  IF a **subscription** has been set for a stream, the value will be\nin the retrieval of the configuration, or the reply.  Otherwise it will\nbe omitted.",
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "country": {
            "$ref": "#/components/schemas/iso3166-country"
          },
          "subscription": {
            "$ref": "#/components/schemas/iso3166-country"
          },
          "since": {
            "$ref": "#/components/schemas/epoch-timestamp"
          }
        }
      },
      "streams-settings": {
        "type": "array",
        "maxItems": 1000,
        "description": "Settings for streaming services on an Adapter.",
        "items": {
          "$ref": "#/components/schemas/stream-settings"
        }
      },
      "stream-setting-queued": {
        "type": "object",
        "description": "Streaming Services Settings Queued for update",
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "adapter": {
            "$ref": "#/components/schemas/uuid"
          },
          "country": {
            "$ref": "#/components/schemas/iso3166-country"
          },
          "subscription": {
            "$ref": "#/components/schemas/iso3166-country"
          },
          "since": {
            "$ref": "#/components/schemas/epoch-timestamp"
          },
          "pending": {
            "$ref": "#/components/schemas/epoch-timestamp"
          }
        }
      },
      "profile-name": {
        "type": "string",
        "format": "text",
        "nullable": true,
        "description": "The name of the profile.",
        "minLength": 0,
        "maxLength": 64,
        "pattern": "^[\\w\\W]+$",
        "example": "Shared"
      },
      "time-of-day-mins": {
        "type": "integer",
        "format": "int16",
        "minimum": -1,
        "maximum": 1439,
        "default": -1,
        "description": "An absolute time of the day in minutes, where 0 = midnight.  The value\n-1 means no time of day is set."
      },
      "school-nights": {
        "type": "array",
        "minItems": 7,
        "maxItems": 7,
        "description": "This is a list of school nights for the week.  The first element is always\nMONDAY. The second is TUESDAY, and so on, until SUNDAY (the seventh\nitem).  This selects the nights when a \"school night\" bedtime schedule\nwill be used, or an \"other night\" schedule.",
        "items": {
          "type": "boolean"
        },
        "default": [
          true,
          true,
          true,
          true,
          false,
          false,
          true
        ],
        "example": [
          true,
          true,
          true,
          true,
          false,
          false,
          true
        ]
      },
      "Bedtimes": {
        "description": "The definition of bedtimes for a profile.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "If the bedtime function is enabled or not."
          },
          "school": {
            "$ref": "#/components/schemas/time-of-day-mins"
          },
          "other": {
            "$ref": "#/components/schemas/time-of-day-mins"
          },
          "school-nights": {
            "$ref": "#/components/schemas/school-nights"
          }
        }
      },
      "time-delay": {
        "type": "integer",
        "format": "int16",
        "minimum": -360,
        "maximum": 360,
        "default": 0,
        "description": "A time delay, where 0 = no delay. In Minutes. The delay may be +/- 6\nhours.  A negative delay will cause the bedtime to occur earlier and a\npositive delay later.",
        "example": -30
      },
      "ProfileSettings": {
        "description": "The settings for a profile.\n- **youtube-restricted**: If youtube is restricted or normal.\n- **safesearch**: If search engines are forced to return safe results.\n- **internet-pause**: Internet will be paused until this time passes. If\n  the value is -1, internet is paused indefinitely, if it is 0, internet\n  is unpaused.\n- **adult-block**: If adult content is blocked or not.\n- **bedtime**: A list of bedtimes, one for each day of a week.\n- **bedtime-delay**: A once off delay for the current days bedtime\nstart.  Note, this does not change bedtime end.  This will automatically\nbe reset back to zero when bedtime ends.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "youtube-restricted": {
            "type": "boolean",
            "default": false,
            "description": "If Youtube is restricted for all devices in this profile."
          },
          "safesearch": {
            "type": "boolean",
            "default": false,
            "description": "If search providers are forced to safe search."
          },
          "adult-block": {
            "type": "boolean",
            "default": false,
            "description": "If adult content is blocked or not."
          },
          "internet-pause": {
            "$ref": "#/components/schemas/epoch-timestamp"
          },
          "bedtime": {
            "$ref": "#/components/schemas/Bedtimes"
          },
          "bedtime-delay": {
            "$ref": "#/components/schemas/time-delay"
          }
        }
      },
      "Profile": {
        "description": "A device settings profile.  Profiles define common settings for all\nassociated devices.\n\n- **id**: The profiles unique id.\n- **adapter**: The unique id of the adapter the profile belongs to.\n- **name**: The descriptive name of the profile.\n- **icon**: An identifier for the icon.\n- **system**: Is this a system profile?  If so, can not be edited or\ndeleted.\n- **settings**: Current state of settings for the profile.\n- **since**: Latest update timestamp of the **settings**.  Note, updates\nto **name** and **icon** do NOT update **since**",
        "type": "object",
        "required": [
          "id",
          "adapter",
          "name",
          "since"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "adapter": {
            "$ref": "#/components/schemas/uuid"
          },
          "name": {
            "$ref": "#/components/schemas/profile-name"
          },
          "icon": {
            "$ref": "#/components/schemas/url"
          },
          "system": {
            "type": "boolean",
            "default": false,
            "description": "System profiles are fixed by the system.  They may not be modified,\nrenamed or deleted.  Devices may be freely associated with them."
          },
          "settings": {
            "$ref": "#/components/schemas/ProfileSettings"
          },
          "since": {
            "$ref": "#/components/schemas/epoch-timestamp"
          }
        }
      },
      "Profiles": {
        "description": "An array of known profiles",
        "type": "array",
        "minItems": 1,
        "maxItems": 100,
        "items": {
          "$ref": "#/components/schemas/Profile"
        }
      },
      "ProfileCfgPending": {
        "description": "A device settings profile.  Profiles define common settings for all\nassociated devices.\n\n- **id**: The profiles unique id.\n- **adapter**: The unique id of the adapter the profile belongs to.\n- **name**: The descriptive name of the profile.\n- **icon**: An identifier for the icon.\n- **system**: Is this a system profile?  If so, can not be edited or\ndeleted.\n- **settings**: Current state of settings for the profile.\n- **since**: Latest update timestamp of the **settings**.  Note, updates\nto **name** and **icon** do NOT update **since**\n- **pending**: The timestamp at (or after) which the requested cfg\nchange has been applied.",
        "type": "object",
        "required": [
          "id",
          "adapter",
          "name",
          "since",
          "pending"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "adapter": {
            "$ref": "#/components/schemas/uuid"
          },
          "name": {
            "$ref": "#/components/schemas/profile-name"
          },
          "icon": {
            "$ref": "#/components/schemas/url"
          },
          "system": {
            "type": "boolean",
            "default": false,
            "description": "System profiles are fixed by the system.  They may not be modified,\nrenamed or deleted.  Devices may be freely associated with them."
          },
          "settings": {
            "$ref": "#/components/schemas/ProfileSettings"
          },
          "since": {
            "$ref": "#/components/schemas/epoch-timestamp"
          },
          "pending": {
            "$ref": "#/components/schemas/epoch-timestamp"
          }
        }
      },
      "datausage": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0,
        "maximum": 1000000000000000000,
        "description": "Data Usage in Bytes."
      },
      "DeviceUsageRecord": {
        "type": "object",
        "description": "- **timestamp**: The start of the period.\n- **tx**: Number of bytes sent by the device in the period.\n- **rx**: Number of bytes received by the device in the period.",
        "required": [
          "timestamp",
          "tx",
          "rx"
        ],
        "additionalProperties": false,
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/epoch-timestamp-nonull"
          },
          "tx": {
            "$ref": "#/components/schemas/datausage"
          },
          "rx": {
            "$ref": "#/components/schemas/datausage"
          }
        }
      },
      "DeviceUsageHistory": {
        "type": "array",
        "description": "Holds up to 90 days worth of hourly data usage records for the device.\nThe resolution of the items (daily or hourly) depends on the api call.",
        "minItems": 1,
        "maxItems": 2160,
        "items": {
          "$ref": "#/components/schemas/DeviceUsageRecord"
        }
      },
      "device-name": {
        "type": "string",
        "format": "text",
        "nullable": true,
        "description": "The name of the device.",
        "minLength": 0,
        "maxLength": 64,
        "pattern": "^[\\w\\W]+$",
        "example": "Granpa's Nokia"
      },
      "device-type": {
        "type": "string",
        "format": "text",
        "nullable": true,
        "description": "The type of the device.",
        "minLength": 0,
        "maxLength": 64,
        "pattern": "^[\\w\\W]+$",
        "example": "Smart Watch"
      },
      "DeviceIP": {
        "type": "object",
        "required": [
          "ip4"
        ],
        "additionalProperties": false,
        "properties": {
          "ip4": {
            "$ref": "#/components/schemas/ip4"
          },
          "ip6": {
            "$ref": "#/components/schemas/ip6"
          }
        }
      },
      "epoch-timestamp-pause": {
        "type": "integer",
        "format": "int64",
        "minimum": -1,
        "maximum": 4743406575000,
        "description": "A Time, expressed as seconds since Jan 01 1970. (UTC). -1 = Indefinite unpause",
        "example": 1587732975
      },
      "time-state": {
        "type": "object",
        "required": [
          "state",
          "since"
        ],
        "additionalProperties": false,
        "properties": {
          "state": {
            "$ref": "#/components/schemas/epoch-timestamp-pause"
          },
          "since": {
            "$ref": "#/components/schemas/epoch-timestamp"
          }
        },
        "description": "The current known value of the state, and the time that it changed."
      },
      "DeviceConfig": {
        "type": "object",
        "required": [
          "vpn",
          "device-protection",
          "adblocking"
        ],
        "additionalProperties": false,
        "description": "- **vpn**: Enabled or Not.\n- **adblocking**: Enabled or Not.\n- **device-protection**: Enabled or not.\n- **internet-pause**: Internet will be paused until this time passes. If\n  the value is -1, internet is paused indefinitely.  If it is 0,\n  internet is Un-paused.",
        "properties": {
          "vpn": {
            "$ref": "#/components/schemas/state"
          },
          "adblocking": {
            "$ref": "#/components/schemas/state"
          },
          "device-protection": {
            "$ref": "#/components/schemas/state"
          },
          "internet-pause": {
            "$ref": "#/components/schemas/time-state"
          }
        }
      },
      "Device": {
        "type": "object",
        "required": [
          "id",
          "adapter",
          "profile",
          "mac"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "adapter": {
            "$ref": "#/components/schemas/uuid"
          },
          "profile": {
            "$ref": "#/components/schemas/uuid"
          },
          "mac": {
            "$ref": "#/components/schemas/mac"
          },
          "name": {
            "$ref": "#/components/schemas/device-name"
          },
          "type": {
            "$ref": "#/components/schemas/device-type"
          },
          "manufacturer": {
            "$ref": "#/components/schemas/device-name"
          },
          "ip": {
            "$ref": "#/components/schemas/DeviceIP"
          },
          "online": {
            "type": "boolean",
            "default": true
          },
          "online_since": {
            "$ref": "#/components/schemas/epoch-timestamp"
          },
          "discovered": {
            "$ref": "#/components/schemas/epoch-timestamp"
          },
          "cfg": {
            "$ref": "#/components/schemas/DeviceConfig"
          }
        },
        "example": {
          "id": "e22cfd99-44e5-4c93-8cad-3185c623cc25",
          "adapter": "cd73b915-89a4-4971-9d86-bce91786b12a",
          "profile": "66f7346a-48af-4614-bd7b-6c17093d75e3",
          "mac": "00-00-5E-DF-98-EB",
          "name": "Nokia N78",
          "type": "Smartphone",
          "manufacturer": "Nokia",
          "ip": {
            "ip4": "192.168.0.55",
            "ip6": "2001:db8:85a3::8a2e:370:7334"
          },
          "online": true,
          "online_since": 1587732975,
          "discovered": 1587732975,
          "cfg": {
            "vpn": {
              "state": false,
              "since": 1587732975
            },
            "adblocking": {
              "state": false,
              "since": 1587732975
            },
            "device-protection": {
              "state": false,
              "since": 1587732975
            },
            "internet-pause": {
              "state": 0,
              "since": 1587732975
            }
          }
        }
      },
      "Devices": {
        "description": "An array of known devices",
        "type": "array",
        "minItems": 0,
        "maxItems": 512,
        "items": {
          "$ref": "#/components/schemas/Device"
        }
      },
      "DeviceSetBooleanCfg": {
        "type": "object",
        "required": [
          "id",
          "service",
          "setting"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "service": {
            "type": "string",
            "enum": [
              "vpn",
              "adblocking",
              "device-protection"
            ]
          },
          "setting": {
            "type": "boolean"
          }
        }
      },
      "DeviceSetPauseCfg": {
        "type": "object",
        "required": [
          "id",
          "service",
          "setting"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "service": {
            "type": "string",
            "enum": [
              "Internet-Pause"
            ]
          },
          "setting": {
            "$ref": "#/components/schemas/epoch-timestamp-pause"
          }
        }
      },
      "Device-Settings-Reply": {
        "type": "object",
        "additionalProperties": false,
        "description": "The response to setting an device service setting.\n- **state** The services current state.\n- **since** The time the current state became set for the device.\n- **pending** The requested state becomes valid when its\n**since** time stamp value equals or exceeds the returned **pending**\ntime stamp.",
        "required": [
          "state",
          "since",
          "pending"
        ],
        "properties": {
          "state": {
            "type": "boolean",
            "description": "The current state of the requested service."
          },
          "since": {
            "$ref": "#/components/schemas/epoch-timestamp-nonull"
          },
          "pending": {
            "$ref": "#/components/schemas/epoch-timestamp-nonull"
          }
        },
        "example": {
          "state": false,
          "since": 1589978803,
          "pending": 1590583603
        }
      },
      "device-group": {
        "type": "string",
        "format": "text",
        "nullable": true,
        "description": "The device type group.",
        "minLength": 0,
        "maxLength": 64,
        "pattern": "^[\\w\\W]+$",
        "example": "Mobile"
      },
      "Device_Type": {
        "type": "object",
        "required": [
          "name",
          "icon",
          "group"
        ],
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/device-type"
          },
          "icon": {
            "$ref": "#/components/schemas/url"
          },
          "group": {
            "$ref": "#/components/schemas/device-group"
          }
        }
      },
      "Device_Types": {
        "description": "An array of known device types",
        "type": "array",
        "minItems": 1,
        "maxItems": 512,
        "items": {
          "$ref": "#/components/schemas/Device_Type"
        }
      }
    },
    "securitySchemes": {
      "jwtToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "x-42c-no-authentication": true,
        "description": "Pre-distributed API Keys or Client Authorization Token, as generated by this API.\n- See the **Account Management** section for details.\n\n## Format\nTokens are all JWT formatted, however, they are compressed and only\ncontain 2 fields, instead of the typical 3.  They are not intended to be\ndecoded outside of the authorization of this API.\n\n## API Keys\nDuring initial contact attempts apps will require pre-distributed API\nKeys to access the API.  They can only be used for select API Calls, as\nspecified in the API, and ONLY for pre-authorization type functions,\nwhere a client does not yet have a system generated Bearer Token.  In\neither case the token is sent as a Bearer token in the Authorization\nheader of the message.\n\n  - This key is distributed to authorized app developers and uniquely\n    identifies the application.\n  - API Keys **MUST NOT** be shared between end user applications.\n  - Each end user application **MUST** use a unique key.\n\n### Example Keys (only valid for development)\n- **WEB APP**: AOiI2NTY4YTRkNy05MGFjLTQzMjQtYjJlOC04YWVlYzRkNmIxNWMiLCJleHAiOjM2MDAsInJiZiI6NzIwMCwic3ViIjoiZGV2IHdlYiBhcHAifQ.jys7vsUg4D3zX7zrJ_LHjgsz0r6nPbn9VXgt_3aS4F4\n- **IOS APP**: aOiI2NTY4YTRkNy05MGFjLTQzMjQtYjJlOC04YWVlYzRkNmIxNWMiLCJleHAiOjMxNTM2MDAwMCwicmJmIjozNDY4OTYwMDAsInN1YiI6ImRldiBpb3MgYXBwIn0.pa7AgQDr6lvTbwYkFwEM7ceVD09quum5dmxNuD-RJr8\n- **Android**: aOiI2NTY4YTRkNy05MGFjLTQzMjQtYjJlOC04YWVlYzRkNmIxNWMiLCJleHAiOjYzMDcyMDAwLCJyYmYiOjk0NjA4MDAwLCJzdWIiOiJkZXYgYW5kcm9pZCBhcHAifQ.Z_crn9q4se2BlGfLrV7zkEf5nlIF6_TbfCo4_ct3xfE"
      }
    },
    "responses": {
      "401": {
        "description": "The Clients Bearer Token is invalid or not recognized.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Nack"
            },
            "example": {
              "error": "Invalid Credentials."
            }
          }
        },
        "headers": {
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "enum": [
                "Bearer realm=api2.privacyhero.com"
              ],
              "default": "Bearer realm=api2.privacyhero.com",
              "example": "Bearer realm=api2.privacyhero.com",
              "description": "indicates the authentication scheme(s) and parameters\napplicable to the target resource."
            }
          }
        }
      },
      "403": {
        "description": "Invalid Client Token, could not authorize api access.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GW_NegAuth"
            }
          }
        }
      },
      "404": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Nack"
            },
            "example": {
              "error": "Not Found"
            }
          }
        }
      },
      "410": {
        "description": "Gone - The Verification Token has expired.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Nack"
            },
            "example": {
              "error": "Account Update Token has expired."
            }
          }
        }
      },
      "415": {
        "description": "Unsupported Media Type",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Nack"
            },
            "example": {
              "error": "Unsupported Media Type"
            }
          }
        }
      },
      "429": {
        "description": "Too many requests",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Nack"
            },
            "example": {
              "error": "Too many requests"
            }
          }
        }
      },
      "500": {
        "description": "An Internal server error occurred.  Operation failed.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GW_InternalError"
            }
          }
        }
      },
      "555": {
        "description": "Router Offline, Asynch operation to router not completed.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Nack"
            },
            "example": {
              "error": "Router Offline"
            }
          }
        }
      },
      "401-appKey": {
        "description": "The appKey API Key is not recognized.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Nack"
            },
            "example": {
              "error": "Invalid API Key."
            }
          }
        },
        "headers": {
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "enum": [
                "X-API-KEY realm=api2.privacyhero.com"
              ],
              "default": "X-API-KEY realm=api2.privacyhero.com",
              "example": "X-API-KEY realm=api2.privacyhero.com",
              "description": "Indicates that the applications API Key was not authorized to\naccess this API."
            }
          }
        }
      },
      "403-appKey": {
        "description": "The appKey API Key does not have authority to access the API.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GW_NegAuth"
            },
            "examples": {
              "explicit-deny": {
                "description": "The Authorization check explicitly denied access based on the\nappKey provided.  Get a new appKey.",
                "value": {
                  "message": "User is not authorized to access this resource with an explicit deny"
                }
              }
            }
          }
        }
      },
      "default": {
        "description": "Unspecified Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Nack"
            },
            "example": {
              "error": "Unspecified Error"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "jwtToken": []
    }
  ],
  "tags": [
    {
      "name": "Admin Management",
      "description": "Operations related to Admin Management"
    },
    {
      "name": "Account Management",
      "description": "Operations related to Account Creation and Management"
    },
    {
      "name": "Client Management",
      "description": "Operations related to the Client"
    },
    {
      "name": "Adapter Management",
      "description": "Operations related to Adapter Management"
    },
    {
      "name": "Profile Management",
      "description": "Operations related to Profile Management"
    },
    {
      "name": "Device Management",
      "description": "Operations related to Device Management"
    },
    {
      "name": "Streaming Relocation Management",
      "description": "Operations related to Streaming Services and Relocation"
    }
  ],
  "paths": {
    "/v1/auth/newcustomer": {
      "post": {
        "operationId": "authNewCustomer",
        "tags": [
          "Account Management"
        ],
        "summary": "Request New Customer/Forgotten Password/Passwordless Re-authentication",
        "description": "# Usage\n\nIf the email address supplied in the message is not registered in the\nsystem, then this message is processed as a \"New Customer\nRegistration\". Overwise this messages is processed\nas an \"Existing Customer forgot password\"/\"Existing Customer needs\npasswordless reauthentication\" request.\n\nThe ONLY difference in the processing is the form of the email which is\nsent to the customer.  Either acknowledging their request for a new\naccount, OR acknowledging their request to change their password.\n\nUpon receipt of this message, an email will be sent to the supplied\nemail address.  It will contain instructions to click a provided link in\nthe message which will act as a callback to the initiating application.\n\nThe URL passed as the callback must be able to accept two parameter in\nthe url of the form:\n```\ncallback.url/path?verify=<token>&exp=<time>\n```\n - **verify** is the verification token to be sent back to the API server by\nthe app on the **/v1/auth/confirmcustomer** call.\n - **exp** specifies when the verification token will expire.  Any call to\n**/v1/auth/confirmcustomer**` after this time will fail.\n\nUpon receipt of the callback, if the application uses passwords, it\nshould prompt for a new password, and then send that in the\n`confirmcustomer` message.  Otherwise, the app should just immediately\nsend the `confirmcustomer` message to the backend, which will then\nprovide authentication tokens allowing the application/client access to\nthe rest of the API.\n\n## Security Requirements\n  The Authorization Bearer token sent to authenticate for this message\n  is the Application unique and pre-distributed App Token.\n\n## Parameters\n  - **email**: The email address the customer wants the Account email to be\ndirected to.\n  - **callback**: The complete URL, minus parameters, which is embedded in the email sent\nto the customer to confirm their account creation. It must point to the\napp which instigated this request.\n\n## Message Flow Diagrams\n\n  - See: [New Customer Message Flow](./API/flows/NewCustomer-Flow.html)\n  - See: [Forgot Password Message Flow](./API/flows/ForgotPassword-Flow.html)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "callback"
                ],
                "additionalProperties": false,
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/email-address"
                  },
                  "callback": {
                    "$ref": "#/components/schemas/url-callback"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was accepted, and an email was sent to the\nusers provided email address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Email sent to customer, OK."
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-appKey"
          },
          "403": {
            "$ref": "#/components/responses/403-appKey"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/callback/path": {
      "get": {
        "operationId": "appCallback",
        "tags": [
          "Account Management"
        ],
        "summary": "Callback to App that requested a New Customer.",
        "description": "# Usage\nThis is the format of the callback that will be presented to the\ncustomer in their confirmation email.\n\nIt is linked to the instigating App, so that the App can continue\nthe process of creating the new account, resetting the password,\nre-establishing credentials, etc .\n\n## Security Requirements\n\nThere are no specific security requirements.  However the token is\ncryptographically signed, and only valid for the specified duration.\nThe application only needs to check the duration in the call, the API\nserver will verify the token remains valid and is properly formed when\nthe token is presented.\n\n## Parameters\n - **verify** is the verification token to be sent back to the API server by\n    the app on the **/v1/auth/confirmcustomer** call.\n - **pwd** specifies that a confirmation password must be prompted from\n    the Client, and supplied to the API in the **/v1/auth/confirmcustomer**\n    call.\n - **exp** specifies when the verification token will expire.  Any call\n    to **/v1/auth/confirmcustomer**` after this time will fail.",
        "servers": [
          {
            "url": "ph2app://android.app/some/path",
            "description": "The link which can open the app which called\n**v1//auth/newcustomer**, etc."
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "verify",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ph2-bearer-token"
            },
            "description": "The New Customer confirmation token.",
            "example": "AeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1MTYyMzkwMjJ9AB"
          },
          {
            "in": "query",
            "name": "exp",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/epoch-timestamp"
            },
            "description": "The Time, after which the verification token will become invalid.",
            "example": 1587759975
          },
          {
            "in": "query",
            "name": "pwd",
            "schema": {
              "type": "boolean",
              "default": true,
              "example": false
            },
            "description": "If true, the user must be prompted to create a password and the\npassword must be sent in the `confirmcustomer` API call.\nIf it is not present, it defaults to `true`"
          }
        ],
        "security": [],
        "x-42c-no-authentication": true,
        "responses": {
          "200": {
            "description": "The message was accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                }
              }
            }
          },
          "400": {
            "description": "The token expired before the link was used.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/auth/confirmcustomer": {
      "post": {
        "operationId": "confirmCustomer",
        "tags": [
          "Account Management"
        ],
        "summary": "Confirm the Customer Account Maintenance Request",
        "description": "# Usage\nConfirms creation of the new account for a Customer, via the back link\nprovided by the email to the customer.\n\n## Security Requirements\n  The Authorization Bearer token sent to authenticate for this message\n  is the Application unique and pre-distributed App Token.\n\n## Parameters\n  - **verify**: The token passed to the callback which invoked this API\n  call.\n  - **pwd**: The clients chosen password.  This should only be provided\n  if the callback specified that a password was required.\n  - **expchk**: Token Expiry Check.  Will not execute the confirmation,\n  instead will reply with a 202 IF the operation would have succeeded.\n  The backend will not do any updates if expchk is set, so, for\n  confirmations that require a password, the **pwd** field should be set\n  with a valid placeholder.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "verify"
                ],
                "additionalProperties": false,
                "properties": {
                  "verify": {
                    "$ref": "#/components/schemas/ph2-bearer-token"
                  },
                  "pwd": {
                    "$ref": "#/components/schemas/password"
                  },
                  "expchk": {
                    "$ref": "#/components/schemas/expchk"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was accepted, and the account has been created/modified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorized"
                }
              }
            }
          },
          "202": {
            "description": "The token has not expired.  Only replied to if **expchk** is true.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotExpired"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-appKey"
          },
          "403": {
            "$ref": "#/components/responses/403-appKey"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/auth/login": {
      "post": {
        "operationId": "login",
        "tags": [
          "Account Management"
        ],
        "summary": "Log a Client in to their account.",
        "description": "# Usage\nLogs a client/admin in to their account, by validating their credentials\nand returning a Bearer token for API access.  Can also be used by an\nadmin to impersonate the login of a client.\n\nThis API call is only made for applications that use a password for\nauthorization validation.  Other applications need to do account\nrecovery if the access token is lost or expired.\n\n## Security Requirements\n  For a normal client/admin login, the Authorization Bearer token sent\n  to authenticate for this message is the Application unique and\n  pre-distributed App Token.\n\n  However, if the client is an Admin user, this message can be called to\n  impersonate a non admin client.  In this case the Authorization Bearer\n  token must be the Admins Authorization Bearer token AND the password\n  in the message must be the Administrators password.\n\n## Parameters\n  - **id**: The clients ID,  different clients will present different ID.\n    - Customer: Their email address\n    - Admin: Their email address\n    - Impersonation: The email address of the client the administrator\n    wishes to impersonate.\n  - **pwd**: The shared secret used to identify the client.  This is the\n  Clients or Administrators password.  However, in the case of\n  Impersonation, this password MUST be the administrators password and\n  it must match the administrator identified by their Authorization\n  Bearer Token.  It is sent unencrypted/unhashed because the link is\n  protected from eaves dropping with https.  Admins can ONLY log in\n  through this call.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "id",
                  "pwd"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/email-address"
                  },
                  "pwd": {
                    "$ref": "#/components/schemas/password"
                  }
                }
              },
              "examples": {
                "client": {
                  "value": {
                    "id": "client@email.com",
                    "pwd": "123456789"
                  },
                  "description": "An Example Client login"
                },
                "admin": {
                  "value": {
                    "id": "admin@privacyhero.com",
                    "pwd": "iNBi5tRE"
                  },
                  "description": "An Example Admin login"
                },
                "impersonation": {
                  "value": {
                    "id": "client@email.com",
                    "pwd": "iNBi5tRE"
                  },
                  "description": "An Example Impersonated login"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was accepted, and the account has been logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorized"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-appKey"
          },
          "403": {
            "$ref": "#/components/responses/403-appKey"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/auth/renew": {
      "get": {
        "operationId": "authRenew",
        "tags": [
          "Account Management"
        ],
        "summary": "Renew a Client Authorization Token.",
        "description": "# Usage\n\nWhen the Clients Authorization Token is about to (or already has)\nreached its expiry time.  This call is made to provide a new token for\ncontinued use of the API without requiring account recover.  If the\ntoken has finally passed its \"refreshh by\" time, account recovery will\nbe required to generate a new fresh Token.\n\nCauses the Authorization token attached to the API call\nto be renewed, and a new token returned.",
        "parameters": [
          {
            "in": "query",
            "required": false,
            "name": "key",
            "schema": {
              "$ref": "#/components/schemas/ph2-bearer-token"
            },
            "description": "The applications API Key.  Must be the same application the client\nauthorized on or logged in with.  This prevents anyone in possession\nof the clients JWT Token, from renewing it without also having\naccess to a matching Application API Key."
          }
        ],
        "responses": {
          "200": {
            "description": "The message was accepted, and the token has been renewed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorized"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/auth/chgpwd": {
      "post": {
        "operationId": "changePassword",
        "tags": [
          "Account Management"
        ],
        "summary": "Change a Clients password.",
        "description": "# Usage\nCauses the Clients password to be changed.\n\n## Parameters\n  - **old**: The old password of the Client.  Must be Valid.\n  - **new**: The new password of the Client.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "old",
                  "new"
                ],
                "additionalProperties": false,
                "properties": {
                  "old": {
                    "$ref": "#/components/schemas/password"
                  },
                  "new": {
                    "$ref": "#/components/schemas/password"
                  }
                },
                "example": {
                  "old": "4n 0ld p455w0rd",
                  "new": "my n3w p455w0rd"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The password was changed OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorized"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.\n* `\"Insecure Password\"` - Password failed security strength check.\n* `\"Old Password doesn't match\"` - Old Password failed security check.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/auth/chgemail": {
      "post": {
        "operationId": "changeEmail",
        "tags": [
          "Account Management"
        ],
        "summary": "Change a Clients Email Address.",
        "description": "# Usage\n\nCauses the Clients Email Address to be changed.\nWill also cause an email to be sent to both the\nold email address, advising the client it is being changed.\nAND, to the new email address to confirm the address is valid.\n\nThe Confirmation Email contains the callback as an embedded link which\nwill call back into the initiating application.\n\nThe URL passed as the callback must be able to accept three parameter in\nthe url of the form:\n```\ncallback.url/path?verify=<token>&pw=<false/true>&exp=<time>\n```\n - **verify** is the verification token to be sent back to the API server by\n    the app on the **/v1/auth/confirmcustomer** call.\n - **pwd** specifies that a confirmation password must be prompted from\n    the Client, and supplied to the API in the **/v1/auth/confirmcustomer**\n    call.\n - **exp** specifies when the verification token will expire.  Any call\n    to **/v1/auth/confirmcustomer**` after this time will fail.\n\n## Parameters\n  - **email**: The new email address to change to.\n  - **callback**: The complete URL, minus parameters, which is embedded in\n  the email sent to the customer to confirm their account creation. It\n  must point to the app which instigated this request.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "callback"
                ],
                "additionalProperties": false,
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/email-address"
                  },
                  "callback": {
                    "$ref": "#/components/schemas/url-callback"
                  }
                }
              },
              "example": {
                "email": "newemail@email.org",
                "callback": "https://www.myapp.url/callback"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The email change was initiated.  Confirmation Emails sent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Emails sent to user, OK."
                }
              }
            }
          },
          "400": {
            "description": "The Email address is already in use by another Client.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Email address already used by another account."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/auth/delcustomer": {
      "post": {
        "operationId": "deleteCustomer",
        "tags": [
          "Account Management"
        ],
        "summary": "Delete a Customer Account.",
        "description": "# Usage\nCauses an email to be sent to the customer requiring them\nto confirm they wish to mark the account for deletion.\n\nThe Email contains the callback as an embedded link which\nwill call back into the initiating application.\n\nThe URL passed as the callback must be able to accept three parameter in\nthe url of the form:\n```\ncallback.url/path?verify=<token>&pw=<false/true>&exp=<time>\n```\n - **verify** is the verification token to be sent back to the API server by\n    the app on the **/v1/auth/confirmcustomer** call.\n - **pwd** specifies that a confirmation password must be prompted from\n    the Client, and supplied to the API in the **/v1/auth/confirmcustomer**\n    call.\n - **exp** specifies when the verification token will expire.  Any call\n    to **/v1/auth/confirmcustomer**` after this time will fail.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "callback"
                ],
                "additionalProperties": false,
                "properties": {
                  "callback": {
                    "$ref": "#/components/schemas/url-callback"
                  }
                },
                "example": {
                  "callback": "https://www.myapp.url/callback"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Confirmation Email sent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Email sent to user, OK."
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/admin/chkemail": {
      "get": {
        "operationId": "chkEmail",
        "tags": [
          "Admin Management"
        ],
        "summary": "Check the given email address is valid.",
        "description": "# Usage\nCheck if the given email address is valid and supply basic information\nabout the account.",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "schema": {
              "$ref": "#/components/schemas/email-address"
            },
            "description": "The Email address to check.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "If the clients email address is valid, a 200 response will be\nreturned with basic information about the client.  IF the clients\nemail address is not a valid client, the response will be 404.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "first_name",
                    "last_name"
                  ],
                  "properties": {
                    "first_name": {
                      "type": "string",
                      "description": "The Clients first name.  Null if not known.",
                      "example": "Karen",
                      "nullable": true
                    },
                    "last_name": {
                      "type": "string",
                      "description": "The Clients last name. Null if not known.",
                      "example": "Jones",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/client/notify": {
      "post": {
        "operationId": "clientNotify",
        "tags": [
          "Client Management"
        ],
        "summary": "Subscribe/Unsubscribe to notifications.",
        "description": "# Usage\nAllows the client to subscribe/unsubscribe web push notifications.\n\nPush notifications require the client to authorize the subscription.\nThe App is responsible for getting the clients authority with the\nrelevant service, and then passing the WebPush Client Token (AKA\n\"Registration Id\") to the Backend API.  Anytime the WebPush Client Token\nis renewed by the Client, this same call is made to update it.\n\n## Parameters\n  - **token**: the WebPush Client Token obtained when the client\n  consented to receiving notifications.\n  - **service**: the WebPush Service being employed by the clients\n  application.\n    - **\"FIREBASE\"** is used for Android and non-safari web push\n    notifications.\n    - **\"APNS-IOS\"** is used for IOS Apps.\n    - **\"APNS-WEB\"** is used for Safari Web Push notifications.\n  - **cancel**: Optional.  Set to True, to cancel notifications for the service.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "service"
                ],
                "additionalProperties": false,
                "properties": {
                  "token": {
                    "type": "string",
                    "format": "WebPush Client Token",
                    "pattern": "^[\\w]+$",
                    "minLength": 8,
                    "maxLength": 256,
                    "example": "f1R3Rk5uTiIvC1prMTr7ue:APA91bGPPasEn7wqi2ZnArJsXKlbk9OCZ6jweCsWVPXA",
                    "description": "The clients notification token for their service.  Also known as the\n\"Registration Id\"."
                  },
                  "service": {
                    "type": "string",
                    "format": "Notification",
                    "enum": [
                      "FIREBASE",
                      "APNS-IOS",
                      "APNS-WEB"
                    ],
                    "example": "FIREBASE",
                    "description": "The service the client token relates to."
                  },
                  "cancel": {
                    "type": "boolean",
                    "default": false,
                    "example": true,
                    "description": "IF true, the notifications attached to this token are canceled."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, Notification set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Notification Registered OK."
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.\n* `\"Invalid Service\"` - Password failed security strength check.\n* `\"Invalid WebPush Token\"` - Token is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/client/send": {
      "post": {
        "operationId": "clientSend",
        "tags": [
          "Client Management"
        ],
        "summary": "Send json payload to all registered notifications.",
        "description": "# Usage\nAllows the client to send all configured notifications for the client\nthe json payload sent to this end point.\n\nThe payload is not processed in any way and is sent verbatim.\n\nThis function is designed for testing purposes ONLY.  It is not present\nin production and only available for development and qa.\n\nNOTE: A successful 200 reply from this message does not indicate that\nall registered notification endpoints were sent the message, only that\nthe message has been received and dispatched in the normal way.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, Notifications sent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Notifications Sent OK."
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/client/chargebee": {
      "post": {
        "operationId": "clientChargebee",
        "tags": [
          "Client Management"
        ],
        "summary": "Manage Clients chargebee portal session.",
        "description": "# Usage\nAllows the front end applications to manage a portal session for the\nclient without needing to store the security tokens for general\nchargebee access.\n\n## Parameters\n  - **operation**: the Portal Operation.\n  - **operation**: the Portal Operation.\n  - **redirect_url**: Optional parameter for the operation. URL to\n    redirect when the user logs out from the portal.\n  - **forward_url**: Optional parameter for the operation. By default\n    access_url redirects the customer to the portal home page. If you  \n    would like to redirect the customer to a different URL, you can use\n    this parameter to do so.\n  - **session_id**: Optional portal session id for the operation.\n  - **token**: Optional Unique pre-authenticated portal session token\n    to access customer portal directly.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "operation"
                ],
                "additionalProperties": false,
                "properties": {
                  "operation": {
                    "type": "string",
                    "format": "Chargebee Operation",
                    "enum": [
                      "start",
                      "retrieve",
                      "logout",
                      "activate"
                    ],
                    "example": "start",
                    "description": "The operation to perform on the portal session.  different\noperations require different parameters.\n* **start**:\n  * redirect_url (required)\n  * forward_url (optional)\n* **retrieve**:\n  * session_id (required)\n* **logout**:\n  * session_id (required)\n* **activate**:\n  * session_id (required)\n  * token (required)"
                  },
                  "redirect_url": {
                    "$ref": "#/components/schemas/url"
                  },
                  "forward_url": {
                    "$ref": "#/components/schemas/url"
                  },
                  "session_id": {
                    "type": "string",
                    "format": "Chargebee Session ID",
                    "example": "portal___test__KyVnJjRnFZCdn6FF",
                    "minLength": 1,
                    "maxLength": 256,
                    "description": "The current portal session id."
                  },
                  "token": {
                    "type": "string",
                    "format": "Chargebee Token",
                    "minLength": 1,
                    "maxLength": 256,
                    "example": "f1R3Rk5uTiIvC1prMTr7ue:APA91bGPPasEn7wqi2ZnArJsXKlbk9OCZ6jweCsWVPXA",
                    "description": "The chargebee token."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response to this message is the full json chargebee\nportal_session object as returned by the chargebee api.  A full\nreference of it can be read here:\n<https://apidocs.chargebee.com/docs/api/portal_sessions>",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "portal_session": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": true,
                  "example": {
                    "portal_session": {
                      "access_url": "https://yourapp.chargebeeportal.com/portal/access/__test__8pN2A5m5PhZUZ9xwBAR8hvpM7dcuHnVPN",
                      "created_at": 1517469304,
                      "customer_id": "__test__KyVnJjRnFZCd66FD",
                      "expires_at": 1517472904,
                      "id": "portal___test__KyVnJjRnFZCdn6FF",
                      "linked_customers": [
                        {
                          "customer_id": "__test__KyVnJjRnFZCd66FD",
                          "has_active_subscription": false,
                          "has_billing_address": false,
                          "has_payment_method": false,
                          "object": "linked_customer"
                        },
                        {
                          "..": null
                        }
                      ],
                      "object": "portal_session",
                      "redirect_url": "https://yourdomain.com/users/3490343",
                      "status": "created",
                      "token": "__test__8pN2A5m5PhZUZ9xwBAR8hvpM7dcuHnVPN"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.\n* `\"Invalid Service\"` - Password failed security strength check.\n* `\"Invalid WebPush Token\"` - Token is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/client/subscriptions": {
      "get": {
        "operationId": "clientSubscriptions",
        "tags": [
          "Client Management"
        ],
        "summary": "List Chargebee subscriptions for all adapters.",
        "description": "# Usage\nReturns a list of all current subscriptions, their state and the\nadapter they are associated with, if any.  The ID of any adapter\nthat does not have a subscription is also returned.",
        "responses": {
          "200": {
            "description": "The response to this message is the list of all current\nsubscriptions of the account, and their associated adapter, as well\nas a list of the id of all adapters without a current subscription.\n\nThe subscription list contains ALL subscriptions for the client, and\ntheir status.  IF the subscription is associated with an adapter,\nthe adapter_id will be set to the adapters unique id.  Otherwise the\nadapter_id will be null or not present.\n\nunassigned_adapters is a list of all adapter id's which do not\ncurrently have a subscription associated with them.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "subscriptions",
                    "unassigned_adapters"
                  ],
                  "properties": {
                    "subscriptions": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "type": "object",
                        "required": [
                          "subscription_id",
                          "status"
                        ],
                        "properties": {
                          "subscription_id": {
                            "type": "string",
                            "format": "Chargebee Subscription ID",
                            "example": "__test__KyVnJjRnFcymP8oz"
                          },
                          "status": {
                            "type": "string",
                            "format": "Chargebee Subscription status",
                            "enum": [
                              "future",
                              "in_trial",
                              "active",
                              "non_renewing",
                              "paused",
                              "cancelled"
                            ]
                          },
                          "adapter_id": {
                            "$ref": "#/components/schemas/uuid_optional"
                          }
                        }
                      }
                    },
                    "unassigned_adapters": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/uuid"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.\n* `\"Invalid Service\"` - Password failed security strength check.\n* `\"Invalid WebPush Token\"` - Token is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/client/motd": {
      "get": {
        "operationId": "clientMotd",
        "tags": [
          "Client Management"
        ],
        "summary": "Get the clients \"Messages of the Day\".",
        "description": "# Usage\nSupply parameters which can customize the MOTD response, and then\nretrieve the list of all MOTD messages to be presented to the customer.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "example": 0
            },
            "required": true,
            "description": "The page number to retrieve. The page numbers are as returned in\n/v1/client/motd response.  Any undefined page will return 404."
          },
          {
            "in": "query",
            "name": "deepurl",
            "schema": {
              "$ref": "#/components/schemas/url"
            },
            "description": "The Deep Link URL to use in the returned HTML, if the page has any\nlinks internal to the application.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HTML Content to display within the MOTD Carousel for the requested page.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "example": "<!DOCTYPE html><body>\n  <h1>Carousel Page</h1>\n  Carousel Content Goes Here.\n</body></html>"
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/client/carousel": {
      "get": {
        "operationId": "clientCarousel",
        "tags": [
          "Client Management"
        ],
        "summary": "Get the clients \"Order and timing of Carousel Messages\".",
        "description": "# Usage\nCalled whenever the Carousel needs refreshing to determine how many\ncarousel pages exist, atheir order, and the timing between auto scrolling.",
        "responses": {
          "200": {
            "description": "List of MOTD pages to display in the carousel, in order.\n\n- \"since\" is used to determine if any item in the carousel has\nupdated.  IF \"since\" is not the same value as the previous call to\nthis function, then One or more pages have changed in the carousel\nand they all need to be refreshed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "since",
                    "carousel"
                  ],
                  "properties": {
                    "since": {
                      "$ref": "#/components/schemas/epoch-timestamp"
                    },
                    "delay": {
                      "type": "integer",
                      "minimum": 1,
                      "description": ":- The number of seconds to wait between pages on the carousel advancing.",
                      "example": 15
                    },
                    "carousel": {
                      "type": "array",
                      "maxItems": 100,
                      "description": "The list of carousel MOTD pages to display, in order.",
                      "items": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "example": [
                        10,
                        35,
                        19,
                        77,
                        100,
                        200,
                        695,
                        300
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "post": {
        "operationId": "clientCarouselRemove",
        "tags": [
          "Client Management"
        ],
        "summary": "Remove a page from the carousel.",
        "description": "# Usage\nCalled whenever the UI wants to mark a carousel page as no longer to be displayed.",
        "requestBody": {
          "required": true,
          "description": "The Page to remove from the carousel.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 0
                  }
                },
                "example": {
                  "id": 35
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of MOTD pages to display in the carousel, in order.\n\n- \"since\" is used to determine if any item in the carousel has\nupdated.  IF \"since\" is not the same value as the previous call to\nthis function, then One or more pages have changed in the carousel\nand they all need to be refreshed.  As this call modifies the\nCarousel list, the returned result is the current carousel list,\nupdated to reflect the removed page.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "since",
                    "carousel"
                  ],
                  "properties": {
                    "since": {
                      "$ref": "#/components/schemas/epoch-timestamp"
                    },
                    "delay": {
                      "oneOf": [
                        {
                          "type": "array",
                          "maxItems": 100,
                          "description": ":- The number of seconds to wait between INDIVIDUAL pages on the carousel before advancing.  Must have no more entries than the \"carousel\" field.  May have less entires, but may not have less than 1 entry if \"carousel\" has 1 or more entries.  The least entry in the list is applied to all subsequent pages following that entry.",
                          "example": [
                            15,
                            10,
                            5,
                            10,
                            15
                          ]
                        }
                      ]
                    },
                    "carousel": {
                      "type": "array",
                      "maxItems": 100,
                      "description": "The list of carousel MOTD page numbers to display, in order.",
                      "items": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "example": [
                        10,
                        19,
                        77,
                        100,
                        200,
                        695,
                        300
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/find": {
      "get": {
        "operationId": "adapterFind",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Find Unassociated adapters we can bind the client account to.",
        "description": "# Usage\nWhen an adapter is first installed, it is not linked to an account.\nThe client must add the adapter to their account, this function will\nreturn a list of adapters which are available to be associated.\n\nIt will either find all adapters on the same local network as the client\nconnection.  Or if that does not work, an adapter with a specific\nactivation code.\n\n## Parameters\n  - **code**: This is the optional activation code.  If not set, the\n    function will look for all unassociated adapters that share the\n    internet connection of the client making the call.\n\n    However, IF that fails, this can be set to a known activation code\n    which will cause any adapter with the matching activation code which\n    is not currently associated with an account to be returned.\n    Typically this would be a single Adapter.  If no adapters are found,\n    a \"404\" response will be generated.",
        "parameters": [
          {
            "in": "query",
            "required": false,
            "name": "code",
            "schema": {
              "$ref": "#/components/schemas/activation-code"
            },
            "description": "The optional adapters activation code."
          }
        ],
        "responses": {
          "200": {
            "description": "The list of all unclaimed adapters.\n  - **id**: Unique ID for the adapter (used in other API calls to\n  reference this adapter.)\n  - **adapter**: Identifying information for the adapter.\n    - **mac**: Adapters hardware mac address\n    - **type**: The type of adapter hardware.\n    - **desc**: Long form description of the adapter hardware.\n  - **since**: This is the epoch time when the unassociated adapter\n  last connected with the backend.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Adapter-Unassociated-Array"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/claim": {
      "post": {
        "operationId": "adapterClaim",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Claim the specified adapter for the clients account.",
        "description": "# Usage\n\nClaims the specified adapter and associates it with the clients account.\nThe Claim can only succeed if the Adapter is not associated with an\naccount.\n\nThis API Call may also be used to replace an existing adapter, by\nspecifying the existing adapters AdapterID.  In which case, the existing\nadapter will be unassociated from the clients account and the newly\nclaimed adapter will replace it in its entirety.\n\n## Parameters\n  - **id**: The id of the adapter the client wants to claim.\n  - **oldid**: Optional. Allows the claimed adapter t replace an\n  existing adapter on the clients account.  In this instance, the old\n  adapter becomes unassociated with any account, and the new adapter\n  takes over the configuration, discovered devices and profiles of the\n  old adapter.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "oldid": {
                    "$ref": "#/components/schemas/uuid"
                  }
                }
              },
              "examples": {
                "new": {
                  "value": {
                    "id": "d6faadd3-d339-4910-89b4-570ec9f72cb7"
                  },
                  "description": "Claiming a new adapter."
                },
                "replacement": {
                  "value": {
                    "id": "d6faadd3-d339-4910-89b4-570ec9f72cb7",
                    "oldid": "cd73b915-89a4-4971-9d86-bce91786b12a"
                  },
                  "description": "Replacing an existing adapter."
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, The claimed adapters details.\n\n- **AdapterID** - is the Unique ID of this Adapter.\n- **mac** - The Adapters mac address.\n- **ip** - list of ip addresses, either current, or last known.\n- **registered** - the time the adapter was first claimed by the\ncustomer.\n- **state** - the current state of the listed services.\n- **settings** - the current adapter level settings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Adapter"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.\n* `\"Insecure Password\"` - Password failed security strength check.\n* `\"Old Password doesn't match\"` - Old Password failed security check.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/list": {
      "get": {
        "operationId": "adapterList",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Lists one or all adapters associated with the clients account.",
        "description": "# Usage\nGenerates a list of adapters associated with the clients account.\nCan list a single adapter, or all adapters associated with the account.\nIn the case that a client has no adapters associated, this will be an\nempty list.\n\n## Parameters\n  - **id**: Optional, the ID of the adapter, if only one adapters\n  information is being requested.  Only adapters associated with a\n  clients account can be returned with this call.  IF the id is valid,\n  but the adapter is not associated with this clients account, then that\n  is treated the same as the adapter ID being invalid.",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "example": "cd73b915-89a4-4971-9d86-bce91786b12a",
            "description": "The Adapter ID to list.  IF not present, will return ALL Adapters\nassociated with the Clients account."
          }
        ],
        "responses": {
          "200": {
            "description": "Success, The adapters details.\n\n- **AdapterID** - is the Unique ID of this Adapter.\n- **mac** - The Adapters mac address.\n- **ip** - list of ip addresses, either current, or last known.\n- **registered** - the time the adapter was first claimed by the\ncustomer.\n- **state** - the current state of the listed services.\n- **settings** - the current adapter level settings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Adapters"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/cfg/service": {
      "post": {
        "operationId": "adapterCfgService",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Change the Adapter Service Configuration.",
        "description": "# Usage\nFor a particular Adapter, change its current service configuration.\nWhen called, if the state requested differs from the state currently\nactive in the router, the backend will create a timestamp for the\nrequest and send it to the router.  It will return that timestamp to the\ncaller.  The caller must then poll **v1/adapter/cfg** at regular\nintervals until either a reasonable time has passed, or the state\nchanges and/or the state timestamp equals or exceeds the returned\nrequest timestamp.  When the router applies the state change\nsuccessfully, the backend will be informed and supplied the timestamp of\nthe request, so that the backend can update the configuration to\npersistently store the new state of the router.\n\n## Parameters\n  - **id**: The adapters ID.  Can only change config for adapters\n  associated with the calling clients account.\n  - **service**: The name of the service to set.\n    - **vpn**: Enable or Disable the VPN Tunnel.\n    - **adblocking**: Globally Enable/Disable Ad Blocking.\n    - **streamrelocation**: Enable or Disable stream relocation\n    functionality.\n    - **malware**: Globally Enable/Disable malware protection.\n    - **upnp**: Enable a UPNP server on the device to help manage port\n    forwarding through the router.\n    - **wps**: Enable or Disable the WPS Button on the router.\n    (Wi-Fi Protected Setup)\n  - **state**: The state to set the service to.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "service",
                  "state"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "service": {
                    "$ref": "#/components/schemas/adapter-services"
                  },
                  "state": {
                    "$ref": "#/components/schemas/adapter-state"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, Adapter Config Change queued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Adapter-Settings"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Could not name the adapter!"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "555": {
            "$ref": "#/components/responses/555"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/cfg/name": {
      "post": {
        "operationId": "adapterName",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Give an adapter a descriptive name.",
        "description": "# Usage\n\nAllows the descriptive name of the adapter to be set.  Typically used by\na UI to allow a client to give an adapter a more meaningful name like\n\"Rental Appt. 1\"",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "name"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "name": {
                    "$ref": "#/components/schemas/adapter-name"
                  }
                },
                "example": {
                  "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                  "name": "Home Office Adapter"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, Adapter named.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Success, Adapter named."
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/cfg/locale": {
      "post": {
        "operationId": "adapterLocale",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Set Locale specific information for an adapter.",
        "description": "# Usage\n\nThis allows the country the adapter is in, and/or its timezone to be\nset.  Any setting will permanently over-ride the auto detected values.\n\n## Parameters\n- **id**: The adapters ID.\n- **timezone**: The IANA timezone name where the adapter resides.\n\n**timezone** must be present, otherwise the message is invalid.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "timezone"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "timezone": {
                    "$ref": "#/components/schemas/iana-timezone"
                  }
                },
                "example": {
                  "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                  "timezone": "America/Chicago"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, Adapter locale set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Success, Adapter locale set."
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/cfg/subscription": {
      "post": {
        "operationId": "adapterSubscription",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Set the current subscription for an Adapter.",
        "description": "# Usage\n\nThis message allows the chargebee subscription to be set for an adapter.\n\nIF the subscription ID is not known, or already assigned to an adapter\nthe call will fail with an error, otherwise the listed adapter will have\nits subscription set.\n\nTo clear the subscription from an adapter, set the subscription ID to null.\n\n## Parameters\n- **id**: The adapters ID.\n- **subscription**: The Chargebee subscription ID.  Set to null to clear\n  the subscription from the adapter.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "subscription"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "subscription": {
                    "type": "string",
                    "format": "Chargebee Subscription ID",
                    "example": "__test__KyVnJjRnFcymP8oz"
                  }
                },
                "example": {
                  "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                  "subscription": "__test__KyVnJjRnFcymP8oz"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, Subscription set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Success, Adapter Subscription set."
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.\n* `\"Subscription Already Assigned to an Adapter\"`\n* `\"Unknown Subscription ID\"`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/cfg/datacap": {
      "post": {
        "operationId": "adapterDataCap",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Set the datacap for a particular adapter.",
        "description": "# Usage\nSets the data caps for the identified adapter.  Data Cap is used to\ncheck if monthly usage will exceed the data cap for reporting and\nnotification purposes.\n\n## Parameters\n  - **id**: The Adapters ID to set the data cap for.\n  - **cap**: The datacap for the adapter.  This is the total number of\n  MB the customer may use in their internet plan before extra charges\n  are levied, or speed slows down (depending on the ISP and Plan).  It\n  is a combined value, representing both the data TX and RX.\n  - **day**: The day in the month when the datacap resets. 1 == data cap\n  resets on the 1st day of the month. If the day is greater than the\n  days in the current month, it is assumed the datacap resets at the\n  start of the last day of the month.  Even if **cap** is set to zero,\n  the **day** must be set between 1 and 31 as it marks the first day of\n  the clients monthly billing cycle.",
        "requestBody": {
          "required": true,
          "description": "The DataCap settings to apply.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "cap",
                  "day"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "cap": {
                    "$ref": "#/components/schemas/datacap"
                  },
                  "day": {
                    "$ref": "#/components/schemas/datacap-reset"
                  }
                },
                "example": {
                  "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                  "cap": 102400,
                  "day": 15
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, Adapter datacap set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Success, Adapter datacap set."
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/cfg/wifi": {
      "post": {
        "operationId": "adapterWiFi",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Set the WiFi settings for a particular adapter.",
        "description": "# Usage\nSets the Wifi settings for the 2.4Ghz and 5Ghz Network for an adapter.\nIf an adapter has multiple wifi radios, both radios will be set to the\nsame SSID, and password.  If the adapter has no radios, this command\nyields no results on the adapter.\n\n## Parameters\n  - **id**: The id of the adapter to configure.\n  - **wifi**: The wifi settings for the adapter. Any setting excluded or\n   set to **null** will not be changed.",
        "requestBody": {
          "required": true,
          "description": "\"The Wifi Settings to apply. Set to null anything that shouldn't change.\"",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wifi-settings-change"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, WiFi settings set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wifi-settings-change-queued"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Could not name the adapter!"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/health": {
      "get": {
        "operationId": "adapterDiagQuery",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Query the result of adapter diagnostics.",
        "description": "# Usage\n\nWhen an adapter health diagnostic is running (or at any time) this api\ncall may be made to get the current status of any running tests. AND to\nget the historical diagnostic/health results.\n\n## Parameters\n  - **id**: The id of the adapter to retrieve diagnostic health status\n  from.\n  - **days**: The maximum number of previous days to report. 1 = today.\n  0 = The most recent \"WAN\" result only. (Note, if this parameter is not\n  present, it defaults to 0.)",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "example": "cd73b915-89a4-4971-9d86-bce91786b12a",
            "description": "The Adapter ID to Query."
          },
          {
            "in": "query",
            "name": "days",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/health-days"
            },
            "example": 1,
            "description": "The number of days of health history to provide. 1 is the most\nrecent day.  0 = the most recent WAN Record. (Default)"
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Diagnostic Health Result returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Adapter-Diags"
                },
                "example": [
                  {
                    "timestamp": 1591886048,
                    "location-server": "Phuket, Thailand",
                    "provider": "3BB",
                    "distance": -50,
                    "latency": 5,
                    "latency-completion": 100,
                    "speed-rx": 185608437,
                    "speed-tx": 282140344,
                    "connection": "WAN",
                    "quality": "HIGH"
                  },
                  {
                    "timestamp": 1591884008,
                    "location-server": "Singapore",
                    "provider": "Singtel",
                    "distance": 600,
                    "latency": 36,
                    "latency-completion": 90,
                    "speed-rx": 185608437,
                    "speed-tx": 282140344,
                    "connection": "VPN",
                    "quality": "HIGH"
                  },
                  {
                    "timestamp": 1591799408,
                    "location-server": "Phuket, Thailand",
                    "provider": "3BB",
                    "distance": -50,
                    "latency": 5,
                    "latency-completion": 100,
                    "speed-rx": 185608437,
                    "speed-tx": 282140344,
                    "connection": "WAN",
                    "quality": "POOR"
                  },
                  {
                    "timestamp": 1591797608,
                    "location-server": "Singapore",
                    "provider": "Singtel",
                    "distance": 600,
                    "latency": 36,
                    "latency-completion": 90,
                    "speed-rx": 185608437,
                    "speed-tx": 282140344,
                    "connection": "VPN",
                    "quality": "LOW"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "post": {
        "operationId": "adapterDiagStart",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Start a diagnostic health check now.",
        "description": "# Usage\n\nThe system and adapters automatically run diagnostic health checks on a\ndaily basis, however, if the client wishes to force an adapter to run a\ndiagnostic health check now, this call can be made.\n\n## Parameters\n  - **id**: The id of the adapter to run the test on.  The Adapter must\n  be registered to the current client.\n  - **test**: The test to perform.\n    - \"**SpeedTest**\" will automatically pick the most appropriate speedtest.com\n    server and perform WAN and (if active) VPN speed tests, and update\n    the health records.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "test"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "test": {
                    "type": "string",
                    "enum": [
                      "SpeedTest"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, Current Diagnostic Health Result returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Adapter-Diag_Requested-Reply"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/usage": {
      "get": {
        "operationId": "adapterUsage",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Get device data usage.",
        "description": "# Usage\n\nGenerates a list of data usage values for an adapter, at a specified\nresolution.  Adapter usage is a measurer of actual traffic through an\nadapter and may not be the same value as the aggregated device usage on\nan adapter (It should not be less).  Deletion of devices, or their\nmovement between profiles does not have an impact on the device usage\nfigures.\n\n## Parameters\n  - **id**: The Unique adapter ID.\n  - **resolution**: The resolution of the report.\n  - **start**: The earliest time to report (is rounded down to the\n  beginning of the resolution period the time appears within)\n  - **end**: The latest time to report (is rounded up to the end of the\n  resolution period the time appears within)\n\n  Note, Resolution will always return a full period, so a monthly report\n  will always return full months, and the data will be aligned with the\n  billing period set in the adapter datacap configuration.\n\n## Predicted values\n  If a period or range extends into the future, the API will attempt to\n  predict usage, based on previous usage history.  That usage will be\n  reported as a negative value (to distinguish it from a known usage\n  value)  Because a period may include both a known and a predicted\n  component, in those cases, the period will be reported twice.  Firstly\n  with the known usage in the period, and secondly with the predicted\n  usage for that period.  The sum of the two values is the total usage\n  the API guesses will be used in the period. (ie, prediction does not\n  include the known data usage, only the extra predicted usage).\n\n  Prediction will only extend up until the end of the current billing\n  period, after the current billing periods future expiry date, no\n  future predicted usage values will be returned.",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "description": "The unique adapter id."
          },
          {
            "in": "query",
            "name": "resolution",
            "schema": {
              "type": "string",
              "enum": [
                "Hourly",
                "Daily",
                "Weekly",
                "Monthly"
              ],
              "default": "Hourly"
            },
            "description": "The time resolution to report. Hourly is hourly, Daily is 24 hours.\nWeekly is 7 days and Monthly is the full month aligned to the\nbilling period.  If not specified the resolution is \"Hourly\""
          },
          {
            "in": "query",
            "name": "start",
            "schema": {
              "$ref": "#/components/schemas/epoch-timestamp"
            },
            "description": "The start of the reporting window.  If not specified, defaults to\nthe oldest data on record for the device."
          },
          {
            "in": "query",
            "name": "end",
            "schema": {
              "$ref": "#/components/schemas/epoch-timestamp"
            },
            "description": "The end of the reporting window.  If not specified, defaults to\nnow."
          }
        ],
        "responses": {
          "200": {
            "description": "Success, The adapters data usage is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Adapter-Usage-History"
                },
                "example": [
                  {
                    "timestamp": 1591918680,
                    "tx": 128974848,
                    "rx": 268435456
                  },
                  {
                    "timestamp": 1591918680,
                    "tx": -64487424,
                    "rx": -134217728
                  },
                  {
                    "timestamp": 1589119208,
                    "tx": 212808499,
                    "rx": 442918502
                  }
                ]
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/reset": {
      "post": {
        "operationId": "adapterReset",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Reset the specified adapter on the clients account.",
        "description": "# Usage\n\nResets the specified adapter back to the state it would be if it had\njust been claimed.\n\n- All Devices associated with the adapter are forgotten.\n- All profiles configured for the adapter are deleted.\n- The \"shared and \"guest\" profiles are reset to their default settings.\n- VPN's are deconfigured.\n- Streaming services are de-configured.\n- WiFi settings are returned to their defaults.\n- Historical Usage and Health data is deleted.\n\n## Parameters\n  - **id**: The id of the adapter the client wants to reset.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  }
                }
              },
              "examples": {
                "reset": {
                  "value": {
                    "id": "d6faadd3-d339-4910-89b4-570ec9f72cb7"
                  },
                  "description": "Resetting an existing adapter."
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, The adapter has been reset.\n\n- **AdapterID** - is the Unique ID of this Adapter.\n- **mac** - The Adapters mac address.\n- **ip** - list of ip addresses, either current, or last known.\n- **registered** - the time the adapter was first claimed by the\ncustomer.\n- **state** - the current state of the listed services.\n- **settings** - the current adapter level settings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Adapter"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/streaming/services": {
      "get": {
        "operationId": "streamingServices",
        "tags": [
          "Streaming Relocation Management"
        ],
        "summary": "Lists streaming services, either ALL, or according to classification.",
        "description": "# Usage\n\nGenerates a list of streaming services currently supported by the\nsystem. The List is used to choose the streaming services to be set by\nthe **/v1/streaming/cfg** api call.\n\nThe call may return all services, or only Portable or Non-Portable\nservices, as required.\n\n## Parameters\n  - **type**: The types of services to return, options are All,\n Portable and non-portable.\n\nA **Portable** Service is one where the one subscription may be used\nin multiple countries.  A client may use relocation to view any\navailable stream where a proxy exists, or the stream from their current\nlocation, even if no proxy exists for it.\n\nA **Non-Portable** Service is region locked to the subscription.\nFor example, a US Non-Portable Service can only view US content, and\ncan not be relocated to view UK content.  For example, Relocation on these accounts\nallows a client with a US account, to view that content while in the UK.\nIt will not allow a client with a US account to view content on the UK\nversion of the service.",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "All",
                "Portable",
                "Non-Portable",
                "Summary"
              ],
              "default": "All"
            },
            "example": "All",
            "description": "The filter to apply to the service list, the list can contain ALL\nservices, or only Portable or Non-Portable services.\nIf the parameter is missing the call will return ALL services.\ntype **\"Summary\"** will return a list of ALL services, excluding the\ncountries lists for each service."
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "example": "cd73b915-89a4-4971-9d86-bce91786b12a",
            "description": "The Adapter ID to retrieve the services list for.  The services list\nis customized to the country the adapter resides in.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success, The streaming service list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/streams"
                },
                "example": [
                  {
                    "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                    "name": "Netflix",
                    "icon": "netflix.ico",
                    "portable": true,
                    "countries": {
                      "proxy": [
                        "US",
                        "GB",
                        "AU",
                        "TH"
                      ],
                      "non-proxy": [
                        "IL",
                        "ID"
                      ]
                    }
                  },
                  {
                    "id": "29a16e31-bb4d-4407-8244-8e68b820b854",
                    "name": "Disney+",
                    "icon": "disneyplus.ico",
                    "portable": false,
                    "countries": {
                      "proxy": [
                        "US",
                        "GB",
                        "IL"
                      ],
                      "non-proxy": [
                        "TH",
                        "ID"
                      ]
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/streaming/cfg": {
      "get": {
        "operationId": "streamingCfgQuery",
        "tags": [
          "Streaming Relocation Management"
        ],
        "summary": "Query the streaming cfg for an adapter.",
        "description": "# Usage\nFor a particular Adapter, query its streaming configuration.  This call\nwill reflect the current applied configuration and any pending but\nunconfirmed configuration changes.\n\n## Parameters\n  - **id**: The id of the adapter to retrieve the current streaming\n  configuration for.",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "example": "cd73b915-89a4-4971-9d86-bce91786b12a",
            "description": "The Adapter ID to query."
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Streaming Service Configuration Returned.  This is an array\nof all streaming services, and their current configuration on the\nadapter.\n\n- **id**: the id of the streaming service\n- **country**: the country the streaming service is directed from.\n- **since**: The timestamp when the streaming service last changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/streams-settings"
                },
                "example": [
                  {
                    "id": "29a16e31-bb4d-4407-8244-8e68b820b854",
                    "country": "US",
                    "since": 1590834650124
                  }
                ]
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "post": {
        "operationId": "streamingCfgSet",
        "tags": [
          "Streaming Relocation Management"
        ],
        "summary": "Set the streaming cfg for an adapter.",
        "description": "# Usage\nFor a particular Adapter, set its streaming configuration.  Will respond\nwith the current configuration and a pending time stamp that can be\ncompared against since to determine if the setting has been applied or\nnot.\n\n## Parameters\n  - **id**: The id of the stream to configure.\n  - **adapter**: The adapter ID to set the streaming config on.\n  - **country**: The country to set the stream to.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "adapter",
                  "country"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "adapter": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "country": {
                    "$ref": "#/components/schemas/iso3166-country"
                  }
                },
                "example": {
                  "id": "29a16e31-bb4d-4407-8244-8e68b820b854",
                  "adapter": "cd73b915-89a4-4971-9d86-bce91786b12a",
                  "country": "GB"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, Streaming Service Configuration Queued.\n- **id**: The id of the stream.\n- **adapter**: The adapter ID the streaming config relates to.\n- **country**: The country the stream is CURRENTLY set to.\n- **since**: The last time this stream config changed.\n- **pending**: The next timestamp which indicates the config has\nbeen changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stream-setting-queued"
                },
                "example": {
                  "id": "29a16e31-bb4d-4407-8244-8e68b820b854",
                  "adapter": "cd73b915-89a4-4971-9d86-bce91786b12a",
                  "country": "US",
                  "since": 1590834650123,
                  "pending": 1590841399785
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/profile/list": {
      "get": {
        "operationId": "profileList",
        "tags": [
          "Profile Management"
        ],
        "summary": "Lists all/selected profiles created by the client on their account.",
        "description": "# Usage\n\nGenerates a list of specific profile, or all profiles associated with\nthe clients account.\n\n## Parameters\n  - **id**: Optional. The id of an adapter or profile.  If an adapter id\n  is provided, all profiles belonging to that adapter will be reported.\n  If a specific profile id is provided, that specific profile will be\n  reported, otherwise all profiles on all adapters will be reported.",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "description": "The unique id of either an adapter or a profile."
          }
        ],
        "responses": {
          "200": {
            "description": "Success, The profile details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profiles"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/profile/create": {
      "post": {
        "operationId": "profileCreate",
        "tags": [
          "Profile Management"
        ],
        "summary": "Create a new user profile.",
        "description": "# Usage\n\nCreates a new profile for the client.  Initially the profile will have\ndefault settings and no devices, the only thing set in creation is the\nprofile name (which must be unique to the client) and its icon.\n\n## Parameters\n  - **id**: The unique id of the adapter we are associating the new\n  profile with. Must not be the same as any existing profile on that\n  adapter, or a reserved profile name.\n  - **name**: The name of the new profile.  Must not be the same as any\n  existing profile, or a reserved profile name.\n  - **icon**: Optionally, a link to the icon to use for the profile.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "name"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "name": {
                    "$ref": "#/components/schemas/profile-name"
                  },
                  "icon": {
                    "$ref": "#/components/schemas/url"
                  }
                },
                "example": {
                  "id": "d46cb964-4a40-43ac-87f6-cdefa19fa121",
                  "name": "Kids",
                  "icon": "butterfly.ico"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, The profile was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.\n* `\"Profile Name not unique.\"` - The Profile Name is not unique.\n* `\"Profile Name reserved.\"` - The Profile Name is reserved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/profile/delete": {
      "post": {
        "operationId": "profileDelete",
        "tags": [
          "Profile Management"
        ],
        "summary": "Delete a new user profile.",
        "description": "# Usage\n\ndeletes an existing profile for the client.  Any devices which remain\nattached to the profile will be moved to the system \"shared\" profile.\n\n## Parameters\n  - **id**: The unique id of the profile.  The profile must belong to\n  the client account deleting it.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, The profile was deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Profile Deleted OK."
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.\n* `\"Cannot delete system profile.\"` - It is not possible to delete\nsystem profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/profile/cfg/name": {
      "post": {
        "operationId": "profileCfgName",
        "tags": [
          "Profile Management"
        ],
        "summary": "Change Name and/or Icon of a Profile.",
        "description": "# Usage\n\nAllows the descriptive name or icon of a profile to be changed.\n\n## Parameters\n  - **id**: The unique id of the profile.\n  - **name**: Optionally, The name of the new profile.  Must not be the same as any\n  existing profile, or a reserved profile name.\n  - **icon**: Optionally, a link to the icon to use for the profile.\n\nThe call may change either or both the **name** and **icon**.  If the\ncall is made, and neither **name** or **icon** is present, it is an error.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "name": {
                    "$ref": "#/components/schemas/profile-name"
                  },
                  "icon": {
                    "$ref": "#/components/schemas/url"
                  }
                },
                "example": {
                  "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                  "name": "Rugrats",
                  "icon": "rugrats.ico"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, The profile was renamed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.\n* `\"Profile Name not unique.\"` - The Profile Name is not unique.\n* `\"Profile Name reserved.\"` - The Profile Name is reserved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/profile/cfg/bedtimes": {
      "post": {
        "operationId": "profileCfgBedtimes",
        "tags": [
          "Profile Management"
        ],
        "summary": "Set the weekly bedtimes for a profile.",
        "description": "# Usage\n\nAllows the Start time for \"Bedtime\" to be set independently for \"School\nNights\" and \"Other Nights\".  The duration of a \"Bedtime\" is system\ncontrolled.  School Nights are the nights BEFORE a school day.  So, in\nthe typical school system where a school day is Monday to Friday, school\nnights are Sunday thru Thursday.\n\n## Parameters\n  - **id**: The unique id of the profile.\n  - **enabled**: True if bedtime is enabled. False otherwise.  IF False,\n  no other parameters need to be sent.  See Schema for defaults.\n  - **school**: The time in minutes from midnight when bedtime\n  starts on a \"school night\".  Set to -1 if it is disabled.\n  - **other**: The time in minutes from midnight when bedtime\n  starts on nights other than school nights.  Set to -1 if it is\n  disabled.\n  - **school-nights**: An array of booleans which sets which nights of the\n  week are school nights.  The First entry is Monday, the last is\n  Sunday.  true = This is a school night.  false = It is not a school\n  night.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "enabled"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Enable the bedtime function (true) or not (false)"
                  },
                  "school": {
                    "$ref": "#/components/schemas/time-of-day-mins"
                  },
                  "other": {
                    "$ref": "#/components/schemas/time-of-day-mins"
                  },
                  "school-nights": {
                    "$ref": "#/components/schemas/school-nights"
                  }
                },
                "example": {
                  "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                  "enabled": true,
                  "school": 1260,
                  "other": 1350,
                  "school-nights": [
                    true,
                    true,
                    true,
                    true,
                    false,
                    false,
                    true
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, The profile bedtime settings were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileCfgPending"
                },
                "example": {
                  "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                  "adapter": "d46cb964-4a40-43ac-87f6-cdefa19fa121",
                  "name": "Rugrats",
                  "icon": "rugrats.ico",
                  "settings": {
                    "youtube-restricted": false,
                    "safesearch": false,
                    "internet-pause": 0,
                    "bedtime": {
                      "school": 1290,
                      "other": -1,
                      "school-nights": [
                        true,
                        true,
                        true,
                        true,
                        false,
                        false,
                        true
                      ]
                    },
                    "bedtime-delay": 45
                  },
                  "since": 1604896473,
                  "pending": 1604897123
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.\n* `\"Profile Name not unique.\"` - The Profile Name is not unique.\n* `\"Profile Name reserved.\"` - The Profile Name is reserved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/profile/cfg/bedtime-delay": {
      "post": {
        "operationId": "profileCfgBedtimeDelay",
        "tags": [
          "Profile Management"
        ],
        "summary": "Set the weekly bedtimes for a profile.",
        "description": "# Usage\n\nAllows todays bedtime to be delayed by the amount of minutes specified.\nThe delay can not be set, such that it would extend beyond the end of\nthe bedtime period.  At the end of the bedtime period, the delay will be\nreset to zero.  It only operates once and is reset to zero at the end of\nbedtime (6am).\n\n## Parameters\n  - **id**: The unique id of the profile.\n  - **delay**: The number of minutes to delay bedtime for.  Set to zero\n  to disable a previously set delay.  Delay only delays the start of\n  it does not delay the end.  The delay is absolute, if the delay needs\n  to be incremented or decremented, take the previous delay, adjust\n  accordingly and re-set it using this call.\n\n## Note:\n  Bedtime can not be delayed if:\n  - The Bedtime Schedule of the Profile is Disabled.\n  - OR There are no devices configured on the profile.\n  In either case, an error will be returned.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "delay"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "delay": {
                    "$ref": "#/components/schemas/time-delay"
                  }
                },
                "example": {
                  "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                  "delay": 45
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, The profile bedtime settings were made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileCfgPending"
                },
                "example": {
                  "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                  "adapter": "d46cb964-4a40-43ac-87f6-cdefa19fa121",
                  "name": "Rugrats",
                  "icon": "rugrats.ico",
                  "settings": {
                    "youtube-restricted": false,
                    "safesearch": false,
                    "internet-pause": 0,
                    "bedtime": {
                      "school": 1290,
                      "other": -1,
                      "school-nights": [
                        true,
                        true,
                        true,
                        true,
                        false,
                        false,
                        true
                      ]
                    },
                    "bedtime-delay": 45
                  },
                  "since": 1604896473,
                  "pending": 1604897123
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.\n* `\"Profile Name not unique.\"` - The Profile Name is not unique.\n* `\"Profile Name reserved.\"` - The Profile Name is reserved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/profile/cfg/setting": {
      "post": {
        "operationId": "profileCfgSetting",
        "tags": [
          "Profile Management"
        ],
        "summary": "Change a Configuration Setting on a profile.",
        "description": "# Usage\n\nAllows all devices, associated to a profile, access to the internet to\nbe paused.  Either for a timed period, or indefinitely, or for\nsafesearch to be enforced, or youtube to be restricted, as required.\n\n## Parameters\n  - **id**: The unique id of the profile.\n  - **youtube-restricted**: True, youtube is restricted.  False,\n  unrestricted.\n  - **safesearch**: True, search engine safe search enforced.  False,\n  unrestricted.\n  - **internet-pause**: The time when we \"unpause\" internet.  If this is in the\n  past, then by definition internet is enabled.  To pause indefinitely,\n  set to -1.\n  - **adult-block**: True, adult content is blocked. False, it is not blocked.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "youtube-restricted": {
                    "type": "boolean",
                    "nullable": true,
                    "default": false
                  },
                  "safesearch": {
                    "type": "boolean",
                    "nullable": true,
                    "default": false
                  },
                  "adult-block": {
                    "type": "boolean",
                    "nullable": true,
                    "default": false
                  },
                  "internet-pause": {
                    "$ref": "#/components/schemas/epoch-timestamp"
                  }
                }
              },
              "examples": {
                "pause": {
                  "summary": "Pausing the internet",
                  "value": {
                    "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                    "internet-pause": 1619533887
                  }
                },
                "youtube-restricted": {
                  "summary": "Restricting YouTube",
                  "value": {
                    "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                    "youtube-restricted": true
                  }
                },
                "safesearch": {
                  "summary": "Setting Safe Search active",
                  "value": {
                    "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                    "safesearch": true
                  }
                },
                "adult-block": {
                  "summary": "Block Adult Content",
                  "value": {
                    "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                    "adult-block": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, The profiles internet access is paused until the time set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileCfgPending"
                },
                "example": {
                  "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                  "adapter": "d46cb964-4a40-43ac-87f6-cdefa19fa121",
                  "name": "Rugrats",
                  "icon": "rugrats.ico",
                  "settings": {
                    "youtube-restricted": false,
                    "safesearch": false,
                    "internet-pause": -1,
                    "bedtime": {
                      "school": 1290,
                      "other": -1,
                      "school-nights": [
                        true,
                        true,
                        true,
                        true,
                        false,
                        false,
                        true
                      ]
                    },
                    "bedtime-delay": 45
                  },
                  "since": 1604896473,
                  "pending": 1604897123
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.\n* `\"Pause time in the past.\"` - Can't pause into the past.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/profile/usage": {
      "get": {
        "operationId": "profileUsage",
        "tags": [
          "Profile Management"
        ],
        "summary": "Get profile data usage.",
        "description": "# Usage\n\nGenerates a list of data usage values for a profile, at a specified\nresolution.  Profile usage is a synthetic aggregate of all device usage,\nso, for example, if a high volume device is moved between profiles, the\nold profiles usage will decrease by the devices usage, and the new profile\nof the device will increase its usage by the same amount.\n\n## Parameters\n  - **id**: The Unique profile ID.",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "description": "The unique profile id."
          },
          {
            "in": "query",
            "name": "resolution",
            "schema": {
              "type": "string",
              "enum": [
                "Hourly",
                "Daily",
                "Weekly",
                "Monthly"
              ],
              "default": "Hourly"
            },
            "description": "The time resolution to report. Hourly is hourly, Daily is 24 hours.\nWeekly is 7 days and Monthly is the full month aligned to the\nbilling period.  If not specified the resolution is \"Hourly\"."
          },
          {
            "in": "query",
            "name": "start",
            "schema": {
              "$ref": "#/components/schemas/epoch-timestamp"
            },
            "description": "The start of the reporting window.  If not specified, defaults to\nthe oldest data on record for the device."
          },
          {
            "in": "query",
            "name": "end",
            "schema": {
              "$ref": "#/components/schemas/epoch-timestamp"
            },
            "description": "The end of the reporting window.  If not specified, defaults to\nnow."
          }
        ],
        "responses": {
          "200": {
            "description": "Success, The profile data usage is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceUsageHistory"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/device/list": {
      "get": {
        "operationId": "deviceList",
        "tags": [
          "Device Management"
        ],
        "summary": "Lists all devices and their associated Adapter/Profile.",
        "description": "# Usage\n\nGenerates a list of either, all devices associated with the client, a\nspecific device, all devices on a profile, or all devices on an adapter.\n\n## Parameters\n  - **id**: Optional. This can be either:\n    - The Unique ID of an Adapter: Will return all devices on that\n    adapter.\n    - The Unique ID of a Profile: Will return all devices attached to\n    that profile.\n    - The Unique ID of a device, will return that 1 device.\n    If no id is specified, all devices associated with the clients\n    account will be returned.",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "description": "Either the unique id of a adapter, profile or device."
          }
        ],
        "responses": {
          "200": {
            "description": "Success, The device details, filtered as requested.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Devices"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/device/assign": {
      "post": {
        "operationId": "deviceAssign",
        "tags": [
          "Device Management"
        ],
        "summary": "Assign a device to a Profile.",
        "description": "# Usage\n\nAssigns a device to a profile.  Can only assign devices to profiles that\nexist associated with the same adapter.\n\n## Parameters\n  - **id**: The unique id of the device we are associating with the profile.\n  - **profile**: The unique id of the profile we are assigning the\n  device to.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "profile"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "profile": {
                    "$ref": "#/components/schemas/uuid"
                  }
                },
                "example": {
                  "id": "d46cb964-4a40-43ac-87f6-cdefa19fa121",
                  "profile": "66f7346a-48af-4614-bd7b-6c17093d75e3"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, The device was assigned to the profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/device/usage": {
      "get": {
        "operationId": "deviceUsage",
        "tags": [
          "Device Management"
        ],
        "summary": "Get device data usage.",
        "description": "# Usage\n\nGenerates a list of data usage values for a device, at a specified resolution.\n\n## Parameters\n  - **id**: The Unique device ID.",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "description": "The unique device id."
          },
          {
            "in": "query",
            "name": "resolution",
            "schema": {
              "type": "string",
              "enum": [
                "Hourly",
                "Daily",
                "Weekly",
                "Monthly"
              ],
              "default": "Hourly"
            },
            "description": "The time resolution to report. Hourly is hourly, Daily is 24 hours.\nWeekly is 7 days and Monthly is the full month between billing\nperiods (and aligned to those periods).  If not specified the\nresolution is \"Hourly\""
          },
          {
            "in": "query",
            "name": "start",
            "schema": {
              "$ref": "#/components/schemas/epoch-timestamp"
            },
            "description": "The start of the reporting window.  If not specified, defaults to\nthe oldest data on record for the device."
          },
          {
            "in": "query",
            "name": "end",
            "schema": {
              "$ref": "#/components/schemas/epoch-timestamp"
            },
            "description": "The end of the reporting window.  If not specified, defaults to\nnow."
          }
        ],
        "responses": {
          "200": {
            "description": "Success, The device data usage is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceUsageHistory"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/device/name": {
      "post": {
        "operationId": "deviceName",
        "tags": [
          "Device Management"
        ],
        "summary": "Set one or more device name field over-rides to the clients choice.",
        "description": "# Usage\n\nAssigns a device to a profile.  Can only assign devices to profiles that\nexist associated with the same adapter.\n\n## Parameters\n  - **id**: The unique id of the device we are associating with the profile.\n  - **name**: Optional, the name preferred by the client.\n  - **type**: Optional, the device type preferred by the client.\n  - **manufacturer**: Optional, the manufacturer preferred by the client.\n\n  The call may specify one or more name fields, name fields that are\n  present are set.  Ones that are not present are cleared and default\n  back to the system assigned names.  If a name needs to be changed and\n  the others remain, set all name fields.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid"
                  },
                  "name": {
                    "$ref": "#/components/schemas/device-name"
                  },
                  "type": {
                    "$ref": "#/components/schemas/device-name"
                  },
                  "manufacturer": {
                    "$ref": "#/components/schemas/device-name"
                  }
                },
                "example": {
                  "id": "d46cb964-4a40-43ac-87f6-cdefa19fa121",
                  "name": "My Iphone",
                  "type": "Iphone 13",
                  "manufacturer": "Apple"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, The device was assigned to the profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                },
                "example": {
                  "id": "e22cfd99-44e5-4c93-8cad-3185c623cc25",
                  "adapter": "cd73b915-89a4-4971-9d86-bce91786b12a",
                  "profile": "66f7346a-48af-4614-bd7b-6c17093d75e3",
                  "mac": "00-00-5E-DF-98-EB",
                  "name": "Unknown Iphone",
                  "type": "Unknown",
                  "manufacturer": "Unknown",
                  "ip": {
                    "ip4": "192.168.0.55",
                    "ip6": "2001:db8:85a3::8a2e:370:7334"
                  },
                  "online": true,
                  "online_since": 1587732975,
                  "discovered": 1587732975,
                  "cfg": {
                    "vpn": {
                      "state": false,
                      "since": 1587732975
                    },
                    "adblocking": {
                      "state": false,
                      "since": 1587732975
                    },
                    "device-protection": {
                      "state": false,
                      "since": 1587732975
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/device/setting": {
      "post": {
        "operationId": "deviceSetting",
        "tags": [
          "Device Management"
        ],
        "summary": "Set device setting.",
        "description": "# Usage\n\nSets the state of a particular device setting.\n\n## Parameters\n  - **id**: The unique id of the device.\n  - **service**: The service we are configuring\n    - **\"vpn\"** : Set the VPN On/Off\n    - **\"adblocking\"** : Set Ad-Blocking On/Off\n    - **\"device-protection\"** : Set Device Protection On/Off\n    - **\"internet-pause\"** : Set the duration of a pause to internet access.\n  - **setting**: The state we want the configuration to become.\n    - For vpn/adblocking/device-protection - true or false\n    - For internet-pause - The time to pause until, -1 = pause\n    indefinitely. 0 = Dont pause.\n\n  All field must be present in the call.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DeviceSetBooleanCfg"
                  },
                  {
                    "$ref": "#/components/schemas/DeviceSetPauseCfg"
                  }
                ]
              },
              "examples": {
                "bool": {
                  "value": {
                    "id": "e22cfd99-44e5-4c93-8cad-3185c623cc25",
                    "service": "VPN",
                    "setting": true
                  }
                },
                "pause": {
                  "value": {
                    "id": "e22cfd99-44e5-4c93-8cad-3185c623cc25",
                    "service": "Internet-Pause",
                    "setting": -1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, The device config change was queued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device-Settings-Reply"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/device/types": {
      "get": {
        "operationId": "deviceTypes",
        "tags": [
          "Device Management"
        ],
        "summary": "Lists all device types and their icons.",
        "description": "# Usage\n\nGenerates a list of all known device types along with their icons and\na device type group classifier.\n\n## Parameters\n  None.",
        "responses": {
          "200": {
            "description": "Success, The device types list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device_Types"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body\nError.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    }
  }
}