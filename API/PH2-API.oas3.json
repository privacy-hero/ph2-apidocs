{
  "openapi": "3.0.2",
  "info": {
    "title": "Privacy Hero 2 - Mothership API",
    "version": "0.0.7",
    "description": "The complete backend API for the Privacy Hero 2.\n\nThe backend server infrastructure is known as the *\"Mothership\"*\n\nThis API Documentation may be viewed at:\n  - **[PrivacyHero2 API - RapiDoc/Pdf](.)**\n  - [PrivacyHero2 API - Swagger UI](./index-swui.html)\n  - [PrivacyHero2 API - Redocly](./index-redocly.html)\n  - [Download API JSON](./API/PH2-API.oas3.json)",
    "license": {
      "name": "Copyright Â© 2020 HelpOn Inc. All Rights Reserved",
      "url": "http://privacy-hero.github.io/ph2-apidocs/LICENSE.html"
    },
    "contact": {
      "name": "API Support (Steven Johnson)",
      "url": "http://www.example.com/support",
      "email": "sakurainds@gmail.com"
    }
  },
  "servers": [
    {
      "url": "https://api2.privacyhero.com/{stage}",
      "description": "The API deployment URL.",
      "variables": {
        "stage": {
          "enum": [
            "dev",
            "qa",
            "prod"
          ],
          "default": "prod",
          "description": "Deployment Stages"
        }
      }
    },
    {
      "url": "https://{awsid}.execute-api.us-east-1.amazonaws.com/dev",
      "description": "Development URL",
      "variables": {
        "awsid": {
          "default": "999999",
          "description": "The ID for your dev AWS deployment"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "email-address": {
        "type": "string",
        "format": "email",
        "minLength": 6,
        "maxLength": 320,
        "pattern": "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\\\x01-\\\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])",
        "example": "example@email.com",
        "description": "An email address"
      },
      "url-http-s": {
        "type": "string",
        "format": "URL",
        "minLength": 1,
        "maxLength": 2000,
        "nullable": true,
        "pattern": "^(?:(?:http(s)?:\\/\\/)|(?:\\./))?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$",
        "description": "A URL\",\"including relative references.  Will accept http/https and\nrelative urls.",
        "example": "./relative.url"
      },
      "Ack": {
        "type": "object",
        "required": [
          "msg"
        ],
        "additionalProperties": false,
        "properties": {
          "msg": {
            "type": "string",
            "format": "Text Message",
            "nullable": true,
            "minLength": 0,
            "maxLength": 1024,
            "pattern": "^([\\w\\W])*$",
            "example": "OK."
          }
        }
      },
      "Nack": {
        "type": "object",
        "required": [
          "error"
        ],
        "additionalProperties": false,
        "properties": {
          "error": {
            "type": "string",
            "format": "Text Message",
            "nullable": true,
            "minLength": 0,
            "maxLength": 1024,
            "pattern": "^([\\w\\W])*$",
            "example": "Unauthorized"
          }
        }
      },
      "GW_NegAuth": {
        "type": "object",
        "required": [
          "message"
        ],
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string",
            "format": "Text Message",
            "nullable": true,
            "minLength": 0,
            "maxLength": 1024,
            "pattern": "^([\\w\\W])*$",
            "example": "User is not authorized to access this resource"
          }
        }
      },
      "GW_InternalError": {
        "type": "object",
        "required": [
          "message"
        ],
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string",
            "format": "Text Message",
            "nullable": true,
            "minLength": 0,
            "maxLength": 1024,
            "pattern": "^([\\w\\W])*$",
            "example": null
          }
        }
      },
      "epoch-timestamp": {
        "type": "integer",
        "format": "int64",
        "minimum": 1587732975,
        "maximum": 4743406575,
        "nullable": true,
        "description": "A Time\",\"expressed as seconds since Jan 01 1970. (UTC). **NULL** = unknown",
        "example": 1587732975
      },
      "ph2-bearer-token": {
        "type": "string",
        "format": "JWT",
        "description": "Privacy Hero 2 API Bearer Token (Based on JWT)",
        "minLength": 64,
        "maxLength": 1024,
        "pattern": "^([A-Za-z0-9-_])+\\.([A-Za-z0-9-_])+(\\.[A-Za-z0-9-_]+)?$",
        "example": "AeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1MTYyMzkwMjJ9AB"
      },
      "password": {
        "type": "string",
        "format": "password",
        "minLength": 8,
        "maxLength": 64,
        "example": "my p455w0rd",
        "pattern": "^[ -~]*$"
      },
      "Authorized": {
        "type": "object",
        "description": "**bearer**: The Client Authorization Bearer token required to be sent\nin the `Authorization: Bearer` header of all API calls that are called\non behalf of the Client.\n**renew**: The Epoch Time, at which user access will expire with this\ntoken. Renew before this time, for uninterrupted access.  Renewal may\noccur up until `exp` time.\n**exp**: The Epoch Time, at which the token will completely expire and\nmay not be used for renewal.  After this time the user must\nre-authenticate to get a new bearer token.",
        "required": [
          "bearer",
          "renew",
          "exp"
        ],
        "additionalProperties": false,
        "properties": {
          "bearer": {
            "$ref": "#/components/schemas/ph2-bearer-token"
          },
          "renew": {
            "$ref": "#/components/schemas/epoch-timestamp"
          },
          "exp": {
            "$ref": "#/components/schemas/epoch-timestamp"
          }
        }
      },
      "admin-as-email-address": {
        "type": "string",
        "format": "admin:client email",
        "minLength": 6,
        "maxLength": 320,
        "pattern": "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\\\x01-\\\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\]):(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\\\x01-\\\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]\\:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])",
        "example": "admin@privacyhero.com:example@email.com",
        "description": "An email address"
      },
      "mac": {
        "type": "string",
        "format": "EUI-48",
        "pattern": "^([0-9a-fA-F]{2}([:-]))(([0-9a-fA-F]{2})\\2){4}([0-9a-fA-F]{2})$",
        "maxLength": 17,
        "minLength": 17,
        "description": "An EUI-48 formatted mac address.",
        "example": "00-00-5E-DF-98-EB"
      },
      "url": {
        "type": "string",
        "format": "URL",
        "minLength": 1,
        "maxLength": 2000,
        "nullable": true,
        "pattern": "^(?:(?:https:\\/\\/)|(?:\\./))?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$",
        "description": "A URL\",\"including relative references.  Will only accept https\nrelative urls.",
        "example": "./relative.url"
      },
      "activation-code": {
        "type": "string",
        "pattern": "^....-....$",
        "minLength": 9,
        "maxLength": 9,
        "description": "Adapter/Router activation code. Note: pattern and length are\nplaceholders until the format is finalized.",
        "example": "????-????"
      },
      "adapter-type": {
        "type": "string",
        "enum": [
          "Router-V1"
        ],
        "description": "The hardware type of the adapter/router."
      },
      "Adapter-Base": {
        "type": "object",
        "required": [
          "mac",
          "type",
          "desc"
        ],
        "additionalProperties": false,
        "properties": {
          "mac": {
            "$ref": "#/components/schemas/mac"
          },
          "type": {
            "$ref": "#/components/schemas/adapter-type"
          },
          "desc": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[\\S ]+$",
            "description": "A description of the hardware of the adapter/router.",
            "example": "Privacy Hero 2 - Router V1"
          }
        }
      },
      "Adapter-Unassociated": {
        "type": "object",
        "required": [
          "adapter",
          "since"
        ],
        "additionalProperties": false,
        "properties": {
          "adapter": {
            "$ref": "#/components/schemas/Adapter-Base"
          },
          "since": {
            "$ref": "#/components/schemas/epoch-timestamp"
          }
        },
        "description": "* since - The time this adapter last came online."
      },
      "Adapter-Unassociated-Array": {
        "type": "array",
        "maxItems": 10,
        "items": {
          "$ref": "#/components/schemas/Adapter-Unassociated"
        }
      },
      "uuid": {
        "type": "string",
        "format": "UUID",
        "description": "Unique Identifier",
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$",
        "example": "cd73b915-89a4-4971-9d86-bce91786b12a"
      },
      "iso3166-country": {
        "type": "string",
        "format": "ISO3166 Code",
        "example": "US",
        "enum": [
          "AF",
          "AX",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AO",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "AZ",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BQ",
          "BA",
          "BW",
          "BV",
          "BR",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "CV",
          "KH",
          "CM",
          "CA",
          "KY",
          "CF",
          "TD",
          "CL",
          "CN",
          "CX",
          "CC",
          "CO",
          "KM",
          "CG",
          "CD",
          "CK",
          "CR",
          "CI",
          "HR",
          "CU",
          "CW",
          "CY",
          "CZ",
          "DK",
          "DJ",
          "DM",
          "DO",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "SZ",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GH",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "KP",
          "KR",
          "KW",
          "KG",
          "LA",
          "LV",
          "LB",
          "LS",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MO",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "ME",
          "MS",
          "MA",
          "MZ",
          "MM",
          "NA",
          "NR",
          "NP",
          "NL",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NG",
          "NU",
          "NF",
          "MK",
          "MP",
          "NO",
          "OM",
          "PK",
          "PW",
          "PS",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "BL",
          "SH",
          "KN",
          "LC",
          "MF",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "SN",
          "RS",
          "SC",
          "SL",
          "SG",
          "SX",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "GS",
          "SS",
          "ES",
          "LK",
          "SD",
          "SR",
          "SJ",
          "SE",
          "CH",
          "SY",
          "TW",
          "TJ",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TR",
          "TM",
          "TC",
          "TV",
          "UG",
          "UA",
          "AE",
          "GB",
          "US",
          "UM",
          "UY",
          "UZ",
          "VU",
          "VE",
          "VN",
          "VG",
          "VI",
          "WF",
          "EH",
          "YE",
          "ZM",
          "ZW"
        ],
        "description": "an ISO3166 country code"
      },
      "iana-timezone": {
        "type": "string",
        "format": "IANA Timezone",
        "description": "IANA Timezone name.",
        "minLength": 3,
        "maxLength": 44,
        "pattern": "^([A-Za-z-_]){1,14}\\/([A-Za-z-_]){1,14}(\\/([A-Za-z-_]){1,14})?$",
        "default": "Etc/UTC",
        "example": "America/Chicago"
      },
      "ip4": {
        "type": "string",
        "format": "IPv4 Address",
        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
        "minLength": 7,
        "maxLength": 15,
        "description": "An IP4 formatted IP Address",
        "example": "192.168.0.55"
      },
      "ip6": {
        "type": "string",
        "format": "IPv6 Address",
        "pattern": "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$",
        "minLength": 3,
        "maxLength": 45,
        "description": "An IP6 formatted IP Address",
        "example": "2001:db8:85a3::8a2e:370:7334"
      },
      "state": {
        "type": "object",
        "required": [
          "state",
          "since"
        ],
        "additionalProperties": false,
        "properties": {
          "state": {
            "type": "boolean",
            "nullable": true,
            "description": "**true**=Active, **false**=Inactive, **null**=Unknown"
          },
          "since": {
            "$ref": "#/components/schemas/epoch-timestamp"
          }
        },
        "description": "The current known value of the state, and the time that it changed."
      },
      "wifi-settings": {
        "type": "object",
        "description": "Settings for an individual wifi network",
        "required": [
          "enabled",
          "ssid",
          "key"
        ],
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "is the wifi network enabled.",
            "default": true
          },
          "ssid": {
            "type": "string",
            "format": "ssid",
            "minLength": 1,
            "maxLength": 32,
            "pattern": "^[^!#;+\\]\\/\"\\t][^+\\]\\/\"\\t]{0,30}[^ !#;+\\]\\/\"\\t]$|^[^ !#;+\\]\\/\"\\t]$",
            "description": "The SSID of the wifi network",
            "default": "PrivacyHero2",
            "example": "PrivacyHero2"
          },
          "key": {
            "type": "string",
            "format": "WPA-PSK passphrase",
            "minLength": 8,
            "maxLength": 63,
            "pattern": "^[ -~]*$",
            "nullable": true,
            "default": "r4nd0m k3y",
            "example": "r4nd0m k3y",
            "description": "The WPA-PSK passphrase to secure the network. **null**=Open Wifi\nNetwork"
          }
        }
      },
      "datacap": {
        "type": "object",
        "description": "A per-month Data Cap.",
        "additionalProperties": false,
        "properties": {
          "tx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0,
            "maximum": 9999999999999,
            "nullable": true,
            "description": "Transmit Data Cap in Bytes per month. **null** = no tx data cap"
          },
          "rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0,
            "maximum": 9999999999999,
            "nullable": true,
            "description": "Receive Data Cap in Bytes per month. **null** = no rx data cap"
          },
          "combined": {
            "type": "boolean",
            "default": false,
            "description": "IF **true** then the tx data cap is the combined tx+rx data cap."
          }
        }
      },
      "Adapter-Settings": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "settings": {
            "type": "object",
            "description": "The settings of the Adapter/Router.",
            "additionalProperties": false,
            "properties": {
              "current": {
                "type": "object",
                "description": "The current settings.",
                "additionalProperties": false,
                "properties": {
                  "wifi": {
                    "$ref": "#/components/schemas/wifi-settings"
                  },
                  "data-cap": {
                    "$ref": "#/components/schemas/datacap"
                  },
                  "vpn": {
                    "type": "boolean",
                    "description": "VPN: **true**=Enabled, **false**=Disabled."
                  },
                  "adblock": {
                    "type": "boolean",
                    "description": "Ad Blocking: **true**=Enabled, **false**=Disabled."
                  },
                  "streaming": {
                    "type": "boolean",
                    "description": "Streaming Relocation: **true**=Enabled, **false**=Disabled"
                  },
                  "malware": {
                    "type": "boolean",
                    "description": "Malware/Phishing protection: **true**=Enabled, **false**=Disabled"
                  }
                }
              },
              "pending": {
                "type": "object",
                "description": "The settings we are attempting to set on the adapter.",
                "additionalProperties": false,
                "properties": {
                  "wifi": {
                    "$ref": "#/components/schemas/wifi-settings"
                  },
                  "data-cap": {
                    "$ref": "#/components/schemas/datacap"
                  },
                  "vpn": {
                    "type": "boolean",
                    "description": "VPN: **true**=enabling. **false**=disabling."
                  },
                  "adblock": {
                    "type": "boolean",
                    "description": "Ad Blocking: **true**=enabling. **false**=disabling."
                  },
                  "streaming": {
                    "type": "boolean",
                    "description": "Streaming Relocation: **true**=enabling. **false**=disabling."
                  },
                  "malware": {
                    "type": "boolean",
                    "description": "Malware/Phishing protection: **true**=enabling, **false**=disabling."
                  }
                }
              }
            }
          }
        }
      },
      "speed-diag": {
        "type": "object",
        "description": "Speed Diagnostic Results. Negative values are estimated run time in seconds.",
        "required": [
          "speed",
          "when"
        ],
        "additionalProperties": false,
        "properties": {
          "speed": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 2147483647,
            "nullable": true,
            "description": "**+VE** = bits per second speed result. **NULL** = Unknown. **-VE** = Test running."
          },
          "when": {
            "$ref": "#/components/schemas/epoch-timestamp"
          }
        }
      },
      "wan-vpn-speed-diag": {
        "type": "object",
        "description": "Speed Diagnostic result for WAN and VPN Network",
        "required": [
          "wan",
          "vpn"
        ],
        "additionalProperties": false,
        "properties": {
          "wan": {
            "$ref": "#/components/schemas/speed-diag"
          },
          "vpn": {
            "$ref": "#/components/schemas/speed-diag"
          }
        }
      },
      "latency-diag": {
        "type": "object",
        "description": "latency diagnostic result",
        "required": [
          "latency",
          "average",
          "when"
        ],
        "additionalProperties": false,
        "properties": {
          "latency": {
            "type": "integer",
            "format": "uint16",
            "nullable": true,
            "minimum": 1,
            "maximum": 2000,
            "description": "**+VE** = millisecond latency result. **NULL** = Unknown."
          },
          "average": {
            "type": "integer",
            "format": "uint32",
            "nullable": true,
            "minimum": 1,
            "maximum": 2000,
            "description": "**+VE** = millisecond latency result. **NULL** = Unknown."
          },
          "when": {
            "$ref": "#/components/schemas/epoch-timestamp"
          }
        }
      },
      "wan-vpn-latency-diag": {
        "type": "object",
        "description": "Latency Diagnostic results for the WAN and VPN Networks",
        "required": [
          "wan",
          "vpn"
        ],
        "additionalProperties": false,
        "properties": {
          "wan": {
            "$ref": "#/components/schemas/latency-diag"
          },
          "vpn": {
            "$ref": "#/components/schemas/latency-diag"
          }
        }
      },
      "Adapter": {
        "additionalProperties": false,
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "required": [
              "AdapterID"
            ],
            "additionalProperties": false,
            "properties": {
              "AdapterID": {
                "$ref": "#/components/schemas/uuid"
              }
            }
          },
          {
            "$ref": "#/components/schemas/Adapter-Base"
          },
          {
            "type": "object",
            "required": [
              "location",
              "timezone",
              "ip",
              "registered",
              "state"
            ],
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "nullable": true,
                "default": null,
                "minLength": 0,
                "maxLength": 64,
                "pattern": "^[\\S ]+$",
                "example": "Home Office Router",
                "description": "The Name assigned to the Adapter/Router by the Client."
              },
              "location": {
                "$ref": "#/components/schemas/iso3166-country"
              },
              "timezone": {
                "$ref": "#/components/schemas/iana-timezone"
              },
              "ip": {
                "type": "object",
                "required": [
                  "lan",
                  "wan",
                  "vpn"
                ],
                "description": "The current or last known IP addresses of the adapter/router.",
                "additionalProperties": false,
                "properties": {
                  "lan": {
                    "type": "object",
                    "required": [
                      "ip4"
                    ],
                    "description": "The Local network IP addresses.",
                    "additionalProperties": false,
                    "properties": {
                      "ip4": {
                        "$ref": "#/components/schemas/ip4"
                      },
                      "ip6": {
                        "$ref": "#/components/schemas/ip6"
                      }
                    }
                  },
                  "wan": {
                    "type": "object",
                    "required": [
                      "ip4"
                    ],
                    "description": "The ISP Native IP addresses.",
                    "additionalProperties": false,
                    "properties": {
                      "ip4": {
                        "$ref": "#/components/schemas/ip4"
                      },
                      "ip6": {
                        "$ref": "#/components/schemas/ip6"
                      }
                    }
                  },
                  "vpn": {
                    "type": "object",
                    "required": [
                      "ip4"
                    ],
                    "description": "The VPN endpoint IP addresses.",
                    "additionalProperties": false,
                    "properties": {
                      "ip4": {
                        "$ref": "#/components/schemas/ip4"
                      },
                      "ip6": {
                        "$ref": "#/components/schemas/ip6"
                      }
                    }
                  }
                }
              },
              "registered": {
                "$ref": "#/components/schemas/epoch-timestamp"
              },
              "state": {
                "type": "object",
                "description": "The current state of the Adapter/Router.",
                "required": [
                  "online",
                  "vpn",
                  "ad-blocking",
                  "stream-relocation",
                  "malware-phising"
                ],
                "additionalProperties": false,
                "properties": {
                  "online": {
                    "$ref": "#/components/schemas/state"
                  },
                  "vpn": {
                    "$ref": "#/components/schemas/state"
                  },
                  "ad-blocking": {
                    "$ref": "#/components/schemas/state"
                  },
                  "stream-relocation": {
                    "$ref": "#/components/schemas/state"
                  },
                  "malware-phising": {
                    "$ref": "#/components/schemas/state"
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/Adapter-Settings"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "diags": {
                "type": "object",
                "description": "Results from the last and best diagnostic tests",
                "additionalProperties": false,
                "properties": {
                  "speed_test": {
                    "type": "object",
                    "description": "Network Speed test results",
                    "additionalProperties": false,
                    "properties": {
                      "tx": {
                        "type": "object",
                        "description": "Transmit Speed Diagnostics",
                        "additionalProperties": false,
                        "properties": {
                          "last": {
                            "$ref": "#/components/schemas/wan-vpn-speed-diag"
                          },
                          "best": {
                            "$ref": "#/components/schemas/wan-vpn-speed-diag"
                          }
                        }
                      },
                      "rx": {
                        "type": "object",
                        "description": "Receive Speed Diagnostics",
                        "additionalProperties": false,
                        "properties": {
                          "last": {
                            "$ref": "#/components/schemas/wan-vpn-speed-diag"
                          },
                          "best": {
                            "$ref": "#/components/schemas/wan-vpn-speed-diag"
                          }
                        }
                      }
                    }
                  },
                  "ping_test": {
                    "type": "object",
                    "description": "ping test latency results",
                    "additionalProperties": false,
                    "properties": {
                      "last": {
                        "$ref": "#/components/schemas/wan-vpn-latency-diag"
                      },
                      "best": {
                        "$ref": "#/components/schemas/wan-vpn-latency-diag"
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "Adapters": {
        "type": "array",
        "maxItems": 10,
        "description": "An Array of Adapter Records.",
        "items": {
          "$ref": "#/components/schemas/Adapter"
        }
      },
      "adapter-name": {
        "type": "string",
        "format": "text",
        "nullable": true,
        "description": "The name of an adapter.",
        "minLength": 0,
        "maxLength": 64,
        "pattern": "^[\\w\\W]+$",
        "example": "Home Office Adapter"
      },
      "stream-setting": {
        "type": "object",
        "description": "Settings for an individual relocatable stream",
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "If the stream relocation is enabled for this service or not."
          },
          "country": {
            "$ref": "#/components/schemas/iso3166-country"
          }
        }
      },
      "streams": {
        "type": "array",
        "maxItems": 1000,
        "description": "List of streaming services",
        "items": {
          "type": "object",
          "description": "Streaming Services",
          "required": [
            "id",
            "name",
            "countries",
            "portable"
          ],
          "additionalProperties": false,
          "properties": {
            "id": {
              "$ref": "#/components/schemas/uuid"
            },
            "name": {
              "type": "string",
              "minLength": 1,
              "maxLength": 64,
              "pattern": "^[\\S ]+$",
              "description": "Name of the streaming service",
              "example": "Netflix"
            },
            "icon": {
              "$ref": "#/components/schemas/url"
            },
            "portable": {
              "type": "boolean",
              "description": "Is the service subscription able to be used in multiple countries?",
              "default": true
            },
            "countries": {
              "type": "object",
              "description": "List of all countries streaming service is available in.\n\n**proxy** countries may be used to proxy a stream to appear as if\nthe stream is being watched in that country.\n\n**non-proxy** are countries where the streaming service is\navailable but for which no proxy exists.  These can only be\nused if the Adapter is located in that country.",
              "additionalProperties": false,
              "properties": {
                "proxy": {
                  "type": "array",
                  "description": "List of countries which can be proxied.",
                  "maxItems": 256,
                  "items": {
                    "$ref": "#/components/schemas/iso3166-country"
                  }
                },
                "non-proxy": {
                  "type": "array",
                  "maxItems": 256,
                  "description": "List of countries which can not be proxied.",
                  "items": {
                    "$ref": "#/components/schemas/iso3166-country"
                  }
                }
              }
            },
            "settings": {
              "type": "object",
              "description": "Settings for the service",
              "required": [
                "current"
              ],
              "additionalProperties": false,
              "properties": {
                "current": {
                  "$ref": "#/components/schemas/stream-setting"
                },
                "pending": {
                  "$ref": "#/components/schemas/stream-setting"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "clientToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Client Auth Token as generated by this API"
      },
      "appKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY",
        "description": "Application Unique API Key, as distributed to the APP Developers. Each app\nhas a unique API Key.  It only needs to be included in messages that\nrequire it."
      }
    },
    "responses": {
      "401": {
        "description": "The Clients Bearer Token is invalid or not recognized.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Nack"
            },
            "example": {
              "error": "Invalid Credentials."
            }
          }
        },
        "headers": {
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "enum": [
                "Bearer realm=api2.privacyhero.com"
              ],
              "default": "Bearer realm=api2.privacyhero.com",
              "example": "Bearer realm=api2.privacyhero.com",
              "description": "indicates the authentication scheme(s) and parameters\napplicable to the target resource."
            }
          }
        }
      },
      "403": {
        "description": "Invalid Client Token, could not authorize api access.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GW_NegAuth"
            }
          }
        }
      },
      "404": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Nack"
            },
            "example": {
              "error": "Not Found"
            }
          }
        }
      },
      "415": {
        "description": "Unsupported Media Type",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Nack"
            },
            "example": {
              "error": "Unsupported Media Type"
            }
          }
        }
      },
      "429": {
        "description": "Too many requests",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Nack"
            },
            "example": {
              "error": "Too many requests"
            }
          }
        }
      },
      "500": {
        "description": "An Internal server error occurred.  Operation failed.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GW_InternalError"
            }
          }
        }
      },
      "default": {
        "description": "Unspecified Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Nack"
            },
            "example": {
              "error": "Unspecified Error"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Account Management",
      "description": "Operations related to Account Creation and Management"
    },
    {
      "name": "Client Management",
      "description": "Operations related to the Client"
    },
    {
      "name": "Adapter Management",
      "description": "Operations related to Adapter Management"
    },
    {
      "name": "Profile Management",
      "description": "Operations related to Profile Management"
    },
    {
      "name": "Device Management",
      "description": "Operations related to Device Management"
    },
    {
      "name": "Streaming Relocation Management",
      "description": "Operations related to Streaming Services and Relocation"
    }
  ],
  "paths": {
    "/v1/auth/newcustomer": {
      "post": {
        "operationId": "authNewCustomer",
        "tags": [
          "Account Management"
        ],
        "summary": "Request New Customer/Forgotten Password",
        "description": "If the email address supplied in the message is not registered in the\nsystem.  Then this message is processed as a \"New Customer\nRegistration\".  IF the email does exist, then this messages is processed\nas a \"Existing Customer forgot password\".\n\nThe ONLY difference in the processing is the form of the email which is\nsent to the customer.  Either acknowledging their request for a new\naccount, OR acknowledging their request to change their password.\n\nUpon receipt of this message, an email will be sent to the supplied\nemail address.  It will contain instructions to click a provided link in\nthe message which will act as a callback to the initiating application.\n\nThe URL passed as the callback must be able to accept three parameter in\nthe url of the form:\n  - verify=\\<verification token\\>\n  - pw=false/true\n  - exp=\\<time>\\\n\n`verify` is the verification token to be sent back to the API server by\nthe app on the `confirmcustomer` call.\n\n`pw` specifies is an initial password must be prompted from the Client,\nand supplied to the API in the `confirmcustomer` call.\n\n`exp` specifies when the verification token will expire.  Any call to\n`confirmcustomer` after this time will fail.\n\nMust have a valid appToken for the request to be processed.\n\n**email**: The email address the customer wants the Account email to be\ndirected to.\n**callback**: The complete URL, minus parameters, which is embedded in the email sent\nto the customer to confirm their account creation. It must point to the\napp which instigated this request.\n\nSee: [New Customer Message Flow](./API/flows/NewCustomer-Flow.html)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "callback"
                ],
                "additionalProperties": false,
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/email-address"
                  },
                  "callback": {
                    "$ref": "#/components/schemas/url-http-s"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "appKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "The message was accepted, and an email was sent to the\nusers provided email address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Email sent to user, OK."
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.  Possible errors are:\n* `\"Internal Server Error.\"` - Fatal uncategorized error in server.\n* `\"Required Parameters missing or malformed.\"` - JSON Message Body Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Internal Server Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/{callbackpath}": {
      "post": {
        "operationId": "appCallback",
        "tags": [
          "Account Management"
        ],
        "summary": "Callback to App that requested a New Customer.",
        "description": "This is the format of the callback that will be presented to the\ncustomer in their confirmation email.\n\nIt is linked to the instigating App, so that the App can continue\nthe process of creating the new account.",
        "servers": [
          {
            "url": "https://www.myapp.url/",
            "description": "The link which can open the app which called\n/auth/newcustomer.\n- exp=\\<time>\\"
          }
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "callbackpath",
            "schema": {
              "$ref": "#/components/schemas/url-http-s"
            },
            "description": "Any path required by the application callback. The base URL and callback path are derived from the `callback` parameter from the `newcustomer` API Call."
          },
          {
            "in": "query",
            "name": "verify",
            "required": true,
            "schema": {
              "type": "string",
              "format": "token",
              "pattern": "^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$",
              "maxLength": 1000,
              "example": "abcdefghijklmnopqrstuzwxyz12345.67890ABCDEFGHIJKMLNOPQRSTUVWXYZ"
            },
            "description": "The New Customer confirmation token."
          },
          {
            "in": "query",
            "name": "exp",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/epoch-timestamp"
            },
            "description": "The Time, being the Epoch Time, after which the verification token will become invalid.\nEpoch Time is the number of seconds that have elapsed since the time 00:00:00 UTC on 1 January 1970, minus leap seconds"
          },
          {
            "in": "query",
            "name": "pw",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "If true, the user must be prompted to create a password and the password must be sent in the `confirmcustomer` API call. If it is not present, it defaults to `true`"
          }
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "The message was accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                }
              }
            }
          },
          "400": {
            "description": "The token expired before the link was used.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                }
              }
            }
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/auth/confirmcustomer": {
      "post": {
        "operationId": "confirmCustomer",
        "tags": [
          "Account Management"
        ],
        "summary": "Confirm the New Customer Request",
        "description": "Confirms creation of the new account for a Customer, from the back link\nprovided by the email to the customer.\n\nMust have a valid appToken for the request to be processed.\n\n**verify**: The token from the callback which invoked this API call.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "verify"
                ],
                "additionalProperties": false,
                "properties": {
                  "verify": {
                    "$ref": "#/components/schemas/ph2-bearer-token"
                  },
                  "password": {
                    "$ref": "#/components/schemas/password"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "appKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "The message was accepted, and the account has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorized"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/auth/login": {
      "post": {
        "operationId": "login",
        "tags": [
          "Account Management"
        ],
        "summary": "Log a Client in to their account.",
        "description": "Logs a client in to their account, by validating their credentials\nand returning a Bearer token for API access.\n\nMust have a valid appToken for the request to be processed.\n\n**id**: The clients ID,  different clients will present different ID.\n  - Customer: Their email address\n  - Admin: Their email address\n  - Admin as Customer: \\<admin email\\>:\\<customer email\\>\n  - Router: MAC Address\n**pwd**: The shared secret used to identify the client.  Typically this\nis a password.  It is sent unencrypted/unhashed because the link is\nprotected from eaves dropping with https.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "pwd"
                ],
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/email-address"
                      },
                      {
                        "$ref": "#/components/schemas/admin-as-email-address"
                      },
                      {
                        "$ref": "#/components/schemas/mac"
                      }
                    ]
                  },
                  "pwd": {
                    "$ref": "#/components/schemas/password"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "appKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "The message was accepted, and the account has been logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorized"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "description": "The password or id is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Password Invalid"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/auth/renew": {
      "get": {
        "operationId": "authRenew",
        "tags": [
          "Account Management"
        ],
        "summary": "Renew a Client Authorization Token.",
        "description": "Causes the Authorization token attached to the API call\nto be renewed, and a new token returned.",
        "security": [
          {
            "clientToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The message was accepted, and the token has been renewed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorized"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/auth/chgpwd": {
      "post": {
        "operationId": "changePassword",
        "tags": [
          "Account Management"
        ],
        "summary": "Change a Clients password.",
        "description": "Causes the Clients password to be changed.\n\n**old**: The old password of the Client.\n**new**: The new password of the Client.",
        "security": [
          {
            "clientToken": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "old",
                  "new"
                ],
                "additionalProperties": false,
                "properties": {
                  "old": {
                    "$ref": "#/components/schemas/password"
                  },
                  "new": {
                    "$ref": "#/components/schemas/password"
                  }
                },
                "example": {
                  "old": "4n 0ld p455w0rd",
                  "new": "my n3w p455w0rd"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The password was changed OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorized"
                }
              }
            }
          },
          "400": {
            "description": "The new password is not secure enough.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Password must contain at least One UpperCase character, One\nLowerCase character, One Number and be at least 8 characters\nlong."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/auth/chgemail": {
      "post": {
        "operationId": "changeEmail",
        "tags": [
          "Account Management"
        ],
        "summary": "Change a Clients Email Address.",
        "description": "Causes the Clients Email Address to be changed.\nWill also cause an email to be sent to the both the\nold email address, advising the client it is being changed.\nAND, to the new email address to confirm the address is valid.\n\n**email**: The new email address to change to.\n**callback**: The complete URL, minus parameters, which is embedded in\n  the email sent to the customer to confirm their account creation. It\n  must point to the app which instigated this request.",
        "security": [
          {
            "clientToken": [],
            "appKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "callback"
                ],
                "additionalProperties": false,
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/email-address"
                  },
                  "callback": {
                    "$ref": "#/components/schemas/url-http-s"
                  }
                },
                "example": {
                  "email": "newemail@email.org",
                  "callback": "https://www.myapp.url/callback"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The email change was initiated.  Confirmation Emails sent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Emails sent to user, OK."
                }
              }
            }
          },
          "400": {
            "description": "The Email address is already in use by another Client.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Email address already used by another account."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/auth/delcustomer": {
      "post": {
        "operationId": "deleteCustomer",
        "tags": [
          "Account Management"
        ],
        "summary": "Delete a Customer Account.",
        "description": "Causes an email to be sent to the customer requiring them\nto confirm they wish to mark the account for deletion.\n\nThe Email contains the callback as an embedded link which\nwill call back into the initiating application.\n\n**password**: Optional, Clients Password. Only for systems using\npassword for authentication.\n\n**callback**: The complete URL, minus parameters, which is embedded in\nthe email sent to the customer to confirm their account creation. It\nmust point to the app which instigated this request.",
        "security": [
          {
            "clientToken": [],
            "appKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "callback"
                ],
                "additionalProperties": false,
                "properties": {
                  "password": {
                    "$ref": "#/components/schemas/password"
                  },
                  "callback": {
                    "$ref": "#/components/schemas/url"
                  }
                },
                "example": {
                  "password": "my 4w350m3 p455w0rd",
                  "callback": "https://www.myapp.url/callback"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Confirmation Email sent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Email sent to user, OK."
                }
              }
            }
          },
          "400": {
            "description": "The Password supplied does not match the Customers known password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Invalid Password."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/find": {
      "get": {
        "operationId": "adapterFind",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Find Unassociated adapters we can bind the client account to.",
        "description": "When an adapter is first installed, it is not linked to an account.\nThe client must add the adapter to their account, this function will\nreturn a list of adapters which are available to be associated.\n\nIt will either find all adapters on the same local network as the client\nconnection.  Or if that does not work, an adapter with a specific\nactivation code.",
        "security": [
          {
            "clientToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "required": false,
            "name": "code",
            "schema": {
              "$ref": "#/components/schemas/activation-code"
            },
            "description": "If not set, the function will look for all unassociated adapters\nthat share the internet connection of the client making the call.\n\nHowever, IF that fails, this can be set to a known activation code\nwhich will cause any adapter with the activation code which is not\ncurrently associated with an account to be returned.  Typically\nthis would be a single Adapter.  If no adapters are found, a \"200\"\nresponse will be generated, but the list of adapters will be empty."
          }
        ],
        "responses": {
          "200": {
            "description": "The list of all unclaimed adapters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Adapter-Unassociated-Array"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Some Error."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/claim": {
      "post": {
        "operationId": "adapterClaim",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Claim the specified adapter for the clients account.",
        "description": "Claims the specified adapter and associates it with the clients account.\nThe Claim can only succeed if the Adapter is not associated with an\naccount.\n\nThis API Call may also be used to replace an existing adapter, by\nspecifying the existing adapters AdapterID.  In which case, the existing\nadapter will be unassociated from the clients account and the newly\nclaimed adapter will replace it in its entirety.",
        "security": [
          {
            "clientToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "mac",
            "schema": {
              "$ref": "#/components/schemas/mac"
            },
            "example": "00-00-5E-DF-98-EB",
            "description": "The mac address of the adapter to associate with the account.\nMust not already be associated with another account."
          },
          {
            "in": "query",
            "name": "AdapterID",
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "example": "cd73b915-89a4-4971-9d86-bce91786b12a",
            "description": "IF the adapter is replacing an existing adapter, include the\nAdapterID of the Adapter to replace.  The AdapterID will not change\nbut the Adapter will replace the existing adapter known by that ID.\nThe old Adapter will then become unassociated from the client."
          }
        ],
        "responses": {
          "200": {
            "description": "Success, The claimed adapters details.\n\n- **AdapterID** - is the Unique ID of this Adapter.\n- **mac** - The Adapters mac address.\n- **ip** - list of ip addresses, either current, or last known.\n- **registered** - the time the adapter was first claimed by the\ncustomer.\n- **state** - the current state of the listed services.\n- **settings** - the current adapter level settings.\n- **diags** - the last and best result from diagnostic tests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Adapter"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Could not claim the adapter!"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/list": {
      "get": {
        "operationId": "adapterList",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Lists one or all adapters associated with the clients account.",
        "description": "Generates a list of adapters associated with the clients account.",
        "security": [
          {
            "clientToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "example": "cd73b915-89a4-4971-9d86-bce91786b12a",
            "description": "The Adapter ID to list.  IF not present, will return ALL Adapters\nassociated with the Clients account."
          }
        ],
        "responses": {
          "200": {
            "description": "Success, The adapters details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Adapters"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Could not find the adapter!"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/name": {
      "post": {
        "operationId": "adapterName",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Give an adapter a descriptive name.",
        "description": "Provides a descriptive name to an adapter that helps identify it.",
        "security": [
          {
            "clientToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "example": "cd73b915-89a4-4971-9d86-bce91786b12a",
            "description": "The Adapter ID to Name."
          },
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/adapter-name"
            },
            "example": "Home Office Adapter",
            "description": "The name to apply to the adapter."
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Adapter named.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Success, Adapter named."
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Could not name the adapter!"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/cfg": {
      "get": {
        "operationId": "adapterCfgQuery",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Query the state of configuration for an adapter.",
        "description": "For a particular Adapter, return the current and pending configuration.",
        "security": [
          {
            "clientToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "example": "cd73b915-89a4-4971-9d86-bce91786b12a",
            "description": "The Adapter ID to Query."
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Adapter Query Result returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Adapter-Settings"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Could not query the adapter!"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "post": {
        "operationId": "adapterCfg",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Change the Adapter Configuration.",
        "description": "Change the Adapter Configuration.",
        "security": [
          {
            "clientToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "example": "cd73b915-89a4-4971-9d86-bce91786b12a",
            "description": "The Adapter ID to Name."
          },
          {
            "in": "query",
            "name": "service",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "VPN",
                "AdBlocking",
                "SRelocation",
                "Malware"
              ]
            },
            "example": "VPN",
            "description": "The service to configure."
          },
          {
            "in": "query",
            "name": "state",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true,
            "description": "**true**=Enable the Service. **false**=Disable the Service.\n**null**=No Change"
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Adapter Config Change queued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Adapter-Settings"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Could not name the adapter!"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/datacap": {
      "post": {
        "operationId": "adapterDataCap",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Set the datacap for a particular adapter.",
        "description": "Sets the data caps for the identified adapter.",
        "security": [
          {
            "clientToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "example": "cd73b915-89a4-4971-9d86-bce91786b12a",
            "description": "The Adapter ID to Set DataCap of."
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The DataCap settings to apply.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/datacap"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, Adapter datacap set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Success, Adapter datacap set."
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Could not name the adapter!"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/adapter/wifi": {
      "post": {
        "operationId": "adapterWiFi",
        "tags": [
          "Adapter Management"
        ],
        "summary": "Set the WiFi settings for a particular adapter.",
        "description": "Sets the Wifi settings for the 2.4Ghz and 5Ghz Network.\nAny setting excluded or set to **null** will not be changed.",
        "security": [
          {
            "clientToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "example": "cd73b915-89a4-4971-9d86-bce91786b12a",
            "description": "The Adapter ID to Set Wifi Setting of."
          }
        ],
        "requestBody": {
          "required": true,
          "description": "\"The Wifi Settings to apply. Set to null anything that shouldn't change.\"",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wifi-settings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, WiFi settings set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Success, WiFi settings set."
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Could not name the adapter!"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/streaming/services": {
      "get": {
        "operationId": "streamingServices",
        "tags": [
          "Streaming Relocation Management"
        ],
        "summary": "Lists streaming services, either ALL, or according to classification.",
        "description": "Generates a list of streaming services currently supported by the system.",
        "security": [
          {
            "clientToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "All",
                "Portable",
                "Non-Portable"
              ],
              "nullable": true
            },
            "example": "All",
            "description": "The filter to apply to the service list, the list can contain ALL\nservices, or only Portable or Non-Portable services.\nIf the parameter is missing, or is **null** the call will return ALL\nservices.\n\nA **Portable** Service is one where the one subscription may be used\nin multiple countries.\n\nA **Non-Portable** Service is region locked to the subscription.\nFor example, a US Non-Portable Service can only view US content, and\ncan not be relocated to view UK content."
          }
        ],
        "responses": {
          "200": {
            "description": "Success, The streaming service list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/streams"
                },
                "example": [
                  {
                    "id": "cd73b915-89a4-4971-9d86-bce91786b12a",
                    "name": "Netflix",
                    "icon": "netflix.ico",
                    "portable": true,
                    "countries": {
                      "proxy": [
                        "US",
                        "GB",
                        "AU",
                        "TH"
                      ],
                      "non-proxy": [
                        "IL",
                        "ID"
                      ]
                    },
                    "settings": {
                      "current": {
                        "enabled": true,
                        "country": "US"
                      },
                      "pending": {
                        "country": "GB"
                      }
                    }
                  },
                  {
                    "id": "29a16e31-bb4d-4407-8244-8e68b820b854",
                    "name": "Disney+",
                    "icon": "disneyplus.ico",
                    "portable": false,
                    "countries": {
                      "proxy": [
                        "US",
                        "GB",
                        "IL"
                      ],
                      "non-proxy": [
                        "TH",
                        "ID"
                      ]
                    },
                    "settings": {
                      "current": {
                        "enabled": true,
                        "country": "GB"
                      },
                      "pending": {
                        "enabled": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "General Request processing error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Could not find the adapter!"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/streaming/cfg": {
      "post": {
        "operationId": "streamingCfgQuery",
        "tags": [
          "Streaming Relocation Management"
        ],
        "summary": "Set the streaming cfg for an adapter.",
        "description": "For a particular Adapter, set its streaming configuration.",
        "security": [
          {
            "clientToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "example": "cd73b915-89a4-4971-9d86-bce91786b12a",
            "description": "The Adapter ID to set."
          },
          {
            "in": "query",
            "name": "streamId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            },
            "example": "29a16e31-bb4d-4407-8244-8e68b820b854",
            "description": "The ID of the service, as obtained from the /streaming/services api\ncall."
          },
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "example": null
            },
            "description": "Optional: If set, can change if the relocation is enabled on the\nadapter for the service, or not.  If not set or null, the service\nenabled setting does not change."
          },
          {
            "in": "query",
            "name": "country",
            "schema": {
              "$ref": "#/components/schemas/iso3166-country"
            },
            "example": "GB",
            "description": "Optional: If set, can change the country the service is relocated\nto. If not set, the country is not changed.  Must be one of the\navailable countries listed in the /streaming/services api call."
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Streaming Service Configuration Queued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Could not query the adapter!"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/v1/client/notify": {
      "post": {
        "operationId": "clientNotify",
        "tags": [
          "Client Management"
        ],
        "summary": "Subscribe/Unsubscribe to notifications.",
        "description": "Allows the client to subscribe/unsubscribe from push notifications.",
        "security": [
          {
            "clientToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string",
              "format": "WebPush Client Token",
              "pattern": "^[\\w]+$",
              "minLength": 8,
              "maxLength": 256,
              "nullable": true
            },
            "example": "124FDSDGSDFG23452345FGsrfgsdf235",
            "description": "The clients notification token for their service.  Also known as the\n\"Registration Id\".  **null** will disable all notifications."
          },
          {
            "in": "query",
            "name": "service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "Notification",
              "enum": [
                "FIREBASE",
                "APNS-IOS",
                "APNS-WEB"
              ]
            },
            "example": "FIREBASE",
            "description": "The service the client token relates to.\n**\"FIREBASE\"** is used for Android and non-safari web push\nnotifications.\n**\"APNS-IOS\"** is used for IOS Apps.\n**\"APNS-WEB\"** is used for Safari Web Push notifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Notification set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ack"
                },
                "example": {
                  "msg": "Notification Registered OK."
                }
              }
            }
          },
          "400": {
            "description": "General Request processing error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nack"
                },
                "example": {
                  "error": "Could not name the adapter!"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    }
  }
}